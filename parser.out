Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> translation_unit
Rule 1     translation_unit -> external_declaration
Rule 2     translation_unit -> translation_unit external_declaration
Rule 3     external_declaration -> function_definition
Rule 4     external_declaration -> declaration
Rule 5     external_declaration -> INCLUDE LT ID include_endings
Rule 6     include_endings -> DOT GT
Rule 7     include_endings -> GT
Rule 8     function_definition -> declaration_specifiers declarator declaration_list compound_statement
Rule 9     function_definition -> declarator declaration_list compound_statement
Rule 10    function_definition -> declarator compound_statement
Rule 11    function_definition -> declaration_specifiers declarator compound_statement
Rule 12    declaration -> declaration_specifiers init_declarator_list SEMI
Rule 13    declaration -> declaration_specifiers SEMI
Rule 14    declaration_list -> declaration
Rule 15    declaration_list -> declaration_list declaration
Rule 16    declaration_specifiers -> type_specifier declaration_specifiers
Rule 17    declaration_specifiers -> type_specifier
Rule 18    type_specifier -> VOID
Rule 19    type_specifier -> INT
Rule 20    type_specifier -> TYPEID
Rule 21    init_declarator_list -> init_declarator
Rule 22    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 23    init_declarator -> declarator
Rule 24    init_declarator -> declarator EQUALS initializer
Rule 25    specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 26    specifier_qualifier_list -> type_specifier
Rule 27    declarator -> direct_declarator
Rule 28    direct_declarator -> ID
Rule 29    direct_declarator -> LPAREN declarator RPAREN
Rule 30    direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET
Rule 31    direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN
Rule 32    direct_declarator -> direct_declarator LPAREN identifier_list RPAREN
Rule 33    direct_declarator -> direct_declarator LPAREN RPAREN
Rule 34    parameter_type_list -> parameter_list
Rule 35    parameter_list -> parameter_declaration
Rule 36    parameter_list -> parameter_list COMMA parameter_declaration
Rule 37    parameter_declaration -> declaration_specifiers declarator
Rule 38    parameter_declaration -> declaration_specifiers abstract_declarator_opt
Rule 39    identifier_list -> ID
Rule 40    identifier_list -> identifier_list COMMA ID
Rule 41    initializer -> assignment_expression
Rule 42    initializer -> LBRACE initializer_list RBRACE
Rule 43    initializer -> LBRACE initializer_list COMMA RBRACE
Rule 44    initializer_list -> initializer
Rule 45    initializer_list -> initializer_list COMMA initializer
Rule 46    type_name -> specifier_qualifier_list abstract_declarator_opt
Rule 47    abstract_declarator_opt -> empty
Rule 48    abstract_declarator_opt -> abstract_declarator
Rule 49    abstract_declarator -> direct_abstract_declarator
Rule 50    direct_abstract_declarator -> LPAREN abstract_declarator RPAREN
Rule 51    direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_opt RBRACKET
Rule 52    direct_abstract_declarator -> LBRACKET constant_expression_opt RBRACKET
Rule 53    direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
Rule 54    direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN
Rule 55    constant_expression_opt -> empty
Rule 56    constant_expression_opt -> constant_expression
Rule 57    parameter_type_list_opt -> empty
Rule 58    parameter_type_list_opt -> parameter_type_list
Rule 59    statement -> expression_statement
Rule 60    statement -> compound_statement
Rule 61    statement -> selection_statement
Rule 62    statement -> iteration_statement
Rule 63    statement -> jump_statement
Rule 64    expression_statement -> expression_opt SEMI
Rule 65    compound_statement -> LBRACE declaration_list statement_list RBRACE
Rule 66    compound_statement -> LBRACE statement_list RBRACE
Rule 67    compound_statement -> LBRACE declaration_list RBRACE
Rule 68    compound_statement -> LBRACE RBRACE
Rule 69    statement_list -> statement
Rule 70    statement_list -> statement_list statement
Rule 71    selection_statement -> IF LPAREN expression RPAREN statement
Rule 72    selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 73    iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 74    iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
Rule 75    jump_statement -> BREAK SEMI
Rule 76    jump_statement -> RETURN expression_opt SEMI
Rule 77    expression_opt -> empty
Rule 78    expression_opt -> expression
Rule 79    expression -> assignment_expression
Rule 80    expression -> expression COMMA assignment_expression
Rule 81    assignment_expression -> conditional_expression
Rule 82    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 83    assignment_operator -> EQUALS
Rule 84    conditional_expression -> logical_or_expression
Rule 85    constant_expression -> conditional_expression
Rule 86    logical_or_expression -> logical_and_expression
Rule 87    logical_or_expression -> logical_or_expression LOR logical_and_expression
Rule 88    logical_and_expression -> inclusive_or_expression
Rule 89    logical_and_expression -> logical_and_expression LAND inclusive_or_expression
Rule 90    inclusive_or_expression -> exclusive_or_expression
Rule 91    inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression
Rule 92    exclusive_or_expression -> and_expression
Rule 93    and_expression -> equality_expression
Rule 94    and_expression -> and_expression AND equality_expression
Rule 95    equality_expression -> relational_expression
Rule 96    equality_expression -> equality_expression EQ relational_expression
Rule 97    relational_expression -> shift_expression
Rule 98    relational_expression -> relational_expression LT shift_expression
Rule 99    relational_expression -> relational_expression GT shift_expression
Rule 100   relational_expression -> relational_expression LE shift_expression
Rule 101   relational_expression -> relational_expression GE shift_expression
Rule 102   shift_expression -> additive_expression
Rule 103   shift_expression -> shift_expression LSHIFT additive_expression
Rule 104   shift_expression -> shift_expression RSHIFT additive_expression
Rule 105   additive_expression -> multiplicative_expression
Rule 106   additive_expression -> additive_expression PLUS multiplicative_expression
Rule 107   additive_expression -> additive_expression MINUS multiplicative_expression
Rule 108   multiplicative_expression -> cast_expression
Rule 109   multiplicative_expression -> multiplicative_expression TIMES cast_expression
Rule 110   multiplicative_expression -> multiplicative_expression DIVIDE cast_expression
Rule 111   multiplicative_expression -> multiplicative_expression MOD cast_expression
Rule 112   cast_expression -> unary_expression
Rule 113   cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 114   unary_expression -> postfix_expression
Rule 115   unary_expression -> PLUSPLUS unary_expression
Rule 116   unary_expression -> MINUSMINUS unary_expression
Rule 117   unary_expression -> unary_operator cast_expression
Rule 118   unary_operator -> AND
Rule 119   unary_operator -> TIMES
Rule 120   unary_operator -> PLUS
Rule 121   unary_operator -> MINUS
Rule 122   unary_operator -> LNOT
Rule 123   postfix_expression -> primary_expression
Rule 124   postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 125   postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN
Rule 126   postfix_expression -> postfix_expression LPAREN RPAREN
Rule 127   postfix_expression -> postfix_expression PLUSPLUS
Rule 128   postfix_expression -> postfix_expression MINUSMINUS
Rule 129   primary_expression -> ID
Rule 130   primary_expression -> constant
Rule 131   primary_expression -> SCONST
Rule 132   primary_expression -> LPAREN expression RPAREN
Rule 133   argument_expression_list -> assignment_expression
Rule 134   argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 135   constant -> ICONST
Rule 136   constant -> FCONST
Rule 137   constant -> CCONST
Rule 138   empty -> <empty>

Terminals, with rules where they appear

AND                  : 94 118
BREAK                : 75
CCONST               : 137
COMMA                : 22 36 40 43 45 80 134
DIVIDE               : 110
DOT                  : 6
ELSE                 : 72
EQ                   : 96
EQUALS               : 24 83
FCONST               : 136
FOR                  : 74
GE                   : 101
GT                   : 6 7 99
ICONST               : 135
ID                   : 5 28 39 40 129
IF                   : 71 72
INCLUDE              : 5
INT                  : 19
LAND                 : 89
LBRACE               : 42 43 65 66 67 68
LBRACKET             : 30 51 52 124
LE                   : 100
LNOT                 : 122
LOR                  : 87
LPAREN               : 29 31 32 33 50 53 54 71 72 73 74 113 125 126 132
LSHIFT               : 103
LT                   : 5 98
MINUS                : 107 121
MINUSMINUS           : 116 128
MOD                  : 111
OR                   : 91
PLUS                 : 106 120
PLUSPLUS             : 115 127
RBRACE               : 42 43 65 66 67 68
RBRACKET             : 30 51 52 124
RETURN               : 76
RPAREN               : 29 31 32 33 50 53 54 71 72 73 74 113 125 126 132
RSHIFT               : 104
SCONST               : 131
SEMI                 : 12 13 64 74 74 75 76
TIMES                : 109 119
TYPEID               : 20
VOID                 : 18
WHILE                : 73
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 48 50
abstract_declarator_opt : 38 46
additive_expression  : 102 103 104 106 107
and_expression       : 92 94
argument_expression_list : 125 134
assignment_expression : 41 79 80 82 133 134
assignment_operator  : 82
cast_expression      : 108 109 110 111 113 117
compound_statement   : 8 9 10 11 60
conditional_expression : 81 85
constant             : 130
constant_expression  : 56
constant_expression_opt : 30 51 52
declaration          : 4 14 15
declaration_list     : 8 9 15 65 67
declaration_specifiers : 8 11 12 13 16 37 38
declarator           : 8 9 10 11 23 24 29 37
direct_abstract_declarator : 49 51 53
direct_declarator    : 27 30 31 32 33
empty                : 47 55 57 77
equality_expression  : 93 94 96
exclusive_or_expression : 90 91
expression           : 71 72 73 78 80 124 132
expression_opt       : 64 74 74 74 76
expression_statement : 59
external_declaration : 1 2
function_definition  : 3
identifier_list      : 32 40
include_endings      : 5
inclusive_or_expression : 88 89 91
init_declarator      : 21 22
init_declarator_list : 12 22
initializer          : 24 44 45
initializer_list     : 42 43 45
iteration_statement  : 62
jump_statement       : 63
logical_and_expression : 86 87 89
logical_or_expression : 84 87
multiplicative_expression : 105 106 107 109 110 111
parameter_declaration : 35 36
parameter_list       : 34 36
parameter_type_list  : 31 58
parameter_type_list_opt : 53 54
postfix_expression   : 114 124 125 126 127 128
primary_expression   : 123
relational_expression : 95 96 98 99 100 101
selection_statement  : 61
shift_expression     : 97 98 99 100 101 103 104
specifier_qualifier_list : 25 46
statement            : 69 70 71 72 72 73 74
statement_list       : 65 66 70
translation_unit     : 2 0
type_name            : 113
type_specifier       : 16 17 25 26
unary_expression     : 82 112 115 116
unary_operator       : 117

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (1) translation_unit -> . external_declaration
    (2) translation_unit -> . translation_unit external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (5) external_declaration -> . INCLUDE LT ID include_endings
    (8) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (9) function_definition -> . declarator declaration_list compound_statement
    (10) function_definition -> . declarator compound_statement
    (11) function_definition -> . declaration_specifiers declarator compound_statement
    (12) declaration -> . declaration_specifiers init_declarator_list SEMI
    (13) declaration -> . declaration_specifiers SEMI
    (16) declaration_specifiers -> . type_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier
    (27) declarator -> . direct_declarator
    (18) type_specifier -> . VOID
    (19) type_specifier -> . INT
    (20) type_specifier -> . TYPEID
    (28) direct_declarator -> . ID
    (29) direct_declarator -> . LPAREN declarator RPAREN
    (30) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (31) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (32) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (33) direct_declarator -> . direct_declarator LPAREN RPAREN

    INCLUDE         shift and go to state 5
    VOID            shift and go to state 11
    INT             shift and go to state 12
    TYPEID          shift and go to state 13
    ID              shift and go to state 6
    LPAREN          shift and go to state 14

    translation_unit               shift and go to state 1
    external_declaration           shift and go to state 2
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 7
    declarator                     shift and go to state 8
    type_specifier                 shift and go to state 9
    direct_declarator              shift and go to state 10

state 1

    (0) S' -> translation_unit .
    (2) translation_unit -> translation_unit . external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (5) external_declaration -> . INCLUDE LT ID include_endings
    (8) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (9) function_definition -> . declarator declaration_list compound_statement
    (10) function_definition -> . declarator compound_statement
    (11) function_definition -> . declaration_specifiers declarator compound_statement
    (12) declaration -> . declaration_specifiers init_declarator_list SEMI
    (13) declaration -> . declaration_specifiers SEMI
    (16) declaration_specifiers -> . type_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier
    (27) declarator -> . direct_declarator
    (18) type_specifier -> . VOID
    (19) type_specifier -> . INT
    (20) type_specifier -> . TYPEID
    (28) direct_declarator -> . ID
    (29) direct_declarator -> . LPAREN declarator RPAREN
    (30) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (31) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (32) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (33) direct_declarator -> . direct_declarator LPAREN RPAREN

    INCLUDE         shift and go to state 5
    VOID            shift and go to state 11
    INT             shift and go to state 12
    TYPEID          shift and go to state 13
    ID              shift and go to state 6
    LPAREN          shift and go to state 14

    external_declaration           shift and go to state 15
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 7
    declarator                     shift and go to state 8
    type_specifier                 shift and go to state 9
    direct_declarator              shift and go to state 10

state 2

    (1) translation_unit -> external_declaration .

    INCLUDE         reduce using rule 1 (translation_unit -> external_declaration .)
    VOID            reduce using rule 1 (translation_unit -> external_declaration .)
    INT             reduce using rule 1 (translation_unit -> external_declaration .)
    TYPEID          reduce using rule 1 (translation_unit -> external_declaration .)
    ID              reduce using rule 1 (translation_unit -> external_declaration .)
    LPAREN          reduce using rule 1 (translation_unit -> external_declaration .)
    $end            reduce using rule 1 (translation_unit -> external_declaration .)


state 3

    (3) external_declaration -> function_definition .

    INCLUDE         reduce using rule 3 (external_declaration -> function_definition .)
    VOID            reduce using rule 3 (external_declaration -> function_definition .)
    INT             reduce using rule 3 (external_declaration -> function_definition .)
    TYPEID          reduce using rule 3 (external_declaration -> function_definition .)
    ID              reduce using rule 3 (external_declaration -> function_definition .)
    LPAREN          reduce using rule 3 (external_declaration -> function_definition .)
    $end            reduce using rule 3 (external_declaration -> function_definition .)


state 4

    (4) external_declaration -> declaration .

    INCLUDE         reduce using rule 4 (external_declaration -> declaration .)
    VOID            reduce using rule 4 (external_declaration -> declaration .)
    INT             reduce using rule 4 (external_declaration -> declaration .)
    TYPEID          reduce using rule 4 (external_declaration -> declaration .)
    ID              reduce using rule 4 (external_declaration -> declaration .)
    LPAREN          reduce using rule 4 (external_declaration -> declaration .)
    $end            reduce using rule 4 (external_declaration -> declaration .)


state 5

    (5) external_declaration -> INCLUDE . LT ID include_endings

    LT              shift and go to state 16


state 6

    (28) direct_declarator -> ID .

    LBRACKET        reduce using rule 28 (direct_declarator -> ID .)
    LPAREN          reduce using rule 28 (direct_declarator -> ID .)
    LBRACE          reduce using rule 28 (direct_declarator -> ID .)
    VOID            reduce using rule 28 (direct_declarator -> ID .)
    INT             reduce using rule 28 (direct_declarator -> ID .)
    TYPEID          reduce using rule 28 (direct_declarator -> ID .)
    EQUALS          reduce using rule 28 (direct_declarator -> ID .)
    SEMI            reduce using rule 28 (direct_declarator -> ID .)
    COMMA           reduce using rule 28 (direct_declarator -> ID .)
    RPAREN          reduce using rule 28 (direct_declarator -> ID .)


state 7

    (8) function_definition -> declaration_specifiers . declarator declaration_list compound_statement
    (11) function_definition -> declaration_specifiers . declarator compound_statement
    (12) declaration -> declaration_specifiers . init_declarator_list SEMI
    (13) declaration -> declaration_specifiers . SEMI
    (27) declarator -> . direct_declarator
    (21) init_declarator_list -> . init_declarator
    (22) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (28) direct_declarator -> . ID
    (29) direct_declarator -> . LPAREN declarator RPAREN
    (30) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (31) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (32) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (33) direct_declarator -> . direct_declarator LPAREN RPAREN
    (23) init_declarator -> . declarator
    (24) init_declarator -> . declarator EQUALS initializer

    SEMI            shift and go to state 19
    ID              shift and go to state 6
    LPAREN          shift and go to state 14

    declarator                     shift and go to state 17
    init_declarator_list           shift and go to state 18
    direct_declarator              shift and go to state 10
    init_declarator                shift and go to state 20

state 8

    (9) function_definition -> declarator . declaration_list compound_statement
    (10) function_definition -> declarator . compound_statement
    (14) declaration_list -> . declaration
    (15) declaration_list -> . declaration_list declaration
    (65) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (66) compound_statement -> . LBRACE statement_list RBRACE
    (67) compound_statement -> . LBRACE declaration_list RBRACE
    (68) compound_statement -> . LBRACE RBRACE
    (12) declaration -> . declaration_specifiers init_declarator_list SEMI
    (13) declaration -> . declaration_specifiers SEMI
    (16) declaration_specifiers -> . type_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier
    (18) type_specifier -> . VOID
    (19) type_specifier -> . INT
    (20) type_specifier -> . TYPEID

    LBRACE          shift and go to state 24
    VOID            shift and go to state 11
    INT             shift and go to state 12
    TYPEID          shift and go to state 13

    declaration_list               shift and go to state 21
    compound_statement             shift and go to state 22
    declaration                    shift and go to state 23
    declaration_specifiers         shift and go to state 25
    type_specifier                 shift and go to state 9

state 9

    (16) declaration_specifiers -> type_specifier . declaration_specifiers
    (17) declaration_specifiers -> type_specifier .
    (16) declaration_specifiers -> . type_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier
    (18) type_specifier -> . VOID
    (19) type_specifier -> . INT
    (20) type_specifier -> . TYPEID

    SEMI            reduce using rule 17 (declaration_specifiers -> type_specifier .)
    ID              reduce using rule 17 (declaration_specifiers -> type_specifier .)
    LPAREN          reduce using rule 17 (declaration_specifiers -> type_specifier .)
    LBRACKET        reduce using rule 17 (declaration_specifiers -> type_specifier .)
    COMMA           reduce using rule 17 (declaration_specifiers -> type_specifier .)
    RPAREN          reduce using rule 17 (declaration_specifiers -> type_specifier .)
    VOID            shift and go to state 11
    INT             shift and go to state 12
    TYPEID          shift and go to state 13

    type_specifier                 shift and go to state 9
    declaration_specifiers         shift and go to state 26

state 10

    (27) declarator -> direct_declarator .
    (30) direct_declarator -> direct_declarator . LBRACKET constant_expression_opt RBRACKET
    (31) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (32) direct_declarator -> direct_declarator . LPAREN identifier_list RPAREN
    (33) direct_declarator -> direct_declarator . LPAREN RPAREN

    LBRACE          reduce using rule 27 (declarator -> direct_declarator .)
    VOID            reduce using rule 27 (declarator -> direct_declarator .)
    INT             reduce using rule 27 (declarator -> direct_declarator .)
    TYPEID          reduce using rule 27 (declarator -> direct_declarator .)
    EQUALS          reduce using rule 27 (declarator -> direct_declarator .)
    SEMI            reduce using rule 27 (declarator -> direct_declarator .)
    COMMA           reduce using rule 27 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 27 (declarator -> direct_declarator .)
    LBRACKET        shift and go to state 27
    LPAREN          shift and go to state 28


state 11

    (18) type_specifier -> VOID .

    VOID            reduce using rule 18 (type_specifier -> VOID .)
    INT             reduce using rule 18 (type_specifier -> VOID .)
    TYPEID          reduce using rule 18 (type_specifier -> VOID .)
    SEMI            reduce using rule 18 (type_specifier -> VOID .)
    ID              reduce using rule 18 (type_specifier -> VOID .)
    LPAREN          reduce using rule 18 (type_specifier -> VOID .)
    LBRACKET        reduce using rule 18 (type_specifier -> VOID .)
    COMMA           reduce using rule 18 (type_specifier -> VOID .)
    RPAREN          reduce using rule 18 (type_specifier -> VOID .)


state 12

    (19) type_specifier -> INT .

    VOID            reduce using rule 19 (type_specifier -> INT .)
    INT             reduce using rule 19 (type_specifier -> INT .)
    TYPEID          reduce using rule 19 (type_specifier -> INT .)
    SEMI            reduce using rule 19 (type_specifier -> INT .)
    ID              reduce using rule 19 (type_specifier -> INT .)
    LPAREN          reduce using rule 19 (type_specifier -> INT .)
    LBRACKET        reduce using rule 19 (type_specifier -> INT .)
    COMMA           reduce using rule 19 (type_specifier -> INT .)
    RPAREN          reduce using rule 19 (type_specifier -> INT .)


state 13

    (20) type_specifier -> TYPEID .

    VOID            reduce using rule 20 (type_specifier -> TYPEID .)
    INT             reduce using rule 20 (type_specifier -> TYPEID .)
    TYPEID          reduce using rule 20 (type_specifier -> TYPEID .)
    SEMI            reduce using rule 20 (type_specifier -> TYPEID .)
    ID              reduce using rule 20 (type_specifier -> TYPEID .)
    LPAREN          reduce using rule 20 (type_specifier -> TYPEID .)
    LBRACKET        reduce using rule 20 (type_specifier -> TYPEID .)
    COMMA           reduce using rule 20 (type_specifier -> TYPEID .)
    RPAREN          reduce using rule 20 (type_specifier -> TYPEID .)


state 14

    (29) direct_declarator -> LPAREN . declarator RPAREN
    (27) declarator -> . direct_declarator
    (28) direct_declarator -> . ID
    (29) direct_declarator -> . LPAREN declarator RPAREN
    (30) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (31) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (32) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (33) direct_declarator -> . direct_declarator LPAREN RPAREN

    ID              shift and go to state 6
    LPAREN          shift and go to state 14

    declarator                     shift and go to state 29
    direct_declarator              shift and go to state 10

state 15

    (2) translation_unit -> translation_unit external_declaration .

    INCLUDE         reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    TYPEID          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    ID              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LPAREN          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)


state 16

    (5) external_declaration -> INCLUDE LT . ID include_endings

    ID              shift and go to state 30


state 17

    (8) function_definition -> declaration_specifiers declarator . declaration_list compound_statement
    (11) function_definition -> declaration_specifiers declarator . compound_statement
    (23) init_declarator -> declarator .
    (24) init_declarator -> declarator . EQUALS initializer
    (14) declaration_list -> . declaration
    (15) declaration_list -> . declaration_list declaration
    (65) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (66) compound_statement -> . LBRACE statement_list RBRACE
    (67) compound_statement -> . LBRACE declaration_list RBRACE
    (68) compound_statement -> . LBRACE RBRACE
    (12) declaration -> . declaration_specifiers init_declarator_list SEMI
    (13) declaration -> . declaration_specifiers SEMI
    (16) declaration_specifiers -> . type_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier
    (18) type_specifier -> . VOID
    (19) type_specifier -> . INT
    (20) type_specifier -> . TYPEID

    SEMI            reduce using rule 23 (init_declarator -> declarator .)
    COMMA           reduce using rule 23 (init_declarator -> declarator .)
    EQUALS          shift and go to state 33
    LBRACE          shift and go to state 24
    VOID            shift and go to state 11
    INT             shift and go to state 12
    TYPEID          shift and go to state 13

    declaration_specifiers         shift and go to state 25
    declaration_list               shift and go to state 31
    compound_statement             shift and go to state 32
    declaration                    shift and go to state 23
    type_specifier                 shift and go to state 9

state 18

    (12) declaration -> declaration_specifiers init_declarator_list . SEMI
    (22) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            shift and go to state 34
    COMMA           shift and go to state 35


state 19

    (13) declaration -> declaration_specifiers SEMI .

    INCLUDE         reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    VOID            reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    INT             reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    TYPEID          reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    ID              reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    LPAREN          reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    $end            reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    LBRACE          reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    RBRACE          reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    IF              reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    WHILE           reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    FOR             reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    BREAK           reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    RETURN          reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    PLUSPLUS        reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    MINUSMINUS      reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    AND             reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    TIMES           reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    PLUS            reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    MINUS           reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    LNOT            reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    SCONST          reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    ICONST          reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    FCONST          reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    CCONST          reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    SEMI            reduce using rule 13 (declaration -> declaration_specifiers SEMI .)


state 20

    (21) init_declarator_list -> init_declarator .

    SEMI            reduce using rule 21 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 21 (init_declarator_list -> init_declarator .)


state 21

    (9) function_definition -> declarator declaration_list . compound_statement
    (15) declaration_list -> declaration_list . declaration
    (65) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (66) compound_statement -> . LBRACE statement_list RBRACE
    (67) compound_statement -> . LBRACE declaration_list RBRACE
    (68) compound_statement -> . LBRACE RBRACE
    (12) declaration -> . declaration_specifiers init_declarator_list SEMI
    (13) declaration -> . declaration_specifiers SEMI
    (16) declaration_specifiers -> . type_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier
    (18) type_specifier -> . VOID
    (19) type_specifier -> . INT
    (20) type_specifier -> . TYPEID

    LBRACE          shift and go to state 24
    VOID            shift and go to state 11
    INT             shift and go to state 12
    TYPEID          shift and go to state 13

    compound_statement             shift and go to state 36
    declaration                    shift and go to state 37
    declaration_specifiers         shift and go to state 25
    type_specifier                 shift and go to state 9

state 22

    (10) function_definition -> declarator compound_statement .

    INCLUDE         reduce using rule 10 (function_definition -> declarator compound_statement .)
    VOID            reduce using rule 10 (function_definition -> declarator compound_statement .)
    INT             reduce using rule 10 (function_definition -> declarator compound_statement .)
    TYPEID          reduce using rule 10 (function_definition -> declarator compound_statement .)
    ID              reduce using rule 10 (function_definition -> declarator compound_statement .)
    LPAREN          reduce using rule 10 (function_definition -> declarator compound_statement .)
    $end            reduce using rule 10 (function_definition -> declarator compound_statement .)


state 23

    (14) declaration_list -> declaration .

    LBRACE          reduce using rule 14 (declaration_list -> declaration .)
    VOID            reduce using rule 14 (declaration_list -> declaration .)
    INT             reduce using rule 14 (declaration_list -> declaration .)
    TYPEID          reduce using rule 14 (declaration_list -> declaration .)
    RBRACE          reduce using rule 14 (declaration_list -> declaration .)
    IF              reduce using rule 14 (declaration_list -> declaration .)
    WHILE           reduce using rule 14 (declaration_list -> declaration .)
    FOR             reduce using rule 14 (declaration_list -> declaration .)
    BREAK           reduce using rule 14 (declaration_list -> declaration .)
    RETURN          reduce using rule 14 (declaration_list -> declaration .)
    PLUSPLUS        reduce using rule 14 (declaration_list -> declaration .)
    MINUSMINUS      reduce using rule 14 (declaration_list -> declaration .)
    AND             reduce using rule 14 (declaration_list -> declaration .)
    TIMES           reduce using rule 14 (declaration_list -> declaration .)
    PLUS            reduce using rule 14 (declaration_list -> declaration .)
    MINUS           reduce using rule 14 (declaration_list -> declaration .)
    LNOT            reduce using rule 14 (declaration_list -> declaration .)
    ID              reduce using rule 14 (declaration_list -> declaration .)
    SCONST          reduce using rule 14 (declaration_list -> declaration .)
    LPAREN          reduce using rule 14 (declaration_list -> declaration .)
    ICONST          reduce using rule 14 (declaration_list -> declaration .)
    FCONST          reduce using rule 14 (declaration_list -> declaration .)
    CCONST          reduce using rule 14 (declaration_list -> declaration .)
    SEMI            reduce using rule 14 (declaration_list -> declaration .)


state 24

    (65) compound_statement -> LBRACE . declaration_list statement_list RBRACE
    (66) compound_statement -> LBRACE . statement_list RBRACE
    (67) compound_statement -> LBRACE . declaration_list RBRACE
    (68) compound_statement -> LBRACE . RBRACE
    (14) declaration_list -> . declaration
    (15) declaration_list -> . declaration_list declaration
    (69) statement_list -> . statement
    (70) statement_list -> . statement_list statement
    (12) declaration -> . declaration_specifiers init_declarator_list SEMI
    (13) declaration -> . declaration_specifiers SEMI
    (59) statement -> . expression_statement
    (60) statement -> . compound_statement
    (61) statement -> . selection_statement
    (62) statement -> . iteration_statement
    (63) statement -> . jump_statement
    (16) declaration_specifiers -> . type_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier
    (64) expression_statement -> . expression_opt SEMI
    (65) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (66) compound_statement -> . LBRACE statement_list RBRACE
    (67) compound_statement -> . LBRACE declaration_list RBRACE
    (68) compound_statement -> . LBRACE RBRACE
    (71) selection_statement -> . IF LPAREN expression RPAREN statement
    (72) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (73) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (75) jump_statement -> . BREAK SEMI
    (76) jump_statement -> . RETURN expression_opt SEMI
    (18) type_specifier -> . VOID
    (19) type_specifier -> . INT
    (20) type_specifier -> . TYPEID
    (77) expression_opt -> . empty
    (78) expression_opt -> . expression
    (138) empty -> .
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (84) conditional_expression -> . logical_or_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 40
    LBRACE          shift and go to state 24
    IF              shift and go to state 48
    WHILE           shift and go to state 51
    FOR             shift and go to state 52
    BREAK           shift and go to state 53
    RETURN          shift and go to state 54
    VOID            shift and go to state 11
    INT             shift and go to state 12
    TYPEID          shift and go to state 13
    SEMI            reduce using rule 138 (empty -> .)
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    LPAREN          shift and go to state 49
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    declaration_list               shift and go to state 38
    statement_list                 shift and go to state 39
    declaration                    shift and go to state 23
    statement                      shift and go to state 41
    declaration_specifiers         shift and go to state 25
    expression_statement           shift and go to state 42
    compound_statement             shift and go to state 43
    selection_statement            shift and go to state 44
    iteration_statement            shift and go to state 45
    jump_statement                 shift and go to state 46
    type_specifier                 shift and go to state 9
    expression_opt                 shift and go to state 47
    expression                     shift and go to state 50
    empty                          shift and go to state 55
    assignment_expression          shift and go to state 56
    conditional_expression         shift and go to state 57
    unary_expression               shift and go to state 58
    logical_or_expression          shift and go to state 59
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    cast_expression                shift and go to state 64
    logical_and_expression         shift and go to state 65
    primary_expression             shift and go to state 66
    inclusive_or_expression        shift and go to state 72
    constant                       shift and go to state 74
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85

state 25

    (12) declaration -> declaration_specifiers . init_declarator_list SEMI
    (13) declaration -> declaration_specifiers . SEMI
    (21) init_declarator_list -> . init_declarator
    (22) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (23) init_declarator -> . declarator
    (24) init_declarator -> . declarator EQUALS initializer
    (27) declarator -> . direct_declarator
    (28) direct_declarator -> . ID
    (29) direct_declarator -> . LPAREN declarator RPAREN
    (30) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (31) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (32) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (33) direct_declarator -> . direct_declarator LPAREN RPAREN

    SEMI            shift and go to state 19
    ID              shift and go to state 6
    LPAREN          shift and go to state 14

    init_declarator_list           shift and go to state 18
    init_declarator                shift and go to state 20
    declarator                     shift and go to state 86
    direct_declarator              shift and go to state 10

state 26

    (16) declaration_specifiers -> type_specifier declaration_specifiers .

    SEMI            reduce using rule 16 (declaration_specifiers -> type_specifier declaration_specifiers .)
    ID              reduce using rule 16 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LPAREN          reduce using rule 16 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LBRACKET        reduce using rule 16 (declaration_specifiers -> type_specifier declaration_specifiers .)
    COMMA           reduce using rule 16 (declaration_specifiers -> type_specifier declaration_specifiers .)
    RPAREN          reduce using rule 16 (declaration_specifiers -> type_specifier declaration_specifiers .)


state 27

    (30) direct_declarator -> direct_declarator LBRACKET . constant_expression_opt RBRACKET
    (55) constant_expression_opt -> . empty
    (56) constant_expression_opt -> . constant_expression
    (138) empty -> .
    (85) constant_expression -> . conditional_expression
    (84) conditional_expression -> . logical_or_expression
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST

    RBRACKET        reduce using rule 138 (empty -> .)
    LPAREN          shift and go to state 92
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    constant_expression_opt        shift and go to state 87
    empty                          shift and go to state 88
    constant_expression            shift and go to state 89
    conditional_expression         shift and go to state 90
    logical_or_expression          shift and go to state 59
    logical_and_expression         shift and go to state 65
    inclusive_or_expression        shift and go to state 72
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85
    cast_expression                shift and go to state 64
    unary_expression               shift and go to state 91
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 66
    constant                       shift and go to state 74

state 28

    (31) direct_declarator -> direct_declarator LPAREN . parameter_type_list RPAREN
    (32) direct_declarator -> direct_declarator LPAREN . identifier_list RPAREN
    (33) direct_declarator -> direct_declarator LPAREN . RPAREN
    (34) parameter_type_list -> . parameter_list
    (39) identifier_list -> . ID
    (40) identifier_list -> . identifier_list COMMA ID
    (35) parameter_list -> . parameter_declaration
    (36) parameter_list -> . parameter_list COMMA parameter_declaration
    (37) parameter_declaration -> . declaration_specifiers declarator
    (38) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (16) declaration_specifiers -> . type_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier
    (18) type_specifier -> . VOID
    (19) type_specifier -> . INT
    (20) type_specifier -> . TYPEID

    RPAREN          shift and go to state 94
    ID              shift and go to state 97
    VOID            shift and go to state 11
    INT             shift and go to state 12
    TYPEID          shift and go to state 13

    parameter_type_list            shift and go to state 93
    identifier_list                shift and go to state 95
    parameter_list                 shift and go to state 96
    parameter_declaration          shift and go to state 98
    declaration_specifiers         shift and go to state 99
    type_specifier                 shift and go to state 9

state 29

    (29) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 100


state 30

    (5) external_declaration -> INCLUDE LT ID . include_endings
    (6) include_endings -> . DOT GT
    (7) include_endings -> . GT

    DOT             shift and go to state 102
    GT              shift and go to state 103

    include_endings                shift and go to state 101

state 31

    (8) function_definition -> declaration_specifiers declarator declaration_list . compound_statement
    (15) declaration_list -> declaration_list . declaration
    (65) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (66) compound_statement -> . LBRACE statement_list RBRACE
    (67) compound_statement -> . LBRACE declaration_list RBRACE
    (68) compound_statement -> . LBRACE RBRACE
    (12) declaration -> . declaration_specifiers init_declarator_list SEMI
    (13) declaration -> . declaration_specifiers SEMI
    (16) declaration_specifiers -> . type_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier
    (18) type_specifier -> . VOID
    (19) type_specifier -> . INT
    (20) type_specifier -> . TYPEID

    LBRACE          shift and go to state 24
    VOID            shift and go to state 11
    INT             shift and go to state 12
    TYPEID          shift and go to state 13

    declaration_specifiers         shift and go to state 25
    compound_statement             shift and go to state 104
    declaration                    shift and go to state 37
    type_specifier                 shift and go to state 9

state 32

    (11) function_definition -> declaration_specifiers declarator compound_statement .

    INCLUDE         reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOID            reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    INT             reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    TYPEID          reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    ID              reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    LPAREN          reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    $end            reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)


state 33

    (24) init_declarator -> declarator EQUALS . initializer
    (41) initializer -> . assignment_expression
    (42) initializer -> . LBRACE initializer_list RBRACE
    (43) initializer -> . LBRACE initializer_list COMMA RBRACE
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (84) conditional_expression -> . logical_or_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 107
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    LPAREN          shift and go to state 49
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    initializer                    shift and go to state 105
    assignment_expression          shift and go to state 106
    conditional_expression         shift and go to state 57
    unary_expression               shift and go to state 58
    logical_or_expression          shift and go to state 59
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    cast_expression                shift and go to state 64
    logical_and_expression         shift and go to state 65
    primary_expression             shift and go to state 66
    inclusive_or_expression        shift and go to state 72
    constant                       shift and go to state 74
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85

state 34

    (12) declaration -> declaration_specifiers init_declarator_list SEMI .

    INCLUDE         reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    VOID            reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    INT             reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TYPEID          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    ID              reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LPAREN          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    $end            reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LBRACE          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    RBRACE          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    IF              reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    WHILE           reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FOR             reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    BREAK           reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    RETURN          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    PLUSPLUS        reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    MINUSMINUS      reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    AND             reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TIMES           reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    PLUS            reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    MINUS           reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LNOT            reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SCONST          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    ICONST          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FCONST          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CCONST          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SEMI            reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)


state 35

    (22) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (23) init_declarator -> . declarator
    (24) init_declarator -> . declarator EQUALS initializer
    (27) declarator -> . direct_declarator
    (28) direct_declarator -> . ID
    (29) direct_declarator -> . LPAREN declarator RPAREN
    (30) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (31) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (32) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (33) direct_declarator -> . direct_declarator LPAREN RPAREN

    ID              shift and go to state 6
    LPAREN          shift and go to state 14

    init_declarator                shift and go to state 108
    declarator                     shift and go to state 86
    direct_declarator              shift and go to state 10

state 36

    (9) function_definition -> declarator declaration_list compound_statement .

    INCLUDE         reduce using rule 9 (function_definition -> declarator declaration_list compound_statement .)
    VOID            reduce using rule 9 (function_definition -> declarator declaration_list compound_statement .)
    INT             reduce using rule 9 (function_definition -> declarator declaration_list compound_statement .)
    TYPEID          reduce using rule 9 (function_definition -> declarator declaration_list compound_statement .)
    ID              reduce using rule 9 (function_definition -> declarator declaration_list compound_statement .)
    LPAREN          reduce using rule 9 (function_definition -> declarator declaration_list compound_statement .)
    $end            reduce using rule 9 (function_definition -> declarator declaration_list compound_statement .)


state 37

    (15) declaration_list -> declaration_list declaration .

    LBRACE          reduce using rule 15 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 15 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 15 (declaration_list -> declaration_list declaration .)
    TYPEID          reduce using rule 15 (declaration_list -> declaration_list declaration .)
    RBRACE          reduce using rule 15 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 15 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 15 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 15 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 15 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 15 (declaration_list -> declaration_list declaration .)
    PLUSPLUS        reduce using rule 15 (declaration_list -> declaration_list declaration .)
    MINUSMINUS      reduce using rule 15 (declaration_list -> declaration_list declaration .)
    AND             reduce using rule 15 (declaration_list -> declaration_list declaration .)
    TIMES           reduce using rule 15 (declaration_list -> declaration_list declaration .)
    PLUS            reduce using rule 15 (declaration_list -> declaration_list declaration .)
    MINUS           reduce using rule 15 (declaration_list -> declaration_list declaration .)
    LNOT            reduce using rule 15 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 15 (declaration_list -> declaration_list declaration .)
    SCONST          reduce using rule 15 (declaration_list -> declaration_list declaration .)
    LPAREN          reduce using rule 15 (declaration_list -> declaration_list declaration .)
    ICONST          reduce using rule 15 (declaration_list -> declaration_list declaration .)
    FCONST          reduce using rule 15 (declaration_list -> declaration_list declaration .)
    CCONST          reduce using rule 15 (declaration_list -> declaration_list declaration .)
    SEMI            reduce using rule 15 (declaration_list -> declaration_list declaration .)


state 38

    (65) compound_statement -> LBRACE declaration_list . statement_list RBRACE
    (67) compound_statement -> LBRACE declaration_list . RBRACE
    (15) declaration_list -> declaration_list . declaration
    (69) statement_list -> . statement
    (70) statement_list -> . statement_list statement
    (12) declaration -> . declaration_specifiers init_declarator_list SEMI
    (13) declaration -> . declaration_specifiers SEMI
    (59) statement -> . expression_statement
    (60) statement -> . compound_statement
    (61) statement -> . selection_statement
    (62) statement -> . iteration_statement
    (63) statement -> . jump_statement
    (16) declaration_specifiers -> . type_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier
    (64) expression_statement -> . expression_opt SEMI
    (65) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (66) compound_statement -> . LBRACE statement_list RBRACE
    (67) compound_statement -> . LBRACE declaration_list RBRACE
    (68) compound_statement -> . LBRACE RBRACE
    (71) selection_statement -> . IF LPAREN expression RPAREN statement
    (72) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (73) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (75) jump_statement -> . BREAK SEMI
    (76) jump_statement -> . RETURN expression_opt SEMI
    (18) type_specifier -> . VOID
    (19) type_specifier -> . INT
    (20) type_specifier -> . TYPEID
    (77) expression_opt -> . empty
    (78) expression_opt -> . expression
    (138) empty -> .
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (84) conditional_expression -> . logical_or_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 110
    LBRACE          shift and go to state 24
    IF              shift and go to state 48
    WHILE           shift and go to state 51
    FOR             shift and go to state 52
    BREAK           shift and go to state 53
    RETURN          shift and go to state 54
    VOID            shift and go to state 11
    INT             shift and go to state 12
    TYPEID          shift and go to state 13
    SEMI            reduce using rule 138 (empty -> .)
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    LPAREN          shift and go to state 49
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    statement_list                 shift and go to state 109
    declaration                    shift and go to state 37
    statement                      shift and go to state 41
    declaration_specifiers         shift and go to state 25
    expression_statement           shift and go to state 42
    compound_statement             shift and go to state 43
    selection_statement            shift and go to state 44
    iteration_statement            shift and go to state 45
    jump_statement                 shift and go to state 46
    type_specifier                 shift and go to state 9
    expression_opt                 shift and go to state 47
    expression                     shift and go to state 50
    empty                          shift and go to state 55
    assignment_expression          shift and go to state 56
    conditional_expression         shift and go to state 57
    unary_expression               shift and go to state 58
    logical_or_expression          shift and go to state 59
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    cast_expression                shift and go to state 64
    logical_and_expression         shift and go to state 65
    primary_expression             shift and go to state 66
    inclusive_or_expression        shift and go to state 72
    constant                       shift and go to state 74
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85

state 39

    (66) compound_statement -> LBRACE statement_list . RBRACE
    (70) statement_list -> statement_list . statement
    (59) statement -> . expression_statement
    (60) statement -> . compound_statement
    (61) statement -> . selection_statement
    (62) statement -> . iteration_statement
    (63) statement -> . jump_statement
    (64) expression_statement -> . expression_opt SEMI
    (65) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (66) compound_statement -> . LBRACE statement_list RBRACE
    (67) compound_statement -> . LBRACE declaration_list RBRACE
    (68) compound_statement -> . LBRACE RBRACE
    (71) selection_statement -> . IF LPAREN expression RPAREN statement
    (72) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (73) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (75) jump_statement -> . BREAK SEMI
    (76) jump_statement -> . RETURN expression_opt SEMI
    (77) expression_opt -> . empty
    (78) expression_opt -> . expression
    (138) empty -> .
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (84) conditional_expression -> . logical_or_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 111
    LBRACE          shift and go to state 24
    IF              shift and go to state 48
    WHILE           shift and go to state 51
    FOR             shift and go to state 52
    BREAK           shift and go to state 53
    RETURN          shift and go to state 54
    SEMI            reduce using rule 138 (empty -> .)
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    LPAREN          shift and go to state 49
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    statement                      shift and go to state 112
    expression_statement           shift and go to state 42
    compound_statement             shift and go to state 43
    selection_statement            shift and go to state 44
    iteration_statement            shift and go to state 45
    jump_statement                 shift and go to state 46
    expression_opt                 shift and go to state 47
    expression                     shift and go to state 50
    empty                          shift and go to state 55
    assignment_expression          shift and go to state 56
    conditional_expression         shift and go to state 57
    unary_expression               shift and go to state 58
    logical_or_expression          shift and go to state 59
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    cast_expression                shift and go to state 64
    logical_and_expression         shift and go to state 65
    primary_expression             shift and go to state 66
    inclusive_or_expression        shift and go to state 72
    constant                       shift and go to state 74
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85

state 40

    (68) compound_statement -> LBRACE RBRACE .

    INCLUDE         reduce using rule 68 (compound_statement -> LBRACE RBRACE .)
    VOID            reduce using rule 68 (compound_statement -> LBRACE RBRACE .)
    INT             reduce using rule 68 (compound_statement -> LBRACE RBRACE .)
    TYPEID          reduce using rule 68 (compound_statement -> LBRACE RBRACE .)
    ID              reduce using rule 68 (compound_statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 68 (compound_statement -> LBRACE RBRACE .)
    $end            reduce using rule 68 (compound_statement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 68 (compound_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 68 (compound_statement -> LBRACE RBRACE .)
    IF              reduce using rule 68 (compound_statement -> LBRACE RBRACE .)
    WHILE           reduce using rule 68 (compound_statement -> LBRACE RBRACE .)
    FOR             reduce using rule 68 (compound_statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 68 (compound_statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 68 (compound_statement -> LBRACE RBRACE .)
    PLUSPLUS        reduce using rule 68 (compound_statement -> LBRACE RBRACE .)
    MINUSMINUS      reduce using rule 68 (compound_statement -> LBRACE RBRACE .)
    AND             reduce using rule 68 (compound_statement -> LBRACE RBRACE .)
    TIMES           reduce using rule 68 (compound_statement -> LBRACE RBRACE .)
    PLUS            reduce using rule 68 (compound_statement -> LBRACE RBRACE .)
    MINUS           reduce using rule 68 (compound_statement -> LBRACE RBRACE .)
    LNOT            reduce using rule 68 (compound_statement -> LBRACE RBRACE .)
    SCONST          reduce using rule 68 (compound_statement -> LBRACE RBRACE .)
    ICONST          reduce using rule 68 (compound_statement -> LBRACE RBRACE .)
    FCONST          reduce using rule 68 (compound_statement -> LBRACE RBRACE .)
    CCONST          reduce using rule 68 (compound_statement -> LBRACE RBRACE .)
    SEMI            reduce using rule 68 (compound_statement -> LBRACE RBRACE .)
    ELSE            reduce using rule 68 (compound_statement -> LBRACE RBRACE .)


state 41

    (69) statement_list -> statement .

    RBRACE          reduce using rule 69 (statement_list -> statement .)
    LBRACE          reduce using rule 69 (statement_list -> statement .)
    IF              reduce using rule 69 (statement_list -> statement .)
    WHILE           reduce using rule 69 (statement_list -> statement .)
    FOR             reduce using rule 69 (statement_list -> statement .)
    BREAK           reduce using rule 69 (statement_list -> statement .)
    RETURN          reduce using rule 69 (statement_list -> statement .)
    PLUSPLUS        reduce using rule 69 (statement_list -> statement .)
    MINUSMINUS      reduce using rule 69 (statement_list -> statement .)
    AND             reduce using rule 69 (statement_list -> statement .)
    TIMES           reduce using rule 69 (statement_list -> statement .)
    PLUS            reduce using rule 69 (statement_list -> statement .)
    MINUS           reduce using rule 69 (statement_list -> statement .)
    LNOT            reduce using rule 69 (statement_list -> statement .)
    ID              reduce using rule 69 (statement_list -> statement .)
    SCONST          reduce using rule 69 (statement_list -> statement .)
    LPAREN          reduce using rule 69 (statement_list -> statement .)
    ICONST          reduce using rule 69 (statement_list -> statement .)
    FCONST          reduce using rule 69 (statement_list -> statement .)
    CCONST          reduce using rule 69 (statement_list -> statement .)
    SEMI            reduce using rule 69 (statement_list -> statement .)


state 42

    (59) statement -> expression_statement .

    RBRACE          reduce using rule 59 (statement -> expression_statement .)
    LBRACE          reduce using rule 59 (statement -> expression_statement .)
    IF              reduce using rule 59 (statement -> expression_statement .)
    WHILE           reduce using rule 59 (statement -> expression_statement .)
    FOR             reduce using rule 59 (statement -> expression_statement .)
    BREAK           reduce using rule 59 (statement -> expression_statement .)
    RETURN          reduce using rule 59 (statement -> expression_statement .)
    PLUSPLUS        reduce using rule 59 (statement -> expression_statement .)
    MINUSMINUS      reduce using rule 59 (statement -> expression_statement .)
    AND             reduce using rule 59 (statement -> expression_statement .)
    TIMES           reduce using rule 59 (statement -> expression_statement .)
    PLUS            reduce using rule 59 (statement -> expression_statement .)
    MINUS           reduce using rule 59 (statement -> expression_statement .)
    LNOT            reduce using rule 59 (statement -> expression_statement .)
    ID              reduce using rule 59 (statement -> expression_statement .)
    SCONST          reduce using rule 59 (statement -> expression_statement .)
    LPAREN          reduce using rule 59 (statement -> expression_statement .)
    ICONST          reduce using rule 59 (statement -> expression_statement .)
    FCONST          reduce using rule 59 (statement -> expression_statement .)
    CCONST          reduce using rule 59 (statement -> expression_statement .)
    SEMI            reduce using rule 59 (statement -> expression_statement .)
    ELSE            reduce using rule 59 (statement -> expression_statement .)


state 43

    (60) statement -> compound_statement .

    RBRACE          reduce using rule 60 (statement -> compound_statement .)
    LBRACE          reduce using rule 60 (statement -> compound_statement .)
    IF              reduce using rule 60 (statement -> compound_statement .)
    WHILE           reduce using rule 60 (statement -> compound_statement .)
    FOR             reduce using rule 60 (statement -> compound_statement .)
    BREAK           reduce using rule 60 (statement -> compound_statement .)
    RETURN          reduce using rule 60 (statement -> compound_statement .)
    PLUSPLUS        reduce using rule 60 (statement -> compound_statement .)
    MINUSMINUS      reduce using rule 60 (statement -> compound_statement .)
    AND             reduce using rule 60 (statement -> compound_statement .)
    TIMES           reduce using rule 60 (statement -> compound_statement .)
    PLUS            reduce using rule 60 (statement -> compound_statement .)
    MINUS           reduce using rule 60 (statement -> compound_statement .)
    LNOT            reduce using rule 60 (statement -> compound_statement .)
    ID              reduce using rule 60 (statement -> compound_statement .)
    SCONST          reduce using rule 60 (statement -> compound_statement .)
    LPAREN          reduce using rule 60 (statement -> compound_statement .)
    ICONST          reduce using rule 60 (statement -> compound_statement .)
    FCONST          reduce using rule 60 (statement -> compound_statement .)
    CCONST          reduce using rule 60 (statement -> compound_statement .)
    SEMI            reduce using rule 60 (statement -> compound_statement .)
    ELSE            reduce using rule 60 (statement -> compound_statement .)


state 44

    (61) statement -> selection_statement .

    RBRACE          reduce using rule 61 (statement -> selection_statement .)
    LBRACE          reduce using rule 61 (statement -> selection_statement .)
    IF              reduce using rule 61 (statement -> selection_statement .)
    WHILE           reduce using rule 61 (statement -> selection_statement .)
    FOR             reduce using rule 61 (statement -> selection_statement .)
    BREAK           reduce using rule 61 (statement -> selection_statement .)
    RETURN          reduce using rule 61 (statement -> selection_statement .)
    PLUSPLUS        reduce using rule 61 (statement -> selection_statement .)
    MINUSMINUS      reduce using rule 61 (statement -> selection_statement .)
    AND             reduce using rule 61 (statement -> selection_statement .)
    TIMES           reduce using rule 61 (statement -> selection_statement .)
    PLUS            reduce using rule 61 (statement -> selection_statement .)
    MINUS           reduce using rule 61 (statement -> selection_statement .)
    LNOT            reduce using rule 61 (statement -> selection_statement .)
    ID              reduce using rule 61 (statement -> selection_statement .)
    SCONST          reduce using rule 61 (statement -> selection_statement .)
    LPAREN          reduce using rule 61 (statement -> selection_statement .)
    ICONST          reduce using rule 61 (statement -> selection_statement .)
    FCONST          reduce using rule 61 (statement -> selection_statement .)
    CCONST          reduce using rule 61 (statement -> selection_statement .)
    SEMI            reduce using rule 61 (statement -> selection_statement .)
    ELSE            reduce using rule 61 (statement -> selection_statement .)


state 45

    (62) statement -> iteration_statement .

    RBRACE          reduce using rule 62 (statement -> iteration_statement .)
    LBRACE          reduce using rule 62 (statement -> iteration_statement .)
    IF              reduce using rule 62 (statement -> iteration_statement .)
    WHILE           reduce using rule 62 (statement -> iteration_statement .)
    FOR             reduce using rule 62 (statement -> iteration_statement .)
    BREAK           reduce using rule 62 (statement -> iteration_statement .)
    RETURN          reduce using rule 62 (statement -> iteration_statement .)
    PLUSPLUS        reduce using rule 62 (statement -> iteration_statement .)
    MINUSMINUS      reduce using rule 62 (statement -> iteration_statement .)
    AND             reduce using rule 62 (statement -> iteration_statement .)
    TIMES           reduce using rule 62 (statement -> iteration_statement .)
    PLUS            reduce using rule 62 (statement -> iteration_statement .)
    MINUS           reduce using rule 62 (statement -> iteration_statement .)
    LNOT            reduce using rule 62 (statement -> iteration_statement .)
    ID              reduce using rule 62 (statement -> iteration_statement .)
    SCONST          reduce using rule 62 (statement -> iteration_statement .)
    LPAREN          reduce using rule 62 (statement -> iteration_statement .)
    ICONST          reduce using rule 62 (statement -> iteration_statement .)
    FCONST          reduce using rule 62 (statement -> iteration_statement .)
    CCONST          reduce using rule 62 (statement -> iteration_statement .)
    SEMI            reduce using rule 62 (statement -> iteration_statement .)
    ELSE            reduce using rule 62 (statement -> iteration_statement .)


state 46

    (63) statement -> jump_statement .

    RBRACE          reduce using rule 63 (statement -> jump_statement .)
    LBRACE          reduce using rule 63 (statement -> jump_statement .)
    IF              reduce using rule 63 (statement -> jump_statement .)
    WHILE           reduce using rule 63 (statement -> jump_statement .)
    FOR             reduce using rule 63 (statement -> jump_statement .)
    BREAK           reduce using rule 63 (statement -> jump_statement .)
    RETURN          reduce using rule 63 (statement -> jump_statement .)
    PLUSPLUS        reduce using rule 63 (statement -> jump_statement .)
    MINUSMINUS      reduce using rule 63 (statement -> jump_statement .)
    AND             reduce using rule 63 (statement -> jump_statement .)
    TIMES           reduce using rule 63 (statement -> jump_statement .)
    PLUS            reduce using rule 63 (statement -> jump_statement .)
    MINUS           reduce using rule 63 (statement -> jump_statement .)
    LNOT            reduce using rule 63 (statement -> jump_statement .)
    ID              reduce using rule 63 (statement -> jump_statement .)
    SCONST          reduce using rule 63 (statement -> jump_statement .)
    LPAREN          reduce using rule 63 (statement -> jump_statement .)
    ICONST          reduce using rule 63 (statement -> jump_statement .)
    FCONST          reduce using rule 63 (statement -> jump_statement .)
    CCONST          reduce using rule 63 (statement -> jump_statement .)
    SEMI            reduce using rule 63 (statement -> jump_statement .)
    ELSE            reduce using rule 63 (statement -> jump_statement .)


state 47

    (64) expression_statement -> expression_opt . SEMI

    SEMI            shift and go to state 113


state 48

    (71) selection_statement -> IF . LPAREN expression RPAREN statement
    (72) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 114


state 49

    (132) primary_expression -> LPAREN . expression RPAREN
    (113) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (46) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (25) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (26) specifier_qualifier_list -> . type_specifier
    (84) conditional_expression -> . logical_or_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (18) type_specifier -> . VOID
    (19) type_specifier -> . INT
    (20) type_specifier -> . TYPEID
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    VOID            shift and go to state 11
    INT             shift and go to state 12
    TYPEID          shift and go to state 13
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    LPAREN          shift and go to state 49
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    expression                     shift and go to state 115
    type_name                      shift and go to state 116
    cast_expression                shift and go to state 64
    assignment_expression          shift and go to state 56
    specifier_qualifier_list       shift and go to state 117
    conditional_expression         shift and go to state 57
    unary_expression               shift and go to state 58
    type_specifier                 shift and go to state 118
    logical_or_expression          shift and go to state 59
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    logical_and_expression         shift and go to state 65
    primary_expression             shift and go to state 66
    inclusive_or_expression        shift and go to state 72
    constant                       shift and go to state 74
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85

state 50

    (78) expression_opt -> expression .
    (80) expression -> expression . COMMA assignment_expression

    SEMI            reduce using rule 78 (expression_opt -> expression .)
    RPAREN          reduce using rule 78 (expression_opt -> expression .)
    COMMA           shift and go to state 119


state 51

    (73) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 120


state 52

    (74) iteration_statement -> FOR . LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement

    LPAREN          shift and go to state 121


state 53

    (75) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 122


state 54

    (76) jump_statement -> RETURN . expression_opt SEMI
    (77) expression_opt -> . empty
    (78) expression_opt -> . expression
    (138) empty -> .
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (84) conditional_expression -> . logical_or_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMI            reduce using rule 138 (empty -> .)
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    LPAREN          shift and go to state 49
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    expression_opt                 shift and go to state 123
    empty                          shift and go to state 55
    expression                     shift and go to state 50
    assignment_expression          shift and go to state 56
    conditional_expression         shift and go to state 57
    unary_expression               shift and go to state 58
    logical_or_expression          shift and go to state 59
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    cast_expression                shift and go to state 64
    logical_and_expression         shift and go to state 65
    primary_expression             shift and go to state 66
    inclusive_or_expression        shift and go to state 72
    constant                       shift and go to state 74
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85

state 55

    (77) expression_opt -> empty .

    SEMI            reduce using rule 77 (expression_opt -> empty .)
    RPAREN          reduce using rule 77 (expression_opt -> empty .)


state 56

    (79) expression -> assignment_expression .

    COMMA           reduce using rule 79 (expression -> assignment_expression .)
    SEMI            reduce using rule 79 (expression -> assignment_expression .)
    RPAREN          reduce using rule 79 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 79 (expression -> assignment_expression .)


state 57

    (81) assignment_expression -> conditional_expression .

    COMMA           reduce using rule 81 (assignment_expression -> conditional_expression .)
    SEMI            reduce using rule 81 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 81 (assignment_expression -> conditional_expression .)
    RBRACE          reduce using rule 81 (assignment_expression -> conditional_expression .)
    RBRACKET        reduce using rule 81 (assignment_expression -> conditional_expression .)


state 58

    (82) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (112) cast_expression -> unary_expression .
    (83) assignment_operator -> . EQUALS

    TIMES           reduce using rule 112 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 112 (cast_expression -> unary_expression .)
    MOD             reduce using rule 112 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 112 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 112 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 112 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 112 (cast_expression -> unary_expression .)
    LT              reduce using rule 112 (cast_expression -> unary_expression .)
    GT              reduce using rule 112 (cast_expression -> unary_expression .)
    LE              reduce using rule 112 (cast_expression -> unary_expression .)
    GE              reduce using rule 112 (cast_expression -> unary_expression .)
    EQ              reduce using rule 112 (cast_expression -> unary_expression .)
    AND             reduce using rule 112 (cast_expression -> unary_expression .)
    OR              reduce using rule 112 (cast_expression -> unary_expression .)
    LAND            reduce using rule 112 (cast_expression -> unary_expression .)
    LOR             reduce using rule 112 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 112 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 112 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 112 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 112 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 112 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 125

    assignment_operator            shift and go to state 124

state 59

    (84) conditional_expression -> logical_or_expression .
    (87) logical_or_expression -> logical_or_expression . LOR logical_and_expression

    COMMA           reduce using rule 84 (conditional_expression -> logical_or_expression .)
    SEMI            reduce using rule 84 (conditional_expression -> logical_or_expression .)
    RBRACKET        reduce using rule 84 (conditional_expression -> logical_or_expression .)
    RPAREN          reduce using rule 84 (conditional_expression -> logical_or_expression .)
    RBRACE          reduce using rule 84 (conditional_expression -> logical_or_expression .)
    LOR             shift and go to state 126


state 60

    (114) unary_expression -> postfix_expression .
    (124) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (125) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> postfix_expression . LPAREN RPAREN
    (127) postfix_expression -> postfix_expression . PLUSPLUS
    (128) postfix_expression -> postfix_expression . MINUSMINUS

    EQUALS          reduce using rule 114 (unary_expression -> postfix_expression .)
    TIMES           reduce using rule 114 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 114 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 114 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 114 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 114 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 114 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 114 (unary_expression -> postfix_expression .)
    LT              reduce using rule 114 (unary_expression -> postfix_expression .)
    GT              reduce using rule 114 (unary_expression -> postfix_expression .)
    LE              reduce using rule 114 (unary_expression -> postfix_expression .)
    GE              reduce using rule 114 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 114 (unary_expression -> postfix_expression .)
    AND             reduce using rule 114 (unary_expression -> postfix_expression .)
    OR              reduce using rule 114 (unary_expression -> postfix_expression .)
    LAND            reduce using rule 114 (unary_expression -> postfix_expression .)
    LOR             reduce using rule 114 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 114 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 114 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 114 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 114 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 114 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 127
    LPAREN          shift and go to state 128
    PLUSPLUS        shift and go to state 129
    MINUSMINUS      shift and go to state 130


state 61

    (115) unary_expression -> PLUSPLUS . unary_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST

    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    LPAREN          shift and go to state 132
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 66
    constant                       shift and go to state 74

state 62

    (116) unary_expression -> MINUSMINUS . unary_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST

    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    LPAREN          shift and go to state 132
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 66
    constant                       shift and go to state 74

state 63

    (117) unary_expression -> unary_operator . cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST

    LPAREN          shift and go to state 92
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    unary_operator                 shift and go to state 63
    cast_expression                shift and go to state 134
    unary_expression               shift and go to state 91
    postfix_expression             shift and go to state 60
    primary_expression             shift and go to state 66
    constant                       shift and go to state 74

state 64

    (108) multiplicative_expression -> cast_expression .

    TIMES           reduce using rule 108 (multiplicative_expression -> cast_expression .)
    DIVIDE          reduce using rule 108 (multiplicative_expression -> cast_expression .)
    MOD             reduce using rule 108 (multiplicative_expression -> cast_expression .)
    PLUS            reduce using rule 108 (multiplicative_expression -> cast_expression .)
    MINUS           reduce using rule 108 (multiplicative_expression -> cast_expression .)
    LSHIFT          reduce using rule 108 (multiplicative_expression -> cast_expression .)
    RSHIFT          reduce using rule 108 (multiplicative_expression -> cast_expression .)
    LT              reduce using rule 108 (multiplicative_expression -> cast_expression .)
    GT              reduce using rule 108 (multiplicative_expression -> cast_expression .)
    LE              reduce using rule 108 (multiplicative_expression -> cast_expression .)
    GE              reduce using rule 108 (multiplicative_expression -> cast_expression .)
    EQ              reduce using rule 108 (multiplicative_expression -> cast_expression .)
    AND             reduce using rule 108 (multiplicative_expression -> cast_expression .)
    OR              reduce using rule 108 (multiplicative_expression -> cast_expression .)
    LAND            reduce using rule 108 (multiplicative_expression -> cast_expression .)
    LOR             reduce using rule 108 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 108 (multiplicative_expression -> cast_expression .)
    SEMI            reduce using rule 108 (multiplicative_expression -> cast_expression .)
    RBRACKET        reduce using rule 108 (multiplicative_expression -> cast_expression .)
    RPAREN          reduce using rule 108 (multiplicative_expression -> cast_expression .)
    RBRACE          reduce using rule 108 (multiplicative_expression -> cast_expression .)


state 65

    (86) logical_or_expression -> logical_and_expression .
    (89) logical_and_expression -> logical_and_expression . LAND inclusive_or_expression

    LOR             reduce using rule 86 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 86 (logical_or_expression -> logical_and_expression .)
    SEMI            reduce using rule 86 (logical_or_expression -> logical_and_expression .)
    RBRACKET        reduce using rule 86 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 86 (logical_or_expression -> logical_and_expression .)
    RBRACE          reduce using rule 86 (logical_or_expression -> logical_and_expression .)
    LAND            shift and go to state 135


state 66

    (123) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 123 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 123 (postfix_expression -> primary_expression .)
    PLUSPLUS        reduce using rule 123 (postfix_expression -> primary_expression .)
    MINUSMINUS      reduce using rule 123 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 123 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 123 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 123 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 123 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 123 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 123 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 123 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 123 (postfix_expression -> primary_expression .)
    LT              reduce using rule 123 (postfix_expression -> primary_expression .)
    GT              reduce using rule 123 (postfix_expression -> primary_expression .)
    LE              reduce using rule 123 (postfix_expression -> primary_expression .)
    GE              reduce using rule 123 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 123 (postfix_expression -> primary_expression .)
    AND             reduce using rule 123 (postfix_expression -> primary_expression .)
    OR              reduce using rule 123 (postfix_expression -> primary_expression .)
    LAND            reduce using rule 123 (postfix_expression -> primary_expression .)
    LOR             reduce using rule 123 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 123 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 123 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 123 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 123 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 123 (postfix_expression -> primary_expression .)


state 67

    (118) unary_operator -> AND .

    LPAREN          reduce using rule 118 (unary_operator -> AND .)
    PLUSPLUS        reduce using rule 118 (unary_operator -> AND .)
    MINUSMINUS      reduce using rule 118 (unary_operator -> AND .)
    AND             reduce using rule 118 (unary_operator -> AND .)
    TIMES           reduce using rule 118 (unary_operator -> AND .)
    PLUS            reduce using rule 118 (unary_operator -> AND .)
    MINUS           reduce using rule 118 (unary_operator -> AND .)
    LNOT            reduce using rule 118 (unary_operator -> AND .)
    ID              reduce using rule 118 (unary_operator -> AND .)
    SCONST          reduce using rule 118 (unary_operator -> AND .)
    ICONST          reduce using rule 118 (unary_operator -> AND .)
    FCONST          reduce using rule 118 (unary_operator -> AND .)
    CCONST          reduce using rule 118 (unary_operator -> AND .)


state 68

    (119) unary_operator -> TIMES .

    LPAREN          reduce using rule 119 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 119 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 119 (unary_operator -> TIMES .)
    AND             reduce using rule 119 (unary_operator -> TIMES .)
    TIMES           reduce using rule 119 (unary_operator -> TIMES .)
    PLUS            reduce using rule 119 (unary_operator -> TIMES .)
    MINUS           reduce using rule 119 (unary_operator -> TIMES .)
    LNOT            reduce using rule 119 (unary_operator -> TIMES .)
    ID              reduce using rule 119 (unary_operator -> TIMES .)
    SCONST          reduce using rule 119 (unary_operator -> TIMES .)
    ICONST          reduce using rule 119 (unary_operator -> TIMES .)
    FCONST          reduce using rule 119 (unary_operator -> TIMES .)
    CCONST          reduce using rule 119 (unary_operator -> TIMES .)


state 69

    (120) unary_operator -> PLUS .

    LPAREN          reduce using rule 120 (unary_operator -> PLUS .)
    PLUSPLUS        reduce using rule 120 (unary_operator -> PLUS .)
    MINUSMINUS      reduce using rule 120 (unary_operator -> PLUS .)
    AND             reduce using rule 120 (unary_operator -> PLUS .)
    TIMES           reduce using rule 120 (unary_operator -> PLUS .)
    PLUS            reduce using rule 120 (unary_operator -> PLUS .)
    MINUS           reduce using rule 120 (unary_operator -> PLUS .)
    LNOT            reduce using rule 120 (unary_operator -> PLUS .)
    ID              reduce using rule 120 (unary_operator -> PLUS .)
    SCONST          reduce using rule 120 (unary_operator -> PLUS .)
    ICONST          reduce using rule 120 (unary_operator -> PLUS .)
    FCONST          reduce using rule 120 (unary_operator -> PLUS .)
    CCONST          reduce using rule 120 (unary_operator -> PLUS .)


state 70

    (121) unary_operator -> MINUS .

    LPAREN          reduce using rule 121 (unary_operator -> MINUS .)
    PLUSPLUS        reduce using rule 121 (unary_operator -> MINUS .)
    MINUSMINUS      reduce using rule 121 (unary_operator -> MINUS .)
    AND             reduce using rule 121 (unary_operator -> MINUS .)
    TIMES           reduce using rule 121 (unary_operator -> MINUS .)
    PLUS            reduce using rule 121 (unary_operator -> MINUS .)
    MINUS           reduce using rule 121 (unary_operator -> MINUS .)
    LNOT            reduce using rule 121 (unary_operator -> MINUS .)
    ID              reduce using rule 121 (unary_operator -> MINUS .)
    SCONST          reduce using rule 121 (unary_operator -> MINUS .)
    ICONST          reduce using rule 121 (unary_operator -> MINUS .)
    FCONST          reduce using rule 121 (unary_operator -> MINUS .)
    CCONST          reduce using rule 121 (unary_operator -> MINUS .)


state 71

    (122) unary_operator -> LNOT .

    LPAREN          reduce using rule 122 (unary_operator -> LNOT .)
    PLUSPLUS        reduce using rule 122 (unary_operator -> LNOT .)
    MINUSMINUS      reduce using rule 122 (unary_operator -> LNOT .)
    AND             reduce using rule 122 (unary_operator -> LNOT .)
    TIMES           reduce using rule 122 (unary_operator -> LNOT .)
    PLUS            reduce using rule 122 (unary_operator -> LNOT .)
    MINUS           reduce using rule 122 (unary_operator -> LNOT .)
    LNOT            reduce using rule 122 (unary_operator -> LNOT .)
    ID              reduce using rule 122 (unary_operator -> LNOT .)
    SCONST          reduce using rule 122 (unary_operator -> LNOT .)
    ICONST          reduce using rule 122 (unary_operator -> LNOT .)
    FCONST          reduce using rule 122 (unary_operator -> LNOT .)
    CCONST          reduce using rule 122 (unary_operator -> LNOT .)


state 72

    (88) logical_and_expression -> inclusive_or_expression .
    (91) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    LAND            reduce using rule 88 (logical_and_expression -> inclusive_or_expression .)
    LOR             reduce using rule 88 (logical_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 88 (logical_and_expression -> inclusive_or_expression .)
    SEMI            reduce using rule 88 (logical_and_expression -> inclusive_or_expression .)
    RBRACKET        reduce using rule 88 (logical_and_expression -> inclusive_or_expression .)
    RPAREN          reduce using rule 88 (logical_and_expression -> inclusive_or_expression .)
    RBRACE          reduce using rule 88 (logical_and_expression -> inclusive_or_expression .)
    OR              shift and go to state 136


state 73

    (129) primary_expression -> ID .

    LBRACKET        reduce using rule 129 (primary_expression -> ID .)
    LPAREN          reduce using rule 129 (primary_expression -> ID .)
    PLUSPLUS        reduce using rule 129 (primary_expression -> ID .)
    MINUSMINUS      reduce using rule 129 (primary_expression -> ID .)
    EQUALS          reduce using rule 129 (primary_expression -> ID .)
    TIMES           reduce using rule 129 (primary_expression -> ID .)
    DIVIDE          reduce using rule 129 (primary_expression -> ID .)
    MOD             reduce using rule 129 (primary_expression -> ID .)
    PLUS            reduce using rule 129 (primary_expression -> ID .)
    MINUS           reduce using rule 129 (primary_expression -> ID .)
    LSHIFT          reduce using rule 129 (primary_expression -> ID .)
    RSHIFT          reduce using rule 129 (primary_expression -> ID .)
    LT              reduce using rule 129 (primary_expression -> ID .)
    GT              reduce using rule 129 (primary_expression -> ID .)
    LE              reduce using rule 129 (primary_expression -> ID .)
    GE              reduce using rule 129 (primary_expression -> ID .)
    EQ              reduce using rule 129 (primary_expression -> ID .)
    AND             reduce using rule 129 (primary_expression -> ID .)
    OR              reduce using rule 129 (primary_expression -> ID .)
    LAND            reduce using rule 129 (primary_expression -> ID .)
    LOR             reduce using rule 129 (primary_expression -> ID .)
    COMMA           reduce using rule 129 (primary_expression -> ID .)
    SEMI            reduce using rule 129 (primary_expression -> ID .)
    RBRACKET        reduce using rule 129 (primary_expression -> ID .)
    RPAREN          reduce using rule 129 (primary_expression -> ID .)
    RBRACE          reduce using rule 129 (primary_expression -> ID .)


state 74

    (130) primary_expression -> constant .

    LBRACKET        reduce using rule 130 (primary_expression -> constant .)
    LPAREN          reduce using rule 130 (primary_expression -> constant .)
    PLUSPLUS        reduce using rule 130 (primary_expression -> constant .)
    MINUSMINUS      reduce using rule 130 (primary_expression -> constant .)
    EQUALS          reduce using rule 130 (primary_expression -> constant .)
    TIMES           reduce using rule 130 (primary_expression -> constant .)
    DIVIDE          reduce using rule 130 (primary_expression -> constant .)
    MOD             reduce using rule 130 (primary_expression -> constant .)
    PLUS            reduce using rule 130 (primary_expression -> constant .)
    MINUS           reduce using rule 130 (primary_expression -> constant .)
    LSHIFT          reduce using rule 130 (primary_expression -> constant .)
    RSHIFT          reduce using rule 130 (primary_expression -> constant .)
    LT              reduce using rule 130 (primary_expression -> constant .)
    GT              reduce using rule 130 (primary_expression -> constant .)
    LE              reduce using rule 130 (primary_expression -> constant .)
    GE              reduce using rule 130 (primary_expression -> constant .)
    EQ              reduce using rule 130 (primary_expression -> constant .)
    AND             reduce using rule 130 (primary_expression -> constant .)
    OR              reduce using rule 130 (primary_expression -> constant .)
    LAND            reduce using rule 130 (primary_expression -> constant .)
    LOR             reduce using rule 130 (primary_expression -> constant .)
    COMMA           reduce using rule 130 (primary_expression -> constant .)
    SEMI            reduce using rule 130 (primary_expression -> constant .)
    RBRACKET        reduce using rule 130 (primary_expression -> constant .)
    RPAREN          reduce using rule 130 (primary_expression -> constant .)
    RBRACE          reduce using rule 130 (primary_expression -> constant .)


state 75

    (131) primary_expression -> SCONST .

    LBRACKET        reduce using rule 131 (primary_expression -> SCONST .)
    LPAREN          reduce using rule 131 (primary_expression -> SCONST .)
    PLUSPLUS        reduce using rule 131 (primary_expression -> SCONST .)
    MINUSMINUS      reduce using rule 131 (primary_expression -> SCONST .)
    EQUALS          reduce using rule 131 (primary_expression -> SCONST .)
    TIMES           reduce using rule 131 (primary_expression -> SCONST .)
    DIVIDE          reduce using rule 131 (primary_expression -> SCONST .)
    MOD             reduce using rule 131 (primary_expression -> SCONST .)
    PLUS            reduce using rule 131 (primary_expression -> SCONST .)
    MINUS           reduce using rule 131 (primary_expression -> SCONST .)
    LSHIFT          reduce using rule 131 (primary_expression -> SCONST .)
    RSHIFT          reduce using rule 131 (primary_expression -> SCONST .)
    LT              reduce using rule 131 (primary_expression -> SCONST .)
    GT              reduce using rule 131 (primary_expression -> SCONST .)
    LE              reduce using rule 131 (primary_expression -> SCONST .)
    GE              reduce using rule 131 (primary_expression -> SCONST .)
    EQ              reduce using rule 131 (primary_expression -> SCONST .)
    AND             reduce using rule 131 (primary_expression -> SCONST .)
    OR              reduce using rule 131 (primary_expression -> SCONST .)
    LAND            reduce using rule 131 (primary_expression -> SCONST .)
    LOR             reduce using rule 131 (primary_expression -> SCONST .)
    COMMA           reduce using rule 131 (primary_expression -> SCONST .)
    SEMI            reduce using rule 131 (primary_expression -> SCONST .)
    RBRACKET        reduce using rule 131 (primary_expression -> SCONST .)
    RPAREN          reduce using rule 131 (primary_expression -> SCONST .)
    RBRACE          reduce using rule 131 (primary_expression -> SCONST .)


state 76

    (90) inclusive_or_expression -> exclusive_or_expression .

    OR              reduce using rule 90 (inclusive_or_expression -> exclusive_or_expression .)
    LAND            reduce using rule 90 (inclusive_or_expression -> exclusive_or_expression .)
    LOR             reduce using rule 90 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 90 (inclusive_or_expression -> exclusive_or_expression .)
    SEMI            reduce using rule 90 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACKET        reduce using rule 90 (inclusive_or_expression -> exclusive_or_expression .)
    RPAREN          reduce using rule 90 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACE          reduce using rule 90 (inclusive_or_expression -> exclusive_or_expression .)


state 77

    (135) constant -> ICONST .

    LBRACKET        reduce using rule 135 (constant -> ICONST .)
    LPAREN          reduce using rule 135 (constant -> ICONST .)
    PLUSPLUS        reduce using rule 135 (constant -> ICONST .)
    MINUSMINUS      reduce using rule 135 (constant -> ICONST .)
    EQUALS          reduce using rule 135 (constant -> ICONST .)
    TIMES           reduce using rule 135 (constant -> ICONST .)
    DIVIDE          reduce using rule 135 (constant -> ICONST .)
    MOD             reduce using rule 135 (constant -> ICONST .)
    PLUS            reduce using rule 135 (constant -> ICONST .)
    MINUS           reduce using rule 135 (constant -> ICONST .)
    LSHIFT          reduce using rule 135 (constant -> ICONST .)
    RSHIFT          reduce using rule 135 (constant -> ICONST .)
    LT              reduce using rule 135 (constant -> ICONST .)
    GT              reduce using rule 135 (constant -> ICONST .)
    LE              reduce using rule 135 (constant -> ICONST .)
    GE              reduce using rule 135 (constant -> ICONST .)
    EQ              reduce using rule 135 (constant -> ICONST .)
    AND             reduce using rule 135 (constant -> ICONST .)
    OR              reduce using rule 135 (constant -> ICONST .)
    LAND            reduce using rule 135 (constant -> ICONST .)
    LOR             reduce using rule 135 (constant -> ICONST .)
    COMMA           reduce using rule 135 (constant -> ICONST .)
    SEMI            reduce using rule 135 (constant -> ICONST .)
    RBRACKET        reduce using rule 135 (constant -> ICONST .)
    RPAREN          reduce using rule 135 (constant -> ICONST .)
    RBRACE          reduce using rule 135 (constant -> ICONST .)


state 78

    (136) constant -> FCONST .

    LBRACKET        reduce using rule 136 (constant -> FCONST .)
    LPAREN          reduce using rule 136 (constant -> FCONST .)
    PLUSPLUS        reduce using rule 136 (constant -> FCONST .)
    MINUSMINUS      reduce using rule 136 (constant -> FCONST .)
    EQUALS          reduce using rule 136 (constant -> FCONST .)
    TIMES           reduce using rule 136 (constant -> FCONST .)
    DIVIDE          reduce using rule 136 (constant -> FCONST .)
    MOD             reduce using rule 136 (constant -> FCONST .)
    PLUS            reduce using rule 136 (constant -> FCONST .)
    MINUS           reduce using rule 136 (constant -> FCONST .)
    LSHIFT          reduce using rule 136 (constant -> FCONST .)
    RSHIFT          reduce using rule 136 (constant -> FCONST .)
    LT              reduce using rule 136 (constant -> FCONST .)
    GT              reduce using rule 136 (constant -> FCONST .)
    LE              reduce using rule 136 (constant -> FCONST .)
    GE              reduce using rule 136 (constant -> FCONST .)
    EQ              reduce using rule 136 (constant -> FCONST .)
    AND             reduce using rule 136 (constant -> FCONST .)
    OR              reduce using rule 136 (constant -> FCONST .)
    LAND            reduce using rule 136 (constant -> FCONST .)
    LOR             reduce using rule 136 (constant -> FCONST .)
    COMMA           reduce using rule 136 (constant -> FCONST .)
    SEMI            reduce using rule 136 (constant -> FCONST .)
    RBRACKET        reduce using rule 136 (constant -> FCONST .)
    RPAREN          reduce using rule 136 (constant -> FCONST .)
    RBRACE          reduce using rule 136 (constant -> FCONST .)


state 79

    (137) constant -> CCONST .

    LBRACKET        reduce using rule 137 (constant -> CCONST .)
    LPAREN          reduce using rule 137 (constant -> CCONST .)
    PLUSPLUS        reduce using rule 137 (constant -> CCONST .)
    MINUSMINUS      reduce using rule 137 (constant -> CCONST .)
    EQUALS          reduce using rule 137 (constant -> CCONST .)
    TIMES           reduce using rule 137 (constant -> CCONST .)
    DIVIDE          reduce using rule 137 (constant -> CCONST .)
    MOD             reduce using rule 137 (constant -> CCONST .)
    PLUS            reduce using rule 137 (constant -> CCONST .)
    MINUS           reduce using rule 137 (constant -> CCONST .)
    LSHIFT          reduce using rule 137 (constant -> CCONST .)
    RSHIFT          reduce using rule 137 (constant -> CCONST .)
    LT              reduce using rule 137 (constant -> CCONST .)
    GT              reduce using rule 137 (constant -> CCONST .)
    LE              reduce using rule 137 (constant -> CCONST .)
    GE              reduce using rule 137 (constant -> CCONST .)
    EQ              reduce using rule 137 (constant -> CCONST .)
    AND             reduce using rule 137 (constant -> CCONST .)
    OR              reduce using rule 137 (constant -> CCONST .)
    LAND            reduce using rule 137 (constant -> CCONST .)
    LOR             reduce using rule 137 (constant -> CCONST .)
    COMMA           reduce using rule 137 (constant -> CCONST .)
    SEMI            reduce using rule 137 (constant -> CCONST .)
    RBRACKET        reduce using rule 137 (constant -> CCONST .)
    RPAREN          reduce using rule 137 (constant -> CCONST .)
    RBRACE          reduce using rule 137 (constant -> CCONST .)


state 80

    (92) exclusive_or_expression -> and_expression .
    (94) and_expression -> and_expression . AND equality_expression

    OR              reduce using rule 92 (exclusive_or_expression -> and_expression .)
    LAND            reduce using rule 92 (exclusive_or_expression -> and_expression .)
    LOR             reduce using rule 92 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 92 (exclusive_or_expression -> and_expression .)
    SEMI            reduce using rule 92 (exclusive_or_expression -> and_expression .)
    RBRACKET        reduce using rule 92 (exclusive_or_expression -> and_expression .)
    RPAREN          reduce using rule 92 (exclusive_or_expression -> and_expression .)
    RBRACE          reduce using rule 92 (exclusive_or_expression -> and_expression .)
    AND             shift and go to state 137


state 81

    (93) and_expression -> equality_expression .
    (96) equality_expression -> equality_expression . EQ relational_expression

    AND             reduce using rule 93 (and_expression -> equality_expression .)
    OR              reduce using rule 93 (and_expression -> equality_expression .)
    LAND            reduce using rule 93 (and_expression -> equality_expression .)
    LOR             reduce using rule 93 (and_expression -> equality_expression .)
    COMMA           reduce using rule 93 (and_expression -> equality_expression .)
    SEMI            reduce using rule 93 (and_expression -> equality_expression .)
    RBRACKET        reduce using rule 93 (and_expression -> equality_expression .)
    RPAREN          reduce using rule 93 (and_expression -> equality_expression .)
    RBRACE          reduce using rule 93 (and_expression -> equality_expression .)
    EQ              shift and go to state 138


state 82

    (95) equality_expression -> relational_expression .
    (98) relational_expression -> relational_expression . LT shift_expression
    (99) relational_expression -> relational_expression . GT shift_expression
    (100) relational_expression -> relational_expression . LE shift_expression
    (101) relational_expression -> relational_expression . GE shift_expression

    EQ              reduce using rule 95 (equality_expression -> relational_expression .)
    AND             reduce using rule 95 (equality_expression -> relational_expression .)
    OR              reduce using rule 95 (equality_expression -> relational_expression .)
    LAND            reduce using rule 95 (equality_expression -> relational_expression .)
    LOR             reduce using rule 95 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 95 (equality_expression -> relational_expression .)
    SEMI            reduce using rule 95 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 95 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 95 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 95 (equality_expression -> relational_expression .)
    LT              shift and go to state 139
    GT              shift and go to state 140
    LE              shift and go to state 141
    GE              shift and go to state 142


state 83

    (97) relational_expression -> shift_expression .
    (103) shift_expression -> shift_expression . LSHIFT additive_expression
    (104) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 97 (relational_expression -> shift_expression .)
    GT              reduce using rule 97 (relational_expression -> shift_expression .)
    LE              reduce using rule 97 (relational_expression -> shift_expression .)
    GE              reduce using rule 97 (relational_expression -> shift_expression .)
    EQ              reduce using rule 97 (relational_expression -> shift_expression .)
    AND             reduce using rule 97 (relational_expression -> shift_expression .)
    OR              reduce using rule 97 (relational_expression -> shift_expression .)
    LAND            reduce using rule 97 (relational_expression -> shift_expression .)
    LOR             reduce using rule 97 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 97 (relational_expression -> shift_expression .)
    SEMI            reduce using rule 97 (relational_expression -> shift_expression .)
    RBRACKET        reduce using rule 97 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 97 (relational_expression -> shift_expression .)
    RBRACE          reduce using rule 97 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 143
    RSHIFT          shift and go to state 144


state 84

    (102) shift_expression -> additive_expression .
    (106) additive_expression -> additive_expression . PLUS multiplicative_expression
    (107) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 102 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 102 (shift_expression -> additive_expression .)
    LT              reduce using rule 102 (shift_expression -> additive_expression .)
    GT              reduce using rule 102 (shift_expression -> additive_expression .)
    LE              reduce using rule 102 (shift_expression -> additive_expression .)
    GE              reduce using rule 102 (shift_expression -> additive_expression .)
    EQ              reduce using rule 102 (shift_expression -> additive_expression .)
    AND             reduce using rule 102 (shift_expression -> additive_expression .)
    OR              reduce using rule 102 (shift_expression -> additive_expression .)
    LAND            reduce using rule 102 (shift_expression -> additive_expression .)
    LOR             reduce using rule 102 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 102 (shift_expression -> additive_expression .)
    SEMI            reduce using rule 102 (shift_expression -> additive_expression .)
    RBRACKET        reduce using rule 102 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 102 (shift_expression -> additive_expression .)
    RBRACE          reduce using rule 102 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146


state 85

    (105) additive_expression -> multiplicative_expression .
    (109) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (110) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (111) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 105 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 105 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 105 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 105 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 105 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 105 (additive_expression -> multiplicative_expression .)
    LE              reduce using rule 105 (additive_expression -> multiplicative_expression .)
    GE              reduce using rule 105 (additive_expression -> multiplicative_expression .)
    EQ              reduce using rule 105 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 105 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 105 (additive_expression -> multiplicative_expression .)
    LAND            reduce using rule 105 (additive_expression -> multiplicative_expression .)
    LOR             reduce using rule 105 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 105 (additive_expression -> multiplicative_expression .)
    SEMI            reduce using rule 105 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 105 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 105 (additive_expression -> multiplicative_expression .)
    RBRACE          reduce using rule 105 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 147
    DIVIDE          shift and go to state 148
    MOD             shift and go to state 149


state 86

    (23) init_declarator -> declarator .
    (24) init_declarator -> declarator . EQUALS initializer

    SEMI            reduce using rule 23 (init_declarator -> declarator .)
    COMMA           reduce using rule 23 (init_declarator -> declarator .)
    EQUALS          shift and go to state 33


state 87

    (30) direct_declarator -> direct_declarator LBRACKET constant_expression_opt . RBRACKET

    RBRACKET        shift and go to state 150


state 88

    (55) constant_expression_opt -> empty .

    RBRACKET        reduce using rule 55 (constant_expression_opt -> empty .)


state 89

    (56) constant_expression_opt -> constant_expression .

    RBRACKET        reduce using rule 56 (constant_expression_opt -> constant_expression .)


state 90

    (85) constant_expression -> conditional_expression .

    RBRACKET        reduce using rule 85 (constant_expression -> conditional_expression .)


state 91

    (112) cast_expression -> unary_expression .

    TIMES           reduce using rule 112 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 112 (cast_expression -> unary_expression .)
    MOD             reduce using rule 112 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 112 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 112 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 112 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 112 (cast_expression -> unary_expression .)
    LT              reduce using rule 112 (cast_expression -> unary_expression .)
    GT              reduce using rule 112 (cast_expression -> unary_expression .)
    LE              reduce using rule 112 (cast_expression -> unary_expression .)
    GE              reduce using rule 112 (cast_expression -> unary_expression .)
    EQ              reduce using rule 112 (cast_expression -> unary_expression .)
    AND             reduce using rule 112 (cast_expression -> unary_expression .)
    OR              reduce using rule 112 (cast_expression -> unary_expression .)
    LAND            reduce using rule 112 (cast_expression -> unary_expression .)
    LOR             reduce using rule 112 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 112 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 112 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 112 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 112 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 112 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 112 (cast_expression -> unary_expression .)


state 92

    (113) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (132) primary_expression -> LPAREN . expression RPAREN
    (46) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (25) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (26) specifier_qualifier_list -> . type_specifier
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (18) type_specifier -> . VOID
    (19) type_specifier -> . INT
    (20) type_specifier -> . TYPEID
    (84) conditional_expression -> . logical_or_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 11
    INT             shift and go to state 12
    TYPEID          shift and go to state 13
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    LPAREN          shift and go to state 49
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    type_name                      shift and go to state 116
    cast_expression                shift and go to state 64
    expression                     shift and go to state 115
    specifier_qualifier_list       shift and go to state 117
    assignment_expression          shift and go to state 56
    type_specifier                 shift and go to state 118
    conditional_expression         shift and go to state 57
    unary_expression               shift and go to state 58
    logical_or_expression          shift and go to state 59
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    logical_and_expression         shift and go to state 65
    primary_expression             shift and go to state 66
    inclusive_or_expression        shift and go to state 72
    constant                       shift and go to state 74
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85

state 93

    (31) direct_declarator -> direct_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 151


state 94

    (33) direct_declarator -> direct_declarator LPAREN RPAREN .

    LBRACKET        reduce using rule 33 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LPAREN          reduce using rule 33 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LBRACE          reduce using rule 33 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    VOID            reduce using rule 33 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    INT             reduce using rule 33 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    TYPEID          reduce using rule 33 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    EQUALS          reduce using rule 33 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SEMI            reduce using rule 33 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COMMA           reduce using rule 33 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 33 (direct_declarator -> direct_declarator LPAREN RPAREN .)


state 95

    (32) direct_declarator -> direct_declarator LPAREN identifier_list . RPAREN
    (40) identifier_list -> identifier_list . COMMA ID

    RPAREN          shift and go to state 152
    COMMA           shift and go to state 153


state 96

    (34) parameter_type_list -> parameter_list .
    (36) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          reduce using rule 34 (parameter_type_list -> parameter_list .)
    COMMA           shift and go to state 154


state 97

    (39) identifier_list -> ID .

    RPAREN          reduce using rule 39 (identifier_list -> ID .)
    COMMA           reduce using rule 39 (identifier_list -> ID .)


state 98

    (35) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 35 (parameter_list -> parameter_declaration .)
    RPAREN          reduce using rule 35 (parameter_list -> parameter_declaration .)


state 99

    (37) parameter_declaration -> declaration_specifiers . declarator
    (38) parameter_declaration -> declaration_specifiers . abstract_declarator_opt
    (27) declarator -> . direct_declarator
    (47) abstract_declarator_opt -> . empty
    (48) abstract_declarator_opt -> . abstract_declarator
    (28) direct_declarator -> . ID
    (29) direct_declarator -> . LPAREN declarator RPAREN
    (30) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (31) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (32) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (33) direct_declarator -> . direct_declarator LPAREN RPAREN
    (138) empty -> .
    (49) abstract_declarator -> . direct_abstract_declarator
    (50) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (51) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression_opt RBRACKET
    (52) direct_abstract_declarator -> . LBRACKET constant_expression_opt RBRACKET
    (53) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (54) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN

    ID              shift and go to state 6
    LPAREN          shift and go to state 159
    COMMA           reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    LBRACKET        shift and go to state 160

    declarator                     shift and go to state 155
    abstract_declarator_opt        shift and go to state 156
    direct_declarator              shift and go to state 10
    empty                          shift and go to state 157
    abstract_declarator            shift and go to state 158
    direct_abstract_declarator     shift and go to state 161

state 100

    (29) direct_declarator -> LPAREN declarator RPAREN .

    LBRACKET        reduce using rule 29 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 29 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACE          reduce using rule 29 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 29 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 29 (direct_declarator -> LPAREN declarator RPAREN .)
    TYPEID          reduce using rule 29 (direct_declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 29 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 29 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 29 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 29 (direct_declarator -> LPAREN declarator RPAREN .)


state 101

    (5) external_declaration -> INCLUDE LT ID include_endings .

    INCLUDE         reduce using rule 5 (external_declaration -> INCLUDE LT ID include_endings .)
    VOID            reduce using rule 5 (external_declaration -> INCLUDE LT ID include_endings .)
    INT             reduce using rule 5 (external_declaration -> INCLUDE LT ID include_endings .)
    TYPEID          reduce using rule 5 (external_declaration -> INCLUDE LT ID include_endings .)
    ID              reduce using rule 5 (external_declaration -> INCLUDE LT ID include_endings .)
    LPAREN          reduce using rule 5 (external_declaration -> INCLUDE LT ID include_endings .)
    $end            reduce using rule 5 (external_declaration -> INCLUDE LT ID include_endings .)


state 102

    (6) include_endings -> DOT . GT

    GT              shift and go to state 162


state 103

    (7) include_endings -> GT .

    INCLUDE         reduce using rule 7 (include_endings -> GT .)
    VOID            reduce using rule 7 (include_endings -> GT .)
    INT             reduce using rule 7 (include_endings -> GT .)
    TYPEID          reduce using rule 7 (include_endings -> GT .)
    ID              reduce using rule 7 (include_endings -> GT .)
    LPAREN          reduce using rule 7 (include_endings -> GT .)
    $end            reduce using rule 7 (include_endings -> GT .)


state 104

    (8) function_definition -> declaration_specifiers declarator declaration_list compound_statement .

    INCLUDE         reduce using rule 8 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOID            reduce using rule 8 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INT             reduce using rule 8 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    TYPEID          reduce using rule 8 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ID              reduce using rule 8 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LPAREN          reduce using rule 8 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    $end            reduce using rule 8 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)


state 105

    (24) init_declarator -> declarator EQUALS initializer .

    SEMI            reduce using rule 24 (init_declarator -> declarator EQUALS initializer .)
    COMMA           reduce using rule 24 (init_declarator -> declarator EQUALS initializer .)


state 106

    (41) initializer -> assignment_expression .

    SEMI            reduce using rule 41 (initializer -> assignment_expression .)
    COMMA           reduce using rule 41 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 41 (initializer -> assignment_expression .)


state 107

    (42) initializer -> LBRACE . initializer_list RBRACE
    (43) initializer -> LBRACE . initializer_list COMMA RBRACE
    (44) initializer_list -> . initializer
    (45) initializer_list -> . initializer_list COMMA initializer
    (41) initializer -> . assignment_expression
    (42) initializer -> . LBRACE initializer_list RBRACE
    (43) initializer -> . LBRACE initializer_list COMMA RBRACE
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (84) conditional_expression -> . logical_or_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 107
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    LPAREN          shift and go to state 49
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    initializer_list               shift and go to state 163
    initializer                    shift and go to state 164
    assignment_expression          shift and go to state 106
    conditional_expression         shift and go to state 57
    unary_expression               shift and go to state 58
    logical_or_expression          shift and go to state 59
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    cast_expression                shift and go to state 64
    logical_and_expression         shift and go to state 65
    primary_expression             shift and go to state 66
    inclusive_or_expression        shift and go to state 72
    constant                       shift and go to state 74
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85

state 108

    (22) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMI            reduce using rule 22 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 22 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 109

    (65) compound_statement -> LBRACE declaration_list statement_list . RBRACE
    (70) statement_list -> statement_list . statement
    (59) statement -> . expression_statement
    (60) statement -> . compound_statement
    (61) statement -> . selection_statement
    (62) statement -> . iteration_statement
    (63) statement -> . jump_statement
    (64) expression_statement -> . expression_opt SEMI
    (65) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (66) compound_statement -> . LBRACE statement_list RBRACE
    (67) compound_statement -> . LBRACE declaration_list RBRACE
    (68) compound_statement -> . LBRACE RBRACE
    (71) selection_statement -> . IF LPAREN expression RPAREN statement
    (72) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (73) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (75) jump_statement -> . BREAK SEMI
    (76) jump_statement -> . RETURN expression_opt SEMI
    (77) expression_opt -> . empty
    (78) expression_opt -> . expression
    (138) empty -> .
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (84) conditional_expression -> . logical_or_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 165
    LBRACE          shift and go to state 24
    IF              shift and go to state 48
    WHILE           shift and go to state 51
    FOR             shift and go to state 52
    BREAK           shift and go to state 53
    RETURN          shift and go to state 54
    SEMI            reduce using rule 138 (empty -> .)
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    LPAREN          shift and go to state 49
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    statement                      shift and go to state 112
    expression_statement           shift and go to state 42
    compound_statement             shift and go to state 43
    selection_statement            shift and go to state 44
    iteration_statement            shift and go to state 45
    jump_statement                 shift and go to state 46
    expression_opt                 shift and go to state 47
    expression                     shift and go to state 50
    empty                          shift and go to state 55
    assignment_expression          shift and go to state 56
    conditional_expression         shift and go to state 57
    unary_expression               shift and go to state 58
    logical_or_expression          shift and go to state 59
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    cast_expression                shift and go to state 64
    logical_and_expression         shift and go to state 65
    primary_expression             shift and go to state 66
    inclusive_or_expression        shift and go to state 72
    constant                       shift and go to state 74
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85

state 110

    (67) compound_statement -> LBRACE declaration_list RBRACE .

    INCLUDE         reduce using rule 67 (compound_statement -> LBRACE declaration_list RBRACE .)
    VOID            reduce using rule 67 (compound_statement -> LBRACE declaration_list RBRACE .)
    INT             reduce using rule 67 (compound_statement -> LBRACE declaration_list RBRACE .)
    TYPEID          reduce using rule 67 (compound_statement -> LBRACE declaration_list RBRACE .)
    ID              reduce using rule 67 (compound_statement -> LBRACE declaration_list RBRACE .)
    LPAREN          reduce using rule 67 (compound_statement -> LBRACE declaration_list RBRACE .)
    $end            reduce using rule 67 (compound_statement -> LBRACE declaration_list RBRACE .)
    RBRACE          reduce using rule 67 (compound_statement -> LBRACE declaration_list RBRACE .)
    LBRACE          reduce using rule 67 (compound_statement -> LBRACE declaration_list RBRACE .)
    IF              reduce using rule 67 (compound_statement -> LBRACE declaration_list RBRACE .)
    WHILE           reduce using rule 67 (compound_statement -> LBRACE declaration_list RBRACE .)
    FOR             reduce using rule 67 (compound_statement -> LBRACE declaration_list RBRACE .)
    BREAK           reduce using rule 67 (compound_statement -> LBRACE declaration_list RBRACE .)
    RETURN          reduce using rule 67 (compound_statement -> LBRACE declaration_list RBRACE .)
    PLUSPLUS        reduce using rule 67 (compound_statement -> LBRACE declaration_list RBRACE .)
    MINUSMINUS      reduce using rule 67 (compound_statement -> LBRACE declaration_list RBRACE .)
    AND             reduce using rule 67 (compound_statement -> LBRACE declaration_list RBRACE .)
    TIMES           reduce using rule 67 (compound_statement -> LBRACE declaration_list RBRACE .)
    PLUS            reduce using rule 67 (compound_statement -> LBRACE declaration_list RBRACE .)
    MINUS           reduce using rule 67 (compound_statement -> LBRACE declaration_list RBRACE .)
    LNOT            reduce using rule 67 (compound_statement -> LBRACE declaration_list RBRACE .)
    SCONST          reduce using rule 67 (compound_statement -> LBRACE declaration_list RBRACE .)
    ICONST          reduce using rule 67 (compound_statement -> LBRACE declaration_list RBRACE .)
    FCONST          reduce using rule 67 (compound_statement -> LBRACE declaration_list RBRACE .)
    CCONST          reduce using rule 67 (compound_statement -> LBRACE declaration_list RBRACE .)
    SEMI            reduce using rule 67 (compound_statement -> LBRACE declaration_list RBRACE .)
    ELSE            reduce using rule 67 (compound_statement -> LBRACE declaration_list RBRACE .)


state 111

    (66) compound_statement -> LBRACE statement_list RBRACE .

    INCLUDE         reduce using rule 66 (compound_statement -> LBRACE statement_list RBRACE .)
    VOID            reduce using rule 66 (compound_statement -> LBRACE statement_list RBRACE .)
    INT             reduce using rule 66 (compound_statement -> LBRACE statement_list RBRACE .)
    TYPEID          reduce using rule 66 (compound_statement -> LBRACE statement_list RBRACE .)
    ID              reduce using rule 66 (compound_statement -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 66 (compound_statement -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 66 (compound_statement -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 66 (compound_statement -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 66 (compound_statement -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 66 (compound_statement -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 66 (compound_statement -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 66 (compound_statement -> LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 66 (compound_statement -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 66 (compound_statement -> LBRACE statement_list RBRACE .)
    PLUSPLUS        reduce using rule 66 (compound_statement -> LBRACE statement_list RBRACE .)
    MINUSMINUS      reduce using rule 66 (compound_statement -> LBRACE statement_list RBRACE .)
    AND             reduce using rule 66 (compound_statement -> LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 66 (compound_statement -> LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 66 (compound_statement -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 66 (compound_statement -> LBRACE statement_list RBRACE .)
    LNOT            reduce using rule 66 (compound_statement -> LBRACE statement_list RBRACE .)
    SCONST          reduce using rule 66 (compound_statement -> LBRACE statement_list RBRACE .)
    ICONST          reduce using rule 66 (compound_statement -> LBRACE statement_list RBRACE .)
    FCONST          reduce using rule 66 (compound_statement -> LBRACE statement_list RBRACE .)
    CCONST          reduce using rule 66 (compound_statement -> LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 66 (compound_statement -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 66 (compound_statement -> LBRACE statement_list RBRACE .)


state 112

    (70) statement_list -> statement_list statement .

    RBRACE          reduce using rule 70 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 70 (statement_list -> statement_list statement .)
    IF              reduce using rule 70 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 70 (statement_list -> statement_list statement .)
    FOR             reduce using rule 70 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 70 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 70 (statement_list -> statement_list statement .)
    PLUSPLUS        reduce using rule 70 (statement_list -> statement_list statement .)
    MINUSMINUS      reduce using rule 70 (statement_list -> statement_list statement .)
    AND             reduce using rule 70 (statement_list -> statement_list statement .)
    TIMES           reduce using rule 70 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 70 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 70 (statement_list -> statement_list statement .)
    LNOT            reduce using rule 70 (statement_list -> statement_list statement .)
    ID              reduce using rule 70 (statement_list -> statement_list statement .)
    SCONST          reduce using rule 70 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 70 (statement_list -> statement_list statement .)
    ICONST          reduce using rule 70 (statement_list -> statement_list statement .)
    FCONST          reduce using rule 70 (statement_list -> statement_list statement .)
    CCONST          reduce using rule 70 (statement_list -> statement_list statement .)
    SEMI            reduce using rule 70 (statement_list -> statement_list statement .)


state 113

    (64) expression_statement -> expression_opt SEMI .

    RBRACE          reduce using rule 64 (expression_statement -> expression_opt SEMI .)
    LBRACE          reduce using rule 64 (expression_statement -> expression_opt SEMI .)
    IF              reduce using rule 64 (expression_statement -> expression_opt SEMI .)
    WHILE           reduce using rule 64 (expression_statement -> expression_opt SEMI .)
    FOR             reduce using rule 64 (expression_statement -> expression_opt SEMI .)
    BREAK           reduce using rule 64 (expression_statement -> expression_opt SEMI .)
    RETURN          reduce using rule 64 (expression_statement -> expression_opt SEMI .)
    PLUSPLUS        reduce using rule 64 (expression_statement -> expression_opt SEMI .)
    MINUSMINUS      reduce using rule 64 (expression_statement -> expression_opt SEMI .)
    AND             reduce using rule 64 (expression_statement -> expression_opt SEMI .)
    TIMES           reduce using rule 64 (expression_statement -> expression_opt SEMI .)
    PLUS            reduce using rule 64 (expression_statement -> expression_opt SEMI .)
    MINUS           reduce using rule 64 (expression_statement -> expression_opt SEMI .)
    LNOT            reduce using rule 64 (expression_statement -> expression_opt SEMI .)
    ID              reduce using rule 64 (expression_statement -> expression_opt SEMI .)
    SCONST          reduce using rule 64 (expression_statement -> expression_opt SEMI .)
    LPAREN          reduce using rule 64 (expression_statement -> expression_opt SEMI .)
    ICONST          reduce using rule 64 (expression_statement -> expression_opt SEMI .)
    FCONST          reduce using rule 64 (expression_statement -> expression_opt SEMI .)
    CCONST          reduce using rule 64 (expression_statement -> expression_opt SEMI .)
    SEMI            reduce using rule 64 (expression_statement -> expression_opt SEMI .)
    ELSE            reduce using rule 64 (expression_statement -> expression_opt SEMI .)


state 114

    (71) selection_statement -> IF LPAREN . expression RPAREN statement
    (72) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (84) conditional_expression -> . logical_or_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    LPAREN          shift and go to state 49
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    expression                     shift and go to state 166
    assignment_expression          shift and go to state 56
    conditional_expression         shift and go to state 57
    unary_expression               shift and go to state 58
    logical_or_expression          shift and go to state 59
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    cast_expression                shift and go to state 64
    logical_and_expression         shift and go to state 65
    primary_expression             shift and go to state 66
    inclusive_or_expression        shift and go to state 72
    constant                       shift and go to state 74
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85

state 115

    (132) primary_expression -> LPAREN expression . RPAREN
    (80) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 167
    COMMA           shift and go to state 119


state 116

    (113) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 168


state 117

    (46) type_name -> specifier_qualifier_list . abstract_declarator_opt
    (47) abstract_declarator_opt -> . empty
    (48) abstract_declarator_opt -> . abstract_declarator
    (138) empty -> .
    (49) abstract_declarator -> . direct_abstract_declarator
    (50) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (51) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression_opt RBRACKET
    (52) direct_abstract_declarator -> . LBRACKET constant_expression_opt RBRACKET
    (53) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (54) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN

    RPAREN          reduce using rule 138 (empty -> .)
    LPAREN          shift and go to state 170
    LBRACKET        shift and go to state 160

    abstract_declarator_opt        shift and go to state 169
    empty                          shift and go to state 157
    abstract_declarator            shift and go to state 158
    direct_abstract_declarator     shift and go to state 161

state 118

    (25) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (26) specifier_qualifier_list -> type_specifier .
    (25) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (26) specifier_qualifier_list -> . type_specifier
    (18) type_specifier -> . VOID
    (19) type_specifier -> . INT
    (20) type_specifier -> . TYPEID

    LPAREN          reduce using rule 26 (specifier_qualifier_list -> type_specifier .)
    LBRACKET        reduce using rule 26 (specifier_qualifier_list -> type_specifier .)
    RPAREN          reduce using rule 26 (specifier_qualifier_list -> type_specifier .)
    VOID            shift and go to state 11
    INT             shift and go to state 12
    TYPEID          shift and go to state 13

    type_specifier                 shift and go to state 118
    specifier_qualifier_list       shift and go to state 171

state 119

    (80) expression -> expression COMMA . assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (84) conditional_expression -> . logical_or_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    LPAREN          shift and go to state 49
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    assignment_expression          shift and go to state 172
    conditional_expression         shift and go to state 57
    unary_expression               shift and go to state 58
    logical_or_expression          shift and go to state 59
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    cast_expression                shift and go to state 64
    logical_and_expression         shift and go to state 65
    primary_expression             shift and go to state 66
    inclusive_or_expression        shift and go to state 72
    constant                       shift and go to state 74
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85

state 120

    (73) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (84) conditional_expression -> . logical_or_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    LPAREN          shift and go to state 49
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    expression                     shift and go to state 173
    assignment_expression          shift and go to state 56
    conditional_expression         shift and go to state 57
    unary_expression               shift and go to state 58
    logical_or_expression          shift and go to state 59
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    cast_expression                shift and go to state 64
    logical_and_expression         shift and go to state 65
    primary_expression             shift and go to state 66
    inclusive_or_expression        shift and go to state 72
    constant                       shift and go to state 74
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85

state 121

    (74) iteration_statement -> FOR LPAREN . expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (77) expression_opt -> . empty
    (78) expression_opt -> . expression
    (138) empty -> .
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (84) conditional_expression -> . logical_or_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMI            reduce using rule 138 (empty -> .)
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    LPAREN          shift and go to state 49
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    expression_opt                 shift and go to state 174
    empty                          shift and go to state 55
    expression                     shift and go to state 50
    assignment_expression          shift and go to state 56
    conditional_expression         shift and go to state 57
    unary_expression               shift and go to state 58
    logical_or_expression          shift and go to state 59
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    cast_expression                shift and go to state 64
    logical_and_expression         shift and go to state 65
    primary_expression             shift and go to state 66
    inclusive_or_expression        shift and go to state 72
    constant                       shift and go to state 74
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85

state 122

    (75) jump_statement -> BREAK SEMI .

    RBRACE          reduce using rule 75 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 75 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 75 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 75 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 75 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 75 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 75 (jump_statement -> BREAK SEMI .)
    PLUSPLUS        reduce using rule 75 (jump_statement -> BREAK SEMI .)
    MINUSMINUS      reduce using rule 75 (jump_statement -> BREAK SEMI .)
    AND             reduce using rule 75 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 75 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 75 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 75 (jump_statement -> BREAK SEMI .)
    LNOT            reduce using rule 75 (jump_statement -> BREAK SEMI .)
    ID              reduce using rule 75 (jump_statement -> BREAK SEMI .)
    SCONST          reduce using rule 75 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 75 (jump_statement -> BREAK SEMI .)
    ICONST          reduce using rule 75 (jump_statement -> BREAK SEMI .)
    FCONST          reduce using rule 75 (jump_statement -> BREAK SEMI .)
    CCONST          reduce using rule 75 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 75 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 75 (jump_statement -> BREAK SEMI .)


state 123

    (76) jump_statement -> RETURN expression_opt . SEMI

    SEMI            shift and go to state 175


state 124

    (82) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (84) conditional_expression -> . logical_or_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    LPAREN          shift and go to state 49
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    unary_expression               shift and go to state 58
    assignment_expression          shift and go to state 176
    conditional_expression         shift and go to state 57
    logical_or_expression          shift and go to state 59
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    cast_expression                shift and go to state 64
    logical_and_expression         shift and go to state 65
    primary_expression             shift and go to state 66
    inclusive_or_expression        shift and go to state 72
    constant                       shift and go to state 74
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85

state 125

    (83) assignment_operator -> EQUALS .

    PLUSPLUS        reduce using rule 83 (assignment_operator -> EQUALS .)
    MINUSMINUS      reduce using rule 83 (assignment_operator -> EQUALS .)
    AND             reduce using rule 83 (assignment_operator -> EQUALS .)
    TIMES           reduce using rule 83 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 83 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 83 (assignment_operator -> EQUALS .)
    LNOT            reduce using rule 83 (assignment_operator -> EQUALS .)
    ID              reduce using rule 83 (assignment_operator -> EQUALS .)
    SCONST          reduce using rule 83 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 83 (assignment_operator -> EQUALS .)
    ICONST          reduce using rule 83 (assignment_operator -> EQUALS .)
    FCONST          reduce using rule 83 (assignment_operator -> EQUALS .)
    CCONST          reduce using rule 83 (assignment_operator -> EQUALS .)


state 126

    (87) logical_or_expression -> logical_or_expression LOR . logical_and_expression
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST

    LPAREN          shift and go to state 92
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    logical_and_expression         shift and go to state 177
    inclusive_or_expression        shift and go to state 72
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85
    cast_expression                shift and go to state 64
    unary_expression               shift and go to state 91
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 66
    constant                       shift and go to state 74

state 127

    (124) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (84) conditional_expression -> . logical_or_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    LPAREN          shift and go to state 49
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    postfix_expression             shift and go to state 60
    expression                     shift and go to state 178
    assignment_expression          shift and go to state 56
    conditional_expression         shift and go to state 57
    unary_expression               shift and go to state 58
    logical_or_expression          shift and go to state 59
    unary_operator                 shift and go to state 63
    cast_expression                shift and go to state 64
    logical_and_expression         shift and go to state 65
    primary_expression             shift and go to state 66
    inclusive_or_expression        shift and go to state 72
    constant                       shift and go to state 74
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85

state 128

    (125) postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN
    (126) postfix_expression -> postfix_expression LPAREN . RPAREN
    (133) argument_expression_list -> . assignment_expression
    (134) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (84) conditional_expression -> . logical_or_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 180
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    LPAREN          shift and go to state 49
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    postfix_expression             shift and go to state 60
    argument_expression_list       shift and go to state 179
    assignment_expression          shift and go to state 181
    conditional_expression         shift and go to state 57
    unary_expression               shift and go to state 58
    logical_or_expression          shift and go to state 59
    unary_operator                 shift and go to state 63
    cast_expression                shift and go to state 64
    logical_and_expression         shift and go to state 65
    primary_expression             shift and go to state 66
    inclusive_or_expression        shift and go to state 72
    constant                       shift and go to state 74
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85

state 129

    (127) postfix_expression -> postfix_expression PLUSPLUS .

    LBRACKET        reduce using rule 127 (postfix_expression -> postfix_expression PLUSPLUS .)
    LPAREN          reduce using rule 127 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSPLUS        reduce using rule 127 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 127 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQUALS          reduce using rule 127 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMES           reduce using rule 127 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVIDE          reduce using rule 127 (postfix_expression -> postfix_expression PLUSPLUS .)
    MOD             reduce using rule 127 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUS            reduce using rule 127 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUS           reduce using rule 127 (postfix_expression -> postfix_expression PLUSPLUS .)
    LSHIFT          reduce using rule 127 (postfix_expression -> postfix_expression PLUSPLUS .)
    RSHIFT          reduce using rule 127 (postfix_expression -> postfix_expression PLUSPLUS .)
    LT              reduce using rule 127 (postfix_expression -> postfix_expression PLUSPLUS .)
    GT              reduce using rule 127 (postfix_expression -> postfix_expression PLUSPLUS .)
    LE              reduce using rule 127 (postfix_expression -> postfix_expression PLUSPLUS .)
    GE              reduce using rule 127 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQ              reduce using rule 127 (postfix_expression -> postfix_expression PLUSPLUS .)
    AND             reduce using rule 127 (postfix_expression -> postfix_expression PLUSPLUS .)
    OR              reduce using rule 127 (postfix_expression -> postfix_expression PLUSPLUS .)
    LAND            reduce using rule 127 (postfix_expression -> postfix_expression PLUSPLUS .)
    LOR             reduce using rule 127 (postfix_expression -> postfix_expression PLUSPLUS .)
    COMMA           reduce using rule 127 (postfix_expression -> postfix_expression PLUSPLUS .)
    SEMI            reduce using rule 127 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACKET        reduce using rule 127 (postfix_expression -> postfix_expression PLUSPLUS .)
    RPAREN          reduce using rule 127 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACE          reduce using rule 127 (postfix_expression -> postfix_expression PLUSPLUS .)


state 130

    (128) postfix_expression -> postfix_expression MINUSMINUS .

    LBRACKET        reduce using rule 128 (postfix_expression -> postfix_expression MINUSMINUS .)
    LPAREN          reduce using rule 128 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSPLUS        reduce using rule 128 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 128 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQUALS          reduce using rule 128 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMES           reduce using rule 128 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVIDE          reduce using rule 128 (postfix_expression -> postfix_expression MINUSMINUS .)
    MOD             reduce using rule 128 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUS            reduce using rule 128 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUS           reduce using rule 128 (postfix_expression -> postfix_expression MINUSMINUS .)
    LSHIFT          reduce using rule 128 (postfix_expression -> postfix_expression MINUSMINUS .)
    RSHIFT          reduce using rule 128 (postfix_expression -> postfix_expression MINUSMINUS .)
    LT              reduce using rule 128 (postfix_expression -> postfix_expression MINUSMINUS .)
    GT              reduce using rule 128 (postfix_expression -> postfix_expression MINUSMINUS .)
    LE              reduce using rule 128 (postfix_expression -> postfix_expression MINUSMINUS .)
    GE              reduce using rule 128 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQ              reduce using rule 128 (postfix_expression -> postfix_expression MINUSMINUS .)
    AND             reduce using rule 128 (postfix_expression -> postfix_expression MINUSMINUS .)
    OR              reduce using rule 128 (postfix_expression -> postfix_expression MINUSMINUS .)
    LAND            reduce using rule 128 (postfix_expression -> postfix_expression MINUSMINUS .)
    LOR             reduce using rule 128 (postfix_expression -> postfix_expression MINUSMINUS .)
    COMMA           reduce using rule 128 (postfix_expression -> postfix_expression MINUSMINUS .)
    SEMI            reduce using rule 128 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACKET        reduce using rule 128 (postfix_expression -> postfix_expression MINUSMINUS .)
    RPAREN          reduce using rule 128 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACE          reduce using rule 128 (postfix_expression -> postfix_expression MINUSMINUS .)


state 131

    (115) unary_expression -> PLUSPLUS unary_expression .

    EQUALS          reduce using rule 115 (unary_expression -> PLUSPLUS unary_expression .)
    TIMES           reduce using rule 115 (unary_expression -> PLUSPLUS unary_expression .)
    DIVIDE          reduce using rule 115 (unary_expression -> PLUSPLUS unary_expression .)
    MOD             reduce using rule 115 (unary_expression -> PLUSPLUS unary_expression .)
    PLUS            reduce using rule 115 (unary_expression -> PLUSPLUS unary_expression .)
    MINUS           reduce using rule 115 (unary_expression -> PLUSPLUS unary_expression .)
    LSHIFT          reduce using rule 115 (unary_expression -> PLUSPLUS unary_expression .)
    RSHIFT          reduce using rule 115 (unary_expression -> PLUSPLUS unary_expression .)
    LT              reduce using rule 115 (unary_expression -> PLUSPLUS unary_expression .)
    GT              reduce using rule 115 (unary_expression -> PLUSPLUS unary_expression .)
    LE              reduce using rule 115 (unary_expression -> PLUSPLUS unary_expression .)
    GE              reduce using rule 115 (unary_expression -> PLUSPLUS unary_expression .)
    EQ              reduce using rule 115 (unary_expression -> PLUSPLUS unary_expression .)
    AND             reduce using rule 115 (unary_expression -> PLUSPLUS unary_expression .)
    OR              reduce using rule 115 (unary_expression -> PLUSPLUS unary_expression .)
    LAND            reduce using rule 115 (unary_expression -> PLUSPLUS unary_expression .)
    LOR             reduce using rule 115 (unary_expression -> PLUSPLUS unary_expression .)
    COMMA           reduce using rule 115 (unary_expression -> PLUSPLUS unary_expression .)
    SEMI            reduce using rule 115 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACKET        reduce using rule 115 (unary_expression -> PLUSPLUS unary_expression .)
    RPAREN          reduce using rule 115 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACE          reduce using rule 115 (unary_expression -> PLUSPLUS unary_expression .)


state 132

    (132) primary_expression -> LPAREN . expression RPAREN
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (84) conditional_expression -> . logical_or_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    LPAREN          shift and go to state 49
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    expression                     shift and go to state 115
    assignment_expression          shift and go to state 56
    conditional_expression         shift and go to state 57
    unary_expression               shift and go to state 58
    logical_or_expression          shift and go to state 59
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    cast_expression                shift and go to state 64
    logical_and_expression         shift and go to state 65
    primary_expression             shift and go to state 66
    inclusive_or_expression        shift and go to state 72
    constant                       shift and go to state 74
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85

state 133

    (116) unary_expression -> MINUSMINUS unary_expression .

    EQUALS          reduce using rule 116 (unary_expression -> MINUSMINUS unary_expression .)
    TIMES           reduce using rule 116 (unary_expression -> MINUSMINUS unary_expression .)
    DIVIDE          reduce using rule 116 (unary_expression -> MINUSMINUS unary_expression .)
    MOD             reduce using rule 116 (unary_expression -> MINUSMINUS unary_expression .)
    PLUS            reduce using rule 116 (unary_expression -> MINUSMINUS unary_expression .)
    MINUS           reduce using rule 116 (unary_expression -> MINUSMINUS unary_expression .)
    LSHIFT          reduce using rule 116 (unary_expression -> MINUSMINUS unary_expression .)
    RSHIFT          reduce using rule 116 (unary_expression -> MINUSMINUS unary_expression .)
    LT              reduce using rule 116 (unary_expression -> MINUSMINUS unary_expression .)
    GT              reduce using rule 116 (unary_expression -> MINUSMINUS unary_expression .)
    LE              reduce using rule 116 (unary_expression -> MINUSMINUS unary_expression .)
    GE              reduce using rule 116 (unary_expression -> MINUSMINUS unary_expression .)
    EQ              reduce using rule 116 (unary_expression -> MINUSMINUS unary_expression .)
    AND             reduce using rule 116 (unary_expression -> MINUSMINUS unary_expression .)
    OR              reduce using rule 116 (unary_expression -> MINUSMINUS unary_expression .)
    LAND            reduce using rule 116 (unary_expression -> MINUSMINUS unary_expression .)
    LOR             reduce using rule 116 (unary_expression -> MINUSMINUS unary_expression .)
    COMMA           reduce using rule 116 (unary_expression -> MINUSMINUS unary_expression .)
    SEMI            reduce using rule 116 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACKET        reduce using rule 116 (unary_expression -> MINUSMINUS unary_expression .)
    RPAREN          reduce using rule 116 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACE          reduce using rule 116 (unary_expression -> MINUSMINUS unary_expression .)


state 134

    (117) unary_expression -> unary_operator cast_expression .

    EQUALS          reduce using rule 117 (unary_expression -> unary_operator cast_expression .)
    TIMES           reduce using rule 117 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 117 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 117 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 117 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 117 (unary_expression -> unary_operator cast_expression .)
    LSHIFT          reduce using rule 117 (unary_expression -> unary_operator cast_expression .)
    RSHIFT          reduce using rule 117 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 117 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 117 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 117 (unary_expression -> unary_operator cast_expression .)
    GE              reduce using rule 117 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 117 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 117 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 117 (unary_expression -> unary_operator cast_expression .)
    LAND            reduce using rule 117 (unary_expression -> unary_operator cast_expression .)
    LOR             reduce using rule 117 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 117 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 117 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 117 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 117 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 117 (unary_expression -> unary_operator cast_expression .)


state 135

    (89) logical_and_expression -> logical_and_expression LAND . inclusive_or_expression
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST

    LPAREN          shift and go to state 92
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    inclusive_or_expression        shift and go to state 182
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85
    cast_expression                shift and go to state 64
    unary_expression               shift and go to state 91
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 66
    constant                       shift and go to state 74

state 136

    (91) inclusive_or_expression -> inclusive_or_expression OR . exclusive_or_expression
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST

    LPAREN          shift and go to state 92
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    exclusive_or_expression        shift and go to state 183
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85
    cast_expression                shift and go to state 64
    unary_expression               shift and go to state 91
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 66
    constant                       shift and go to state 74

state 137

    (94) and_expression -> and_expression AND . equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST

    LPAREN          shift and go to state 92
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    equality_expression            shift and go to state 184
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85
    cast_expression                shift and go to state 64
    unary_expression               shift and go to state 91
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 66
    constant                       shift and go to state 74

state 138

    (96) equality_expression -> equality_expression EQ . relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST

    LPAREN          shift and go to state 92
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    relational_expression          shift and go to state 185
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85
    cast_expression                shift and go to state 64
    unary_expression               shift and go to state 91
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 66
    constant                       shift and go to state 74

state 139

    (98) relational_expression -> relational_expression LT . shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST

    LPAREN          shift and go to state 92
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    shift_expression               shift and go to state 186
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85
    cast_expression                shift and go to state 64
    unary_expression               shift and go to state 91
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 66
    constant                       shift and go to state 74

state 140

    (99) relational_expression -> relational_expression GT . shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST

    LPAREN          shift and go to state 92
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    shift_expression               shift and go to state 187
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85
    cast_expression                shift and go to state 64
    unary_expression               shift and go to state 91
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 66
    constant                       shift and go to state 74

state 141

    (100) relational_expression -> relational_expression LE . shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST

    LPAREN          shift and go to state 92
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    shift_expression               shift and go to state 188
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85
    cast_expression                shift and go to state 64
    unary_expression               shift and go to state 91
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 66
    constant                       shift and go to state 74

state 142

    (101) relational_expression -> relational_expression GE . shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST

    LPAREN          shift and go to state 92
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    shift_expression               shift and go to state 189
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85
    cast_expression                shift and go to state 64
    unary_expression               shift and go to state 91
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 66
    constant                       shift and go to state 74

state 143

    (103) shift_expression -> shift_expression LSHIFT . additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST

    LPAREN          shift and go to state 92
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    additive_expression            shift and go to state 190
    multiplicative_expression      shift and go to state 85
    cast_expression                shift and go to state 64
    unary_expression               shift and go to state 91
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 66
    constant                       shift and go to state 74

state 144

    (104) shift_expression -> shift_expression RSHIFT . additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST

    LPAREN          shift and go to state 92
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    additive_expression            shift and go to state 191
    multiplicative_expression      shift and go to state 85
    cast_expression                shift and go to state 64
    unary_expression               shift and go to state 91
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 66
    constant                       shift and go to state 74

state 145

    (106) additive_expression -> additive_expression PLUS . multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST

    LPAREN          shift and go to state 92
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    multiplicative_expression      shift and go to state 192
    cast_expression                shift and go to state 64
    unary_expression               shift and go to state 91
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 66
    constant                       shift and go to state 74

state 146

    (107) additive_expression -> additive_expression MINUS . multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST

    LPAREN          shift and go to state 92
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    multiplicative_expression      shift and go to state 193
    cast_expression                shift and go to state 64
    unary_expression               shift and go to state 91
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 66
    constant                       shift and go to state 74

state 147

    (109) multiplicative_expression -> multiplicative_expression TIMES . cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST

    LPAREN          shift and go to state 92
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    cast_expression                shift and go to state 194
    unary_expression               shift and go to state 91
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 66
    constant                       shift and go to state 74

state 148

    (110) multiplicative_expression -> multiplicative_expression DIVIDE . cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST

    LPAREN          shift and go to state 92
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    cast_expression                shift and go to state 195
    unary_expression               shift and go to state 91
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 66
    constant                       shift and go to state 74

state 149

    (111) multiplicative_expression -> multiplicative_expression MOD . cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST

    LPAREN          shift and go to state 92
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    cast_expression                shift and go to state 196
    unary_expression               shift and go to state 91
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 66
    constant                       shift and go to state 74

state 150

    (30) direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .

    LBRACKET        reduce using rule 30 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    LPAREN          reduce using rule 30 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    LBRACE          reduce using rule 30 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    VOID            reduce using rule 30 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    INT             reduce using rule 30 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    TYPEID          reduce using rule 30 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    EQUALS          reduce using rule 30 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    SEMI            reduce using rule 30 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    COMMA           reduce using rule 30 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    RPAREN          reduce using rule 30 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)


state 151

    (31) direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 31 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 31 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LBRACE          reduce using rule 31 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOID            reduce using rule 31 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    INT             reduce using rule 31 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    TYPEID          reduce using rule 31 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EQUALS          reduce using rule 31 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SEMI            reduce using rule 31 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 31 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 31 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)


state 152

    (32) direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .

    LBRACKET        reduce using rule 32 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LPAREN          reduce using rule 32 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LBRACE          reduce using rule 32 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    VOID            reduce using rule 32 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    INT             reduce using rule 32 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    TYPEID          reduce using rule 32 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    EQUALS          reduce using rule 32 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SEMI            reduce using rule 32 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    COMMA           reduce using rule 32 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    RPAREN          reduce using rule 32 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)


state 153

    (40) identifier_list -> identifier_list COMMA . ID

    ID              shift and go to state 197


state 154

    (36) parameter_list -> parameter_list COMMA . parameter_declaration
    (37) parameter_declaration -> . declaration_specifiers declarator
    (38) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (16) declaration_specifiers -> . type_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier
    (18) type_specifier -> . VOID
    (19) type_specifier -> . INT
    (20) type_specifier -> . TYPEID

    VOID            shift and go to state 11
    INT             shift and go to state 12
    TYPEID          shift and go to state 13

    parameter_declaration          shift and go to state 198
    declaration_specifiers         shift and go to state 99
    type_specifier                 shift and go to state 9

state 155

    (37) parameter_declaration -> declaration_specifiers declarator .

    COMMA           reduce using rule 37 (parameter_declaration -> declaration_specifiers declarator .)
    RPAREN          reduce using rule 37 (parameter_declaration -> declaration_specifiers declarator .)


state 156

    (38) parameter_declaration -> declaration_specifiers abstract_declarator_opt .

    COMMA           reduce using rule 38 (parameter_declaration -> declaration_specifiers abstract_declarator_opt .)
    RPAREN          reduce using rule 38 (parameter_declaration -> declaration_specifiers abstract_declarator_opt .)


state 157

    (47) abstract_declarator_opt -> empty .

    COMMA           reduce using rule 47 (abstract_declarator_opt -> empty .)
    RPAREN          reduce using rule 47 (abstract_declarator_opt -> empty .)


state 158

    (48) abstract_declarator_opt -> abstract_declarator .

    COMMA           reduce using rule 48 (abstract_declarator_opt -> abstract_declarator .)
    RPAREN          reduce using rule 48 (abstract_declarator_opt -> abstract_declarator .)


state 159

    (29) direct_declarator -> LPAREN . declarator RPAREN
    (50) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (54) direct_abstract_declarator -> LPAREN . parameter_type_list_opt RPAREN
    (27) declarator -> . direct_declarator
    (49) abstract_declarator -> . direct_abstract_declarator
    (57) parameter_type_list_opt -> . empty
    (58) parameter_type_list_opt -> . parameter_type_list
    (28) direct_declarator -> . ID
    (29) direct_declarator -> . LPAREN declarator RPAREN
    (30) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (31) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (32) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (33) direct_declarator -> . direct_declarator LPAREN RPAREN
    (50) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (51) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression_opt RBRACKET
    (52) direct_abstract_declarator -> . LBRACKET constant_expression_opt RBRACKET
    (53) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (54) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN
    (138) empty -> .
    (34) parameter_type_list -> . parameter_list
    (35) parameter_list -> . parameter_declaration
    (36) parameter_list -> . parameter_list COMMA parameter_declaration
    (37) parameter_declaration -> . declaration_specifiers declarator
    (38) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (16) declaration_specifiers -> . type_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier
    (18) type_specifier -> . VOID
    (19) type_specifier -> . INT
    (20) type_specifier -> . TYPEID

    ID              shift and go to state 6
    LPAREN          shift and go to state 159
    LBRACKET        shift and go to state 160
    RPAREN          reduce using rule 138 (empty -> .)
    VOID            shift and go to state 11
    INT             shift and go to state 12
    TYPEID          shift and go to state 13

    declarator                     shift and go to state 29
    abstract_declarator            shift and go to state 199
    parameter_type_list_opt        shift and go to state 200
    direct_declarator              shift and go to state 10
    direct_abstract_declarator     shift and go to state 161
    empty                          shift and go to state 201
    parameter_type_list            shift and go to state 202
    parameter_list                 shift and go to state 96
    parameter_declaration          shift and go to state 98
    declaration_specifiers         shift and go to state 99
    type_specifier                 shift and go to state 9

state 160

    (52) direct_abstract_declarator -> LBRACKET . constant_expression_opt RBRACKET
    (55) constant_expression_opt -> . empty
    (56) constant_expression_opt -> . constant_expression
    (138) empty -> .
    (85) constant_expression -> . conditional_expression
    (84) conditional_expression -> . logical_or_expression
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST

    RBRACKET        reduce using rule 138 (empty -> .)
    LPAREN          shift and go to state 92
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    constant_expression_opt        shift and go to state 203
    empty                          shift and go to state 88
    constant_expression            shift and go to state 89
    conditional_expression         shift and go to state 90
    logical_or_expression          shift and go to state 59
    logical_and_expression         shift and go to state 65
    inclusive_or_expression        shift and go to state 72
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85
    cast_expression                shift and go to state 64
    unary_expression               shift and go to state 91
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 66
    constant                       shift and go to state 74

state 161

    (49) abstract_declarator -> direct_abstract_declarator .
    (51) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET constant_expression_opt RBRACKET
    (53) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list_opt RPAREN

    COMMA           reduce using rule 49 (abstract_declarator -> direct_abstract_declarator .)
    RPAREN          reduce using rule 49 (abstract_declarator -> direct_abstract_declarator .)
    LBRACKET        shift and go to state 204
    LPAREN          shift and go to state 205


state 162

    (6) include_endings -> DOT GT .

    INCLUDE         reduce using rule 6 (include_endings -> DOT GT .)
    VOID            reduce using rule 6 (include_endings -> DOT GT .)
    INT             reduce using rule 6 (include_endings -> DOT GT .)
    TYPEID          reduce using rule 6 (include_endings -> DOT GT .)
    ID              reduce using rule 6 (include_endings -> DOT GT .)
    LPAREN          reduce using rule 6 (include_endings -> DOT GT .)
    $end            reduce using rule 6 (include_endings -> DOT GT .)


state 163

    (42) initializer -> LBRACE initializer_list . RBRACE
    (43) initializer -> LBRACE initializer_list . COMMA RBRACE
    (45) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 206
    COMMA           shift and go to state 207


state 164

    (44) initializer_list -> initializer .

    RBRACE          reduce using rule 44 (initializer_list -> initializer .)
    COMMA           reduce using rule 44 (initializer_list -> initializer .)


state 165

    (65) compound_statement -> LBRACE declaration_list statement_list RBRACE .

    INCLUDE         reduce using rule 65 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    VOID            reduce using rule 65 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INT             reduce using rule 65 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    TYPEID          reduce using rule 65 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ID              reduce using rule 65 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LPAREN          reduce using rule 65 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    $end            reduce using rule 65 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    RBRACE          reduce using rule 65 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LBRACE          reduce using rule 65 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    IF              reduce using rule 65 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    WHILE           reduce using rule 65 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    FOR             reduce using rule 65 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    BREAK           reduce using rule 65 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    RETURN          reduce using rule 65 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    PLUSPLUS        reduce using rule 65 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    MINUSMINUS      reduce using rule 65 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    AND             reduce using rule 65 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    TIMES           reduce using rule 65 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    PLUS            reduce using rule 65 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    MINUS           reduce using rule 65 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LNOT            reduce using rule 65 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SCONST          reduce using rule 65 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ICONST          reduce using rule 65 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    FCONST          reduce using rule 65 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CCONST          reduce using rule 65 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SEMI            reduce using rule 65 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ELSE            reduce using rule 65 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)


state 166

    (71) selection_statement -> IF LPAREN expression . RPAREN statement
    (72) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (80) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 208
    COMMA           shift and go to state 119


state 167

    (132) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 132 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 132 (primary_expression -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 132 (primary_expression -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 132 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 132 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 132 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 132 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 132 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 132 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 132 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 132 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 132 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 132 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 132 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 132 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 132 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 132 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 132 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 132 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 132 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 132 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 132 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 132 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 132 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 132 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 132 (primary_expression -> LPAREN expression RPAREN .)


state 168

    (113) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST

    LPAREN          shift and go to state 92
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    cast_expression                shift and go to state 209
    unary_expression               shift and go to state 91
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 66
    constant                       shift and go to state 74

state 169

    (46) type_name -> specifier_qualifier_list abstract_declarator_opt .

    RPAREN          reduce using rule 46 (type_name -> specifier_qualifier_list abstract_declarator_opt .)


state 170

    (50) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (54) direct_abstract_declarator -> LPAREN . parameter_type_list_opt RPAREN
    (49) abstract_declarator -> . direct_abstract_declarator
    (57) parameter_type_list_opt -> . empty
    (58) parameter_type_list_opt -> . parameter_type_list
    (50) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (51) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression_opt RBRACKET
    (52) direct_abstract_declarator -> . LBRACKET constant_expression_opt RBRACKET
    (53) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (54) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN
    (138) empty -> .
    (34) parameter_type_list -> . parameter_list
    (35) parameter_list -> . parameter_declaration
    (36) parameter_list -> . parameter_list COMMA parameter_declaration
    (37) parameter_declaration -> . declaration_specifiers declarator
    (38) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (16) declaration_specifiers -> . type_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier
    (18) type_specifier -> . VOID
    (19) type_specifier -> . INT
    (20) type_specifier -> . TYPEID

    LPAREN          shift and go to state 170
    LBRACKET        shift and go to state 160
    RPAREN          reduce using rule 138 (empty -> .)
    VOID            shift and go to state 11
    INT             shift and go to state 12
    TYPEID          shift and go to state 13

    abstract_declarator            shift and go to state 199
    parameter_type_list_opt        shift and go to state 200
    direct_abstract_declarator     shift and go to state 161
    empty                          shift and go to state 201
    parameter_type_list            shift and go to state 202
    parameter_list                 shift and go to state 96
    parameter_declaration          shift and go to state 98
    declaration_specifiers         shift and go to state 99
    type_specifier                 shift and go to state 9

state 171

    (25) specifier_qualifier_list -> type_specifier specifier_qualifier_list .

    LPAREN          reduce using rule 25 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    LBRACKET        reduce using rule 25 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    RPAREN          reduce using rule 25 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)


state 172

    (80) expression -> expression COMMA assignment_expression .

    COMMA           reduce using rule 80 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 80 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 80 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 80 (expression -> expression COMMA assignment_expression .)


state 173

    (73) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (80) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 210
    COMMA           shift and go to state 119


state 174

    (74) iteration_statement -> FOR LPAREN expression_opt . SEMI expression_opt SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 211


state 175

    (76) jump_statement -> RETURN expression_opt SEMI .

    RBRACE          reduce using rule 76 (jump_statement -> RETURN expression_opt SEMI .)
    LBRACE          reduce using rule 76 (jump_statement -> RETURN expression_opt SEMI .)
    IF              reduce using rule 76 (jump_statement -> RETURN expression_opt SEMI .)
    WHILE           reduce using rule 76 (jump_statement -> RETURN expression_opt SEMI .)
    FOR             reduce using rule 76 (jump_statement -> RETURN expression_opt SEMI .)
    BREAK           reduce using rule 76 (jump_statement -> RETURN expression_opt SEMI .)
    RETURN          reduce using rule 76 (jump_statement -> RETURN expression_opt SEMI .)
    PLUSPLUS        reduce using rule 76 (jump_statement -> RETURN expression_opt SEMI .)
    MINUSMINUS      reduce using rule 76 (jump_statement -> RETURN expression_opt SEMI .)
    AND             reduce using rule 76 (jump_statement -> RETURN expression_opt SEMI .)
    TIMES           reduce using rule 76 (jump_statement -> RETURN expression_opt SEMI .)
    PLUS            reduce using rule 76 (jump_statement -> RETURN expression_opt SEMI .)
    MINUS           reduce using rule 76 (jump_statement -> RETURN expression_opt SEMI .)
    LNOT            reduce using rule 76 (jump_statement -> RETURN expression_opt SEMI .)
    ID              reduce using rule 76 (jump_statement -> RETURN expression_opt SEMI .)
    SCONST          reduce using rule 76 (jump_statement -> RETURN expression_opt SEMI .)
    LPAREN          reduce using rule 76 (jump_statement -> RETURN expression_opt SEMI .)
    ICONST          reduce using rule 76 (jump_statement -> RETURN expression_opt SEMI .)
    FCONST          reduce using rule 76 (jump_statement -> RETURN expression_opt SEMI .)
    CCONST          reduce using rule 76 (jump_statement -> RETURN expression_opt SEMI .)
    SEMI            reduce using rule 76 (jump_statement -> RETURN expression_opt SEMI .)
    ELSE            reduce using rule 76 (jump_statement -> RETURN expression_opt SEMI .)


state 176

    (82) assignment_expression -> unary_expression assignment_operator assignment_expression .

    COMMA           reduce using rule 82 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMI            reduce using rule 82 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 82 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 82 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 82 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 177

    (87) logical_or_expression -> logical_or_expression LOR logical_and_expression .
    (89) logical_and_expression -> logical_and_expression . LAND inclusive_or_expression

    LOR             reduce using rule 87 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    COMMA           reduce using rule 87 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    SEMI            reduce using rule 87 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RBRACKET        reduce using rule 87 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RPAREN          reduce using rule 87 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RBRACE          reduce using rule 87 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    LAND            shift and go to state 135


state 178

    (124) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (80) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 212
    COMMA           shift and go to state 119


state 179

    (125) postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN
    (134) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 213
    COMMA           shift and go to state 214


state 180

    (126) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBRACKET        reduce using rule 126 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 126 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSPLUS        reduce using rule 126 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSMINUS      reduce using rule 126 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 126 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 126 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 126 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 126 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 126 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 126 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFT          reduce using rule 126 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFT          reduce using rule 126 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 126 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT              reduce using rule 126 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LE              reduce using rule 126 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GE              reduce using rule 126 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 126 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 126 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 126 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LAND            reduce using rule 126 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LOR             reduce using rule 126 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 126 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMI            reduce using rule 126 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 126 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 126 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 126 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 181

    (133) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 133 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 133 (argument_expression_list -> assignment_expression .)


state 182

    (89) logical_and_expression -> logical_and_expression LAND inclusive_or_expression .
    (91) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    LAND            reduce using rule 89 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    LOR             reduce using rule 89 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    COMMA           reduce using rule 89 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    SEMI            reduce using rule 89 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RBRACKET        reduce using rule 89 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RPAREN          reduce using rule 89 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RBRACE          reduce using rule 89 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    OR              shift and go to state 136


state 183

    (91) inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .

    OR              reduce using rule 91 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    LAND            reduce using rule 91 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    LOR             reduce using rule 91 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COMMA           reduce using rule 91 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    SEMI            reduce using rule 91 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RBRACKET        reduce using rule 91 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RPAREN          reduce using rule 91 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RBRACE          reduce using rule 91 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)


state 184

    (94) and_expression -> and_expression AND equality_expression .
    (96) equality_expression -> equality_expression . EQ relational_expression

    AND             reduce using rule 94 (and_expression -> and_expression AND equality_expression .)
    OR              reduce using rule 94 (and_expression -> and_expression AND equality_expression .)
    LAND            reduce using rule 94 (and_expression -> and_expression AND equality_expression .)
    LOR             reduce using rule 94 (and_expression -> and_expression AND equality_expression .)
    COMMA           reduce using rule 94 (and_expression -> and_expression AND equality_expression .)
    SEMI            reduce using rule 94 (and_expression -> and_expression AND equality_expression .)
    RBRACKET        reduce using rule 94 (and_expression -> and_expression AND equality_expression .)
    RPAREN          reduce using rule 94 (and_expression -> and_expression AND equality_expression .)
    RBRACE          reduce using rule 94 (and_expression -> and_expression AND equality_expression .)
    EQ              shift and go to state 138


state 185

    (96) equality_expression -> equality_expression EQ relational_expression .
    (98) relational_expression -> relational_expression . LT shift_expression
    (99) relational_expression -> relational_expression . GT shift_expression
    (100) relational_expression -> relational_expression . LE shift_expression
    (101) relational_expression -> relational_expression . GE shift_expression

    EQ              reduce using rule 96 (equality_expression -> equality_expression EQ relational_expression .)
    AND             reduce using rule 96 (equality_expression -> equality_expression EQ relational_expression .)
    OR              reduce using rule 96 (equality_expression -> equality_expression EQ relational_expression .)
    LAND            reduce using rule 96 (equality_expression -> equality_expression EQ relational_expression .)
    LOR             reduce using rule 96 (equality_expression -> equality_expression EQ relational_expression .)
    COMMA           reduce using rule 96 (equality_expression -> equality_expression EQ relational_expression .)
    SEMI            reduce using rule 96 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACKET        reduce using rule 96 (equality_expression -> equality_expression EQ relational_expression .)
    RPAREN          reduce using rule 96 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACE          reduce using rule 96 (equality_expression -> equality_expression EQ relational_expression .)
    LT              shift and go to state 139
    GT              shift and go to state 140
    LE              shift and go to state 141
    GE              shift and go to state 142


state 186

    (98) relational_expression -> relational_expression LT shift_expression .
    (103) shift_expression -> shift_expression . LSHIFT additive_expression
    (104) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 98 (relational_expression -> relational_expression LT shift_expression .)
    GT              reduce using rule 98 (relational_expression -> relational_expression LT shift_expression .)
    LE              reduce using rule 98 (relational_expression -> relational_expression LT shift_expression .)
    GE              reduce using rule 98 (relational_expression -> relational_expression LT shift_expression .)
    EQ              reduce using rule 98 (relational_expression -> relational_expression LT shift_expression .)
    AND             reduce using rule 98 (relational_expression -> relational_expression LT shift_expression .)
    OR              reduce using rule 98 (relational_expression -> relational_expression LT shift_expression .)
    LAND            reduce using rule 98 (relational_expression -> relational_expression LT shift_expression .)
    LOR             reduce using rule 98 (relational_expression -> relational_expression LT shift_expression .)
    COMMA           reduce using rule 98 (relational_expression -> relational_expression LT shift_expression .)
    SEMI            reduce using rule 98 (relational_expression -> relational_expression LT shift_expression .)
    RBRACKET        reduce using rule 98 (relational_expression -> relational_expression LT shift_expression .)
    RPAREN          reduce using rule 98 (relational_expression -> relational_expression LT shift_expression .)
    RBRACE          reduce using rule 98 (relational_expression -> relational_expression LT shift_expression .)
    LSHIFT          shift and go to state 143
    RSHIFT          shift and go to state 144


state 187

    (99) relational_expression -> relational_expression GT shift_expression .
    (103) shift_expression -> shift_expression . LSHIFT additive_expression
    (104) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 99 (relational_expression -> relational_expression GT shift_expression .)
    GT              reduce using rule 99 (relational_expression -> relational_expression GT shift_expression .)
    LE              reduce using rule 99 (relational_expression -> relational_expression GT shift_expression .)
    GE              reduce using rule 99 (relational_expression -> relational_expression GT shift_expression .)
    EQ              reduce using rule 99 (relational_expression -> relational_expression GT shift_expression .)
    AND             reduce using rule 99 (relational_expression -> relational_expression GT shift_expression .)
    OR              reduce using rule 99 (relational_expression -> relational_expression GT shift_expression .)
    LAND            reduce using rule 99 (relational_expression -> relational_expression GT shift_expression .)
    LOR             reduce using rule 99 (relational_expression -> relational_expression GT shift_expression .)
    COMMA           reduce using rule 99 (relational_expression -> relational_expression GT shift_expression .)
    SEMI            reduce using rule 99 (relational_expression -> relational_expression GT shift_expression .)
    RBRACKET        reduce using rule 99 (relational_expression -> relational_expression GT shift_expression .)
    RPAREN          reduce using rule 99 (relational_expression -> relational_expression GT shift_expression .)
    RBRACE          reduce using rule 99 (relational_expression -> relational_expression GT shift_expression .)
    LSHIFT          shift and go to state 143
    RSHIFT          shift and go to state 144


state 188

    (100) relational_expression -> relational_expression LE shift_expression .
    (103) shift_expression -> shift_expression . LSHIFT additive_expression
    (104) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 100 (relational_expression -> relational_expression LE shift_expression .)
    GT              reduce using rule 100 (relational_expression -> relational_expression LE shift_expression .)
    LE              reduce using rule 100 (relational_expression -> relational_expression LE shift_expression .)
    GE              reduce using rule 100 (relational_expression -> relational_expression LE shift_expression .)
    EQ              reduce using rule 100 (relational_expression -> relational_expression LE shift_expression .)
    AND             reduce using rule 100 (relational_expression -> relational_expression LE shift_expression .)
    OR              reduce using rule 100 (relational_expression -> relational_expression LE shift_expression .)
    LAND            reduce using rule 100 (relational_expression -> relational_expression LE shift_expression .)
    LOR             reduce using rule 100 (relational_expression -> relational_expression LE shift_expression .)
    COMMA           reduce using rule 100 (relational_expression -> relational_expression LE shift_expression .)
    SEMI            reduce using rule 100 (relational_expression -> relational_expression LE shift_expression .)
    RBRACKET        reduce using rule 100 (relational_expression -> relational_expression LE shift_expression .)
    RPAREN          reduce using rule 100 (relational_expression -> relational_expression LE shift_expression .)
    RBRACE          reduce using rule 100 (relational_expression -> relational_expression LE shift_expression .)
    LSHIFT          shift and go to state 143
    RSHIFT          shift and go to state 144


state 189

    (101) relational_expression -> relational_expression GE shift_expression .
    (103) shift_expression -> shift_expression . LSHIFT additive_expression
    (104) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 101 (relational_expression -> relational_expression GE shift_expression .)
    GT              reduce using rule 101 (relational_expression -> relational_expression GE shift_expression .)
    LE              reduce using rule 101 (relational_expression -> relational_expression GE shift_expression .)
    GE              reduce using rule 101 (relational_expression -> relational_expression GE shift_expression .)
    EQ              reduce using rule 101 (relational_expression -> relational_expression GE shift_expression .)
    AND             reduce using rule 101 (relational_expression -> relational_expression GE shift_expression .)
    OR              reduce using rule 101 (relational_expression -> relational_expression GE shift_expression .)
    LAND            reduce using rule 101 (relational_expression -> relational_expression GE shift_expression .)
    LOR             reduce using rule 101 (relational_expression -> relational_expression GE shift_expression .)
    COMMA           reduce using rule 101 (relational_expression -> relational_expression GE shift_expression .)
    SEMI            reduce using rule 101 (relational_expression -> relational_expression GE shift_expression .)
    RBRACKET        reduce using rule 101 (relational_expression -> relational_expression GE shift_expression .)
    RPAREN          reduce using rule 101 (relational_expression -> relational_expression GE shift_expression .)
    RBRACE          reduce using rule 101 (relational_expression -> relational_expression GE shift_expression .)
    LSHIFT          shift and go to state 143
    RSHIFT          shift and go to state 144


state 190

    (103) shift_expression -> shift_expression LSHIFT additive_expression .
    (106) additive_expression -> additive_expression . PLUS multiplicative_expression
    (107) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 103 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 103 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LT              reduce using rule 103 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GT              reduce using rule 103 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LE              reduce using rule 103 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GE              reduce using rule 103 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQ              reduce using rule 103 (shift_expression -> shift_expression LSHIFT additive_expression .)
    AND             reduce using rule 103 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OR              reduce using rule 103 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LAND            reduce using rule 103 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LOR             reduce using rule 103 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COMMA           reduce using rule 103 (shift_expression -> shift_expression LSHIFT additive_expression .)
    SEMI            reduce using rule 103 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RBRACKET        reduce using rule 103 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RPAREN          reduce using rule 103 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RBRACE          reduce using rule 103 (shift_expression -> shift_expression LSHIFT additive_expression .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146


state 191

    (104) shift_expression -> shift_expression RSHIFT additive_expression .
    (106) additive_expression -> additive_expression . PLUS multiplicative_expression
    (107) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 104 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 104 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LT              reduce using rule 104 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GT              reduce using rule 104 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LE              reduce using rule 104 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GE              reduce using rule 104 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQ              reduce using rule 104 (shift_expression -> shift_expression RSHIFT additive_expression .)
    AND             reduce using rule 104 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OR              reduce using rule 104 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LAND            reduce using rule 104 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LOR             reduce using rule 104 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COMMA           reduce using rule 104 (shift_expression -> shift_expression RSHIFT additive_expression .)
    SEMI            reduce using rule 104 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RBRACKET        reduce using rule 104 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RPAREN          reduce using rule 104 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RBRACE          reduce using rule 104 (shift_expression -> shift_expression RSHIFT additive_expression .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146


state 192

    (106) additive_expression -> additive_expression PLUS multiplicative_expression .
    (109) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (110) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (111) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 106 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 106 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LSHIFT          reduce using rule 106 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RSHIFT          reduce using rule 106 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT              reduce using rule 106 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT              reduce using rule 106 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE              reduce using rule 106 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE              reduce using rule 106 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ              reduce using rule 106 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 106 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 106 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LAND            reduce using rule 106 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOR             reduce using rule 106 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 106 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMI            reduce using rule 106 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 106 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 106 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACE          reduce using rule 106 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 147
    DIVIDE          shift and go to state 148
    MOD             shift and go to state 149


state 193

    (107) additive_expression -> additive_expression MINUS multiplicative_expression .
    (109) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (110) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (111) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 107 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 107 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LSHIFT          reduce using rule 107 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RSHIFT          reduce using rule 107 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT              reduce using rule 107 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT              reduce using rule 107 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE              reduce using rule 107 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE              reduce using rule 107 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ              reduce using rule 107 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 107 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 107 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LAND            reduce using rule 107 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOR             reduce using rule 107 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 107 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMI            reduce using rule 107 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 107 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 107 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACE          reduce using rule 107 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 147
    DIVIDE          shift and go to state 148
    MOD             shift and go to state 149


state 194

    (109) multiplicative_expression -> multiplicative_expression TIMES cast_expression .

    TIMES           reduce using rule 109 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    DIVIDE          reduce using rule 109 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MOD             reduce using rule 109 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    PLUS            reduce using rule 109 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MINUS           reduce using rule 109 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LSHIFT          reduce using rule 109 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RSHIFT          reduce using rule 109 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LT              reduce using rule 109 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GT              reduce using rule 109 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LE              reduce using rule 109 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GE              reduce using rule 109 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    EQ              reduce using rule 109 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    AND             reduce using rule 109 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    OR              reduce using rule 109 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LAND            reduce using rule 109 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LOR             reduce using rule 109 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COMMA           reduce using rule 109 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    SEMI            reduce using rule 109 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RBRACKET        reduce using rule 109 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RPAREN          reduce using rule 109 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RBRACE          reduce using rule 109 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)


state 195

    (110) multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .

    TIMES           reduce using rule 110 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    DIVIDE          reduce using rule 110 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MOD             reduce using rule 110 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    PLUS            reduce using rule 110 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MINUS           reduce using rule 110 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LSHIFT          reduce using rule 110 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RSHIFT          reduce using rule 110 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LT              reduce using rule 110 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GT              reduce using rule 110 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LE              reduce using rule 110 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GE              reduce using rule 110 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    EQ              reduce using rule 110 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    AND             reduce using rule 110 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    OR              reduce using rule 110 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LAND            reduce using rule 110 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LOR             reduce using rule 110 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COMMA           reduce using rule 110 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    SEMI            reduce using rule 110 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RBRACKET        reduce using rule 110 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RPAREN          reduce using rule 110 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RBRACE          reduce using rule 110 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)


state 196

    (111) multiplicative_expression -> multiplicative_expression MOD cast_expression .

    TIMES           reduce using rule 111 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    DIVIDE          reduce using rule 111 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MOD             reduce using rule 111 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    PLUS            reduce using rule 111 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MINUS           reduce using rule 111 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LSHIFT          reduce using rule 111 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RSHIFT          reduce using rule 111 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LT              reduce using rule 111 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GT              reduce using rule 111 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LE              reduce using rule 111 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GE              reduce using rule 111 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    EQ              reduce using rule 111 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    AND             reduce using rule 111 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    OR              reduce using rule 111 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LAND            reduce using rule 111 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LOR             reduce using rule 111 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COMMA           reduce using rule 111 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    SEMI            reduce using rule 111 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RBRACKET        reduce using rule 111 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RPAREN          reduce using rule 111 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RBRACE          reduce using rule 111 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)


state 197

    (40) identifier_list -> identifier_list COMMA ID .

    RPAREN          reduce using rule 40 (identifier_list -> identifier_list COMMA ID .)
    COMMA           reduce using rule 40 (identifier_list -> identifier_list COMMA ID .)


state 198

    (36) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 36 (parameter_list -> parameter_list COMMA parameter_declaration .)
    RPAREN          reduce using rule 36 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 199

    (50) direct_abstract_declarator -> LPAREN abstract_declarator . RPAREN

    RPAREN          shift and go to state 215


state 200

    (54) direct_abstract_declarator -> LPAREN parameter_type_list_opt . RPAREN

    RPAREN          shift and go to state 216


state 201

    (57) parameter_type_list_opt -> empty .

    RPAREN          reduce using rule 57 (parameter_type_list_opt -> empty .)


state 202

    (58) parameter_type_list_opt -> parameter_type_list .

    RPAREN          reduce using rule 58 (parameter_type_list_opt -> parameter_type_list .)


state 203

    (52) direct_abstract_declarator -> LBRACKET constant_expression_opt . RBRACKET

    RBRACKET        shift and go to state 217


state 204

    (51) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . constant_expression_opt RBRACKET
    (55) constant_expression_opt -> . empty
    (56) constant_expression_opt -> . constant_expression
    (138) empty -> .
    (85) constant_expression -> . conditional_expression
    (84) conditional_expression -> . logical_or_expression
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST

    RBRACKET        reduce using rule 138 (empty -> .)
    LPAREN          shift and go to state 92
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    constant_expression_opt        shift and go to state 218
    empty                          shift and go to state 88
    constant_expression            shift and go to state 89
    conditional_expression         shift and go to state 90
    logical_or_expression          shift and go to state 59
    logical_and_expression         shift and go to state 65
    inclusive_or_expression        shift and go to state 72
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85
    cast_expression                shift and go to state 64
    unary_expression               shift and go to state 91
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 66
    constant                       shift and go to state 74

state 205

    (53) direct_abstract_declarator -> direct_abstract_declarator LPAREN . parameter_type_list_opt RPAREN
    (57) parameter_type_list_opt -> . empty
    (58) parameter_type_list_opt -> . parameter_type_list
    (138) empty -> .
    (34) parameter_type_list -> . parameter_list
    (35) parameter_list -> . parameter_declaration
    (36) parameter_list -> . parameter_list COMMA parameter_declaration
    (37) parameter_declaration -> . declaration_specifiers declarator
    (38) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (16) declaration_specifiers -> . type_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier
    (18) type_specifier -> . VOID
    (19) type_specifier -> . INT
    (20) type_specifier -> . TYPEID

    RPAREN          reduce using rule 138 (empty -> .)
    VOID            shift and go to state 11
    INT             shift and go to state 12
    TYPEID          shift and go to state 13

    parameter_type_list_opt        shift and go to state 219
    empty                          shift and go to state 201
    parameter_type_list            shift and go to state 202
    parameter_list                 shift and go to state 96
    parameter_declaration          shift and go to state 98
    declaration_specifiers         shift and go to state 99
    type_specifier                 shift and go to state 9

state 206

    (42) initializer -> LBRACE initializer_list RBRACE .

    SEMI            reduce using rule 42 (initializer -> LBRACE initializer_list RBRACE .)
    COMMA           reduce using rule 42 (initializer -> LBRACE initializer_list RBRACE .)
    RBRACE          reduce using rule 42 (initializer -> LBRACE initializer_list RBRACE .)


state 207

    (43) initializer -> LBRACE initializer_list COMMA . RBRACE
    (45) initializer_list -> initializer_list COMMA . initializer
    (41) initializer -> . assignment_expression
    (42) initializer -> . LBRACE initializer_list RBRACE
    (43) initializer -> . LBRACE initializer_list COMMA RBRACE
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (84) conditional_expression -> . logical_or_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 220
    LBRACE          shift and go to state 107
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    LPAREN          shift and go to state 49
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    initializer                    shift and go to state 221
    assignment_expression          shift and go to state 106
    conditional_expression         shift and go to state 57
    unary_expression               shift and go to state 58
    logical_or_expression          shift and go to state 59
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    cast_expression                shift and go to state 64
    logical_and_expression         shift and go to state 65
    primary_expression             shift and go to state 66
    inclusive_or_expression        shift and go to state 72
    constant                       shift and go to state 74
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85

state 208

    (71) selection_statement -> IF LPAREN expression RPAREN . statement
    (72) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (59) statement -> . expression_statement
    (60) statement -> . compound_statement
    (61) statement -> . selection_statement
    (62) statement -> . iteration_statement
    (63) statement -> . jump_statement
    (64) expression_statement -> . expression_opt SEMI
    (65) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (66) compound_statement -> . LBRACE statement_list RBRACE
    (67) compound_statement -> . LBRACE declaration_list RBRACE
    (68) compound_statement -> . LBRACE RBRACE
    (71) selection_statement -> . IF LPAREN expression RPAREN statement
    (72) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (73) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (75) jump_statement -> . BREAK SEMI
    (76) jump_statement -> . RETURN expression_opt SEMI
    (77) expression_opt -> . empty
    (78) expression_opt -> . expression
    (138) empty -> .
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (84) conditional_expression -> . logical_or_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 24
    IF              shift and go to state 48
    WHILE           shift and go to state 51
    FOR             shift and go to state 52
    BREAK           shift and go to state 53
    RETURN          shift and go to state 54
    SEMI            reduce using rule 138 (empty -> .)
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    LPAREN          shift and go to state 49
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    expression                     shift and go to state 50
    statement                      shift and go to state 222
    expression_statement           shift and go to state 42
    compound_statement             shift and go to state 43
    selection_statement            shift and go to state 44
    iteration_statement            shift and go to state 45
    jump_statement                 shift and go to state 46
    expression_opt                 shift and go to state 47
    empty                          shift and go to state 55
    assignment_expression          shift and go to state 56
    conditional_expression         shift and go to state 57
    unary_expression               shift and go to state 58
    logical_or_expression          shift and go to state 59
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    cast_expression                shift and go to state 64
    logical_and_expression         shift and go to state 65
    primary_expression             shift and go to state 66
    inclusive_or_expression        shift and go to state 72
    constant                       shift and go to state 74
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85

state 209

    (113) cast_expression -> LPAREN type_name RPAREN cast_expression .

    TIMES           reduce using rule 113 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVIDE          reduce using rule 113 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MOD             reduce using rule 113 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUS            reduce using rule 113 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUS           reduce using rule 113 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFT          reduce using rule 113 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFT          reduce using rule 113 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LT              reduce using rule 113 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GT              reduce using rule 113 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LE              reduce using rule 113 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GE              reduce using rule 113 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQ              reduce using rule 113 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND             reduce using rule 113 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR              reduce using rule 113 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LAND            reduce using rule 113 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LOR             reduce using rule 113 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 113 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMI            reduce using rule 113 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACKET        reduce using rule 113 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 113 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUALS          reduce using rule 113 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACE          reduce using rule 113 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 210

    (73) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (59) statement -> . expression_statement
    (60) statement -> . compound_statement
    (61) statement -> . selection_statement
    (62) statement -> . iteration_statement
    (63) statement -> . jump_statement
    (64) expression_statement -> . expression_opt SEMI
    (65) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (66) compound_statement -> . LBRACE statement_list RBRACE
    (67) compound_statement -> . LBRACE declaration_list RBRACE
    (68) compound_statement -> . LBRACE RBRACE
    (71) selection_statement -> . IF LPAREN expression RPAREN statement
    (72) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (73) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (75) jump_statement -> . BREAK SEMI
    (76) jump_statement -> . RETURN expression_opt SEMI
    (77) expression_opt -> . empty
    (78) expression_opt -> . expression
    (138) empty -> .
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (84) conditional_expression -> . logical_or_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 24
    IF              shift and go to state 48
    WHILE           shift and go to state 51
    FOR             shift and go to state 52
    BREAK           shift and go to state 53
    RETURN          shift and go to state 54
    SEMI            reduce using rule 138 (empty -> .)
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    LPAREN          shift and go to state 49
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    expression                     shift and go to state 50
    statement                      shift and go to state 223
    expression_statement           shift and go to state 42
    compound_statement             shift and go to state 43
    selection_statement            shift and go to state 44
    iteration_statement            shift and go to state 45
    jump_statement                 shift and go to state 46
    expression_opt                 shift and go to state 47
    empty                          shift and go to state 55
    assignment_expression          shift and go to state 56
    conditional_expression         shift and go to state 57
    unary_expression               shift and go to state 58
    logical_or_expression          shift and go to state 59
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    cast_expression                shift and go to state 64
    logical_and_expression         shift and go to state 65
    primary_expression             shift and go to state 66
    inclusive_or_expression        shift and go to state 72
    constant                       shift and go to state 74
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85

state 211

    (74) iteration_statement -> FOR LPAREN expression_opt SEMI . expression_opt SEMI expression_opt RPAREN statement
    (77) expression_opt -> . empty
    (78) expression_opt -> . expression
    (138) empty -> .
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (84) conditional_expression -> . logical_or_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMI            reduce using rule 138 (empty -> .)
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    LPAREN          shift and go to state 49
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    expression_opt                 shift and go to state 224
    empty                          shift and go to state 55
    expression                     shift and go to state 50
    assignment_expression          shift and go to state 56
    conditional_expression         shift and go to state 57
    unary_expression               shift and go to state 58
    logical_or_expression          shift and go to state 59
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    cast_expression                shift and go to state 64
    logical_and_expression         shift and go to state 65
    primary_expression             shift and go to state 66
    inclusive_or_expression        shift and go to state 72
    constant                       shift and go to state 74
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85

state 212

    (124) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFT          reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFT          reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LAND            reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LOR             reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 124 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 213

    (125) postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .

    LBRACKET        reduce using rule 125 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LPAREN          reduce using rule 125 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUSPLUS        reduce using rule 125 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUSMINUS      reduce using rule 125 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQUALS          reduce using rule 125 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMES           reduce using rule 125 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVIDE          reduce using rule 125 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD             reduce using rule 125 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 125 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 125 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFT          reduce using rule 125 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFT          reduce using rule 125 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LT              reduce using rule 125 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GT              reduce using rule 125 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LE              reduce using rule 125 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GE              reduce using rule 125 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ              reduce using rule 125 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND             reduce using rule 125 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR              reduce using rule 125 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LAND            reduce using rule 125 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LOR             reduce using rule 125 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 125 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SEMI            reduce using rule 125 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACKET        reduce using rule 125 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 125 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACE          reduce using rule 125 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)


state 214

    (134) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (84) conditional_expression -> . logical_or_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    LPAREN          shift and go to state 49
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    assignment_expression          shift and go to state 225
    conditional_expression         shift and go to state 57
    unary_expression               shift and go to state 58
    logical_or_expression          shift and go to state 59
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    cast_expression                shift and go to state 64
    logical_and_expression         shift and go to state 65
    primary_expression             shift and go to state 66
    inclusive_or_expression        shift and go to state 72
    constant                       shift and go to state 74
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85

state 215

    (50) direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .

    LBRACKET        reduce using rule 50 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    LPAREN          reduce using rule 50 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    COMMA           reduce using rule 50 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    RPAREN          reduce using rule 50 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)


state 216

    (54) direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .

    LBRACKET        reduce using rule 54 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)
    LPAREN          reduce using rule 54 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)
    COMMA           reduce using rule 54 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)
    RPAREN          reduce using rule 54 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)


state 217

    (52) direct_abstract_declarator -> LBRACKET constant_expression_opt RBRACKET .

    LBRACKET        reduce using rule 52 (direct_abstract_declarator -> LBRACKET constant_expression_opt RBRACKET .)
    LPAREN          reduce using rule 52 (direct_abstract_declarator -> LBRACKET constant_expression_opt RBRACKET .)
    COMMA           reduce using rule 52 (direct_abstract_declarator -> LBRACKET constant_expression_opt RBRACKET .)
    RPAREN          reduce using rule 52 (direct_abstract_declarator -> LBRACKET constant_expression_opt RBRACKET .)


state 218

    (51) direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_opt . RBRACKET

    RBRACKET        shift and go to state 226


state 219

    (53) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt . RPAREN

    RPAREN          shift and go to state 227


state 220

    (43) initializer -> LBRACE initializer_list COMMA RBRACE .

    SEMI            reduce using rule 43 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    COMMA           reduce using rule 43 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 43 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 221

    (45) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 45 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 45 (initializer_list -> initializer_list COMMA initializer .)


state 222

    (71) selection_statement -> IF LPAREN expression RPAREN statement .
    (72) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RBRACE          reduce using rule 71 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 71 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 71 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 71 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 71 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 71 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 71 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 71 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 71 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AND             reduce using rule 71 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 71 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 71 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 71 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 71 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 71 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SCONST          reduce using rule 71 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 71 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ICONST          reduce using rule 71 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FCONST          reduce using rule 71 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CCONST          reduce using rule 71 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 71 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 228

  ! ELSE            [ reduce using rule 71 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 223

    (73) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 73 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 73 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 73 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 73 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 73 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 73 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 73 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 73 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 73 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AND             reduce using rule 73 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 73 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 73 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 73 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 73 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 73 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SCONST          reduce using rule 73 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 73 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ICONST          reduce using rule 73 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FCONST          reduce using rule 73 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CCONST          reduce using rule 73 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 73 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 73 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 224

    (74) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 229


state 225

    (134) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 134 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 134 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 226

    (51) direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_opt RBRACKET .

    LBRACKET        reduce using rule 51 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_opt RBRACKET .)
    LPAREN          reduce using rule 51 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_opt RBRACKET .)
    COMMA           reduce using rule 51 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_opt RBRACKET .)
    RPAREN          reduce using rule 51 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_opt RBRACKET .)


state 227

    (53) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .

    LBRACKET        reduce using rule 53 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)
    LPAREN          reduce using rule 53 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)
    COMMA           reduce using rule 53 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)
    RPAREN          reduce using rule 53 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)


state 228

    (72) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (59) statement -> . expression_statement
    (60) statement -> . compound_statement
    (61) statement -> . selection_statement
    (62) statement -> . iteration_statement
    (63) statement -> . jump_statement
    (64) expression_statement -> . expression_opt SEMI
    (65) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (66) compound_statement -> . LBRACE statement_list RBRACE
    (67) compound_statement -> . LBRACE declaration_list RBRACE
    (68) compound_statement -> . LBRACE RBRACE
    (71) selection_statement -> . IF LPAREN expression RPAREN statement
    (72) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (73) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (75) jump_statement -> . BREAK SEMI
    (76) jump_statement -> . RETURN expression_opt SEMI
    (77) expression_opt -> . empty
    (78) expression_opt -> . expression
    (138) empty -> .
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (84) conditional_expression -> . logical_or_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 24
    IF              shift and go to state 48
    WHILE           shift and go to state 51
    FOR             shift and go to state 52
    BREAK           shift and go to state 53
    RETURN          shift and go to state 54
    SEMI            reduce using rule 138 (empty -> .)
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    LPAREN          shift and go to state 49
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    expression                     shift and go to state 50
    statement                      shift and go to state 230
    expression_statement           shift and go to state 42
    compound_statement             shift and go to state 43
    selection_statement            shift and go to state 44
    iteration_statement            shift and go to state 45
    jump_statement                 shift and go to state 46
    expression_opt                 shift and go to state 47
    empty                          shift and go to state 55
    assignment_expression          shift and go to state 56
    conditional_expression         shift and go to state 57
    unary_expression               shift and go to state 58
    logical_or_expression          shift and go to state 59
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    cast_expression                shift and go to state 64
    logical_and_expression         shift and go to state 65
    primary_expression             shift and go to state 66
    inclusive_or_expression        shift and go to state 72
    constant                       shift and go to state 74
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85

state 229

    (74) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI . expression_opt RPAREN statement
    (77) expression_opt -> . empty
    (78) expression_opt -> . expression
    (138) empty -> .
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (84) conditional_expression -> . logical_or_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          reduce using rule 138 (empty -> .)
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    LPAREN          shift and go to state 49
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    expression_opt                 shift and go to state 231
    empty                          shift and go to state 55
    expression                     shift and go to state 50
    assignment_expression          shift and go to state 56
    conditional_expression         shift and go to state 57
    unary_expression               shift and go to state 58
    logical_or_expression          shift and go to state 59
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    cast_expression                shift and go to state 64
    logical_and_expression         shift and go to state 65
    primary_expression             shift and go to state 66
    inclusive_or_expression        shift and go to state 72
    constant                       shift and go to state 74
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85

state 230

    (72) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RBRACE          reduce using rule 72 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 72 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 72 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 72 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 72 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 72 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 72 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSPLUS        reduce using rule 72 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSMINUS      reduce using rule 72 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AND             reduce using rule 72 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 72 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 72 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 72 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LNOT            reduce using rule 72 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 72 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SCONST          reduce using rule 72 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 72 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ICONST          reduce using rule 72 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FCONST          reduce using rule 72 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CCONST          reduce using rule 72 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 72 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 72 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 231

    (74) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 232


state 232

    (74) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN . statement
    (59) statement -> . expression_statement
    (60) statement -> . compound_statement
    (61) statement -> . selection_statement
    (62) statement -> . iteration_statement
    (63) statement -> . jump_statement
    (64) expression_statement -> . expression_opt SEMI
    (65) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (66) compound_statement -> . LBRACE statement_list RBRACE
    (67) compound_statement -> . LBRACE declaration_list RBRACE
    (68) compound_statement -> . LBRACE RBRACE
    (71) selection_statement -> . IF LPAREN expression RPAREN statement
    (72) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (73) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (75) jump_statement -> . BREAK SEMI
    (76) jump_statement -> . RETURN expression_opt SEMI
    (77) expression_opt -> . empty
    (78) expression_opt -> . expression
    (138) empty -> .
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (84) conditional_expression -> . logical_or_expression
    (114) unary_expression -> . postfix_expression
    (115) unary_expression -> . PLUSPLUS unary_expression
    (116) unary_expression -> . MINUSMINUS unary_expression
    (117) unary_expression -> . unary_operator cast_expression
    (86) logical_or_expression -> . logical_and_expression
    (87) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (125) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (126) postfix_expression -> . postfix_expression LPAREN RPAREN
    (127) postfix_expression -> . postfix_expression PLUSPLUS
    (128) postfix_expression -> . postfix_expression MINUSMINUS
    (118) unary_operator -> . AND
    (119) unary_operator -> . TIMES
    (120) unary_operator -> . PLUS
    (121) unary_operator -> . MINUS
    (122) unary_operator -> . LNOT
    (88) logical_and_expression -> . inclusive_or_expression
    (89) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (129) primary_expression -> . ID
    (130) primary_expression -> . constant
    (131) primary_expression -> . SCONST
    (132) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_or_expression -> . exclusive_or_expression
    (91) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (135) constant -> . ICONST
    (136) constant -> . FCONST
    (137) constant -> . CCONST
    (92) exclusive_or_expression -> . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) relational_expression -> . shift_expression
    (98) relational_expression -> . relational_expression LT shift_expression
    (99) relational_expression -> . relational_expression GT shift_expression
    (100) relational_expression -> . relational_expression LE shift_expression
    (101) relational_expression -> . relational_expression GE shift_expression
    (102) shift_expression -> . additive_expression
    (103) shift_expression -> . shift_expression LSHIFT additive_expression
    (104) shift_expression -> . shift_expression RSHIFT additive_expression
    (105) additive_expression -> . multiplicative_expression
    (106) additive_expression -> . additive_expression PLUS multiplicative_expression
    (107) additive_expression -> . additive_expression MINUS multiplicative_expression
    (108) multiplicative_expression -> . cast_expression
    (109) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (110) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (111) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (112) cast_expression -> . unary_expression
    (113) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 24
    IF              shift and go to state 48
    WHILE           shift and go to state 51
    FOR             shift and go to state 52
    BREAK           shift and go to state 53
    RETURN          shift and go to state 54
    SEMI            reduce using rule 138 (empty -> .)
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    AND             shift and go to state 67
    TIMES           shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    LNOT            shift and go to state 71
    ID              shift and go to state 73
    SCONST          shift and go to state 75
    LPAREN          shift and go to state 49
    ICONST          shift and go to state 77
    FCONST          shift and go to state 78
    CCONST          shift and go to state 79

    expression_opt                 shift and go to state 47
    statement                      shift and go to state 233
    expression_statement           shift and go to state 42
    compound_statement             shift and go to state 43
    selection_statement            shift and go to state 44
    iteration_statement            shift and go to state 45
    jump_statement                 shift and go to state 46
    expression                     shift and go to state 50
    empty                          shift and go to state 55
    assignment_expression          shift and go to state 56
    conditional_expression         shift and go to state 57
    unary_expression               shift and go to state 58
    logical_or_expression          shift and go to state 59
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    cast_expression                shift and go to state 64
    logical_and_expression         shift and go to state 65
    primary_expression             shift and go to state 66
    inclusive_or_expression        shift and go to state 72
    constant                       shift and go to state 74
    exclusive_or_expression        shift and go to state 76
    and_expression                 shift and go to state 80
    equality_expression            shift and go to state 81
    relational_expression          shift and go to state 82
    shift_expression               shift and go to state 83
    additive_expression            shift and go to state 84
    multiplicative_expression      shift and go to state 85

state 233

    (74) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .

    RBRACE          reduce using rule 74 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LBRACE          reduce using rule 74 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 74 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 74 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 74 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 74 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 74 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUSPLUS        reduce using rule 74 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUSMINUS      reduce using rule 74 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    AND             reduce using rule 74 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 74 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 74 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 74 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LNOT            reduce using rule 74 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ID              reduce using rule 74 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SCONST          reduce using rule 74 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 74 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ICONST          reduce using rule 74 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FCONST          reduce using rule 74 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CCONST          reduce using rule 74 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 74 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 74 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 222 resolved as shift
