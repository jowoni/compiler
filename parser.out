Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> translation_unit
Rule 1     translation_unit -> external_declaration
Rule 2     translation_unit -> translation_unit external_declaration
Rule 3     external_declaration -> function_definition
Rule 4     external_declaration -> declaration
Rule 5     function_definition -> declaration_specifiers declarator declaration_list compound_statement
Rule 6     function_definition -> declarator declaration_list compound_statement
Rule 7     function_definition -> declarator compound_statement
Rule 8     function_definition -> declaration_specifiers declarator compound_statement
Rule 9     declaration -> declaration_specifiers init_declarator_list SEMI
Rule 10    declaration -> declaration_specifiers SEMI
Rule 11    declaration_list -> declaration
Rule 12    declaration_list -> declaration_list declaration
Rule 13    declaration_specifiers -> type_specifier declaration_specifiers
Rule 14    declaration_specifiers -> type_specifier
Rule 15    type_specifier -> VOID
Rule 16    type_specifier -> INT
Rule 17    type_specifier -> TYPEID
Rule 18    init_declarator_list -> init_declarator
Rule 19    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 20    init_declarator -> declarator
Rule 21    init_declarator -> declarator EQUALS initializer
Rule 22    specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 23    specifier_qualifier_list -> type_specifier
Rule 24    declarator -> direct_declarator
Rule 25    direct_declarator -> ID
Rule 26    direct_declarator -> LPAREN declarator RPAREN
Rule 27    direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET
Rule 28    direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN
Rule 29    direct_declarator -> direct_declarator LPAREN identifier_list RPAREN
Rule 30    direct_declarator -> direct_declarator LPAREN RPAREN
Rule 31    parameter_type_list -> parameter_list
Rule 32    parameter_list -> parameter_declaration
Rule 33    parameter_list -> parameter_list COMMA parameter_declaration
Rule 34    parameter_declaration -> declaration_specifiers declarator
Rule 35    parameter_declaration -> declaration_specifiers abstract_declarator_opt
Rule 36    identifier_list -> ID
Rule 37    identifier_list -> identifier_list COMMA ID
Rule 38    initializer -> assignment_expression
Rule 39    initializer -> LBRACE initializer_list RBRACE
Rule 40    initializer -> LBRACE initializer_list COMMA RBRACE
Rule 41    initializer_list -> initializer
Rule 42    initializer_list -> initializer_list COMMA initializer
Rule 43    type_name -> specifier_qualifier_list abstract_declarator_opt
Rule 44    abstract_declarator_opt -> empty
Rule 45    abstract_declarator_opt -> abstract_declarator
Rule 46    abstract_declarator -> direct_abstract_declarator
Rule 47    direct_abstract_declarator -> LPAREN abstract_declarator RPAREN
Rule 48    direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_opt RBRACKET
Rule 49    direct_abstract_declarator -> LBRACKET constant_expression_opt RBRACKET
Rule 50    direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
Rule 51    direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN
Rule 52    constant_expression_opt -> empty
Rule 53    constant_expression_opt -> constant_expression
Rule 54    parameter_type_list_opt -> empty
Rule 55    parameter_type_list_opt -> parameter_type_list
Rule 56    statement -> expression_statement
Rule 57    statement -> compound_statement
Rule 58    statement -> selection_statement
Rule 59    statement -> iteration_statement
Rule 60    statement -> jump_statement
Rule 61    expression_statement -> expression_opt SEMI
Rule 62    compound_statement -> LBRACE declaration_list statement_list RBRACE
Rule 63    compound_statement -> LBRACE statement_list RBRACE
Rule 64    compound_statement -> LBRACE declaration_list RBRACE
Rule 65    compound_statement -> LBRACE RBRACE
Rule 66    statement_list -> statement
Rule 67    statement_list -> statement_list statement
Rule 68    selection_statement -> IF LPAREN expression RPAREN statement
Rule 69    selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 70    iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 71    iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
Rule 72    jump_statement -> BREAK SEMI
Rule 73    jump_statement -> RETURN expression_opt SEMI
Rule 74    expression_opt -> empty
Rule 75    expression_opt -> expression
Rule 76    expression -> assignment_expression
Rule 77    expression -> expression COMMA assignment_expression
Rule 78    assignment_expression -> conditional_expression
Rule 79    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 80    assignment_operator -> EQUALS
Rule 81    conditional_expression -> logical_or_expression
Rule 82    constant_expression -> conditional_expression
Rule 83    logical_or_expression -> logical_and_expression
Rule 84    logical_or_expression -> logical_or_expression LOR logical_and_expression
Rule 85    logical_and_expression -> inclusive_or_expression
Rule 86    logical_and_expression -> logical_and_expression LAND inclusive_or_expression
Rule 87    inclusive_or_expression -> exclusive_or_expression
Rule 88    exclusive_or_expression -> and_expression
Rule 89    and_expression -> equality_expression
Rule 90    and_expression -> and_expression AND equality_expression
Rule 91    equality_expression -> relational_expression
Rule 92    equality_expression -> equality_expression EQ relational_expression
Rule 93    relational_expression -> shift_expression
Rule 94    relational_expression -> relational_expression LT shift_expression
Rule 95    relational_expression -> relational_expression GT shift_expression
Rule 96    relational_expression -> relational_expression LE shift_expression
Rule 97    relational_expression -> relational_expression GE shift_expression
Rule 98    shift_expression -> additive_expression
Rule 99    additive_expression -> multiplicative_expression
Rule 100   additive_expression -> additive_expression PLUS multiplicative_expression
Rule 101   additive_expression -> additive_expression MINUS multiplicative_expression
Rule 102   multiplicative_expression -> cast_expression
Rule 103   multiplicative_expression -> multiplicative_expression TIMES cast_expression
Rule 104   multiplicative_expression -> multiplicative_expression DIVIDE cast_expression
Rule 105   multiplicative_expression -> multiplicative_expression MOD cast_expression
Rule 106   cast_expression -> unary_expression
Rule 107   cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 108   unary_expression -> postfix_expression
Rule 109   unary_expression -> PLUSPLUS unary_expression
Rule 110   unary_expression -> MINUSMINUS unary_expression
Rule 111   unary_expression -> unary_operator cast_expression
Rule 112   unary_operator -> AND
Rule 113   unary_operator -> TIMES
Rule 114   unary_operator -> PLUS
Rule 115   unary_operator -> MINUS
Rule 116   unary_operator -> LNOT
Rule 117   postfix_expression -> primary_expression
Rule 118   postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 119   postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN
Rule 120   postfix_expression -> postfix_expression LPAREN RPAREN
Rule 121   postfix_expression -> postfix_expression PLUSPLUS
Rule 122   postfix_expression -> postfix_expression MINUSMINUS
Rule 123   primary_expression -> ID
Rule 124   primary_expression -> constant
Rule 125   primary_expression -> SCONST
Rule 126   primary_expression -> LPAREN expression RPAREN
Rule 127   argument_expression_list -> assignment_expression
Rule 128   argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 129   constant -> ICONST
Rule 130   constant -> FCONST
Rule 131   constant -> CCONST
Rule 132   empty -> <empty>

Terminals, with rules where they appear

AND                  : 90 112
BREAK                : 72
CCONST               : 131
COMMA                : 19 33 37 40 42 77 128
DIVIDE               : 104
ELSE                 : 69
EQ                   : 92
EQUALS               : 21 80
FCONST               : 130
FOR                  : 71
GE                   : 97
GT                   : 95
ICONST               : 129
ID                   : 25 36 37 123
IF                   : 68 69
INT                  : 16
LAND                 : 86
LBRACE               : 39 40 62 63 64 65
LBRACKET             : 27 48 49 118
LE                   : 96
LNOT                 : 116
LOR                  : 84
LPAREN               : 26 28 29 30 47 50 51 68 69 70 71 107 119 120 126
LT                   : 94
MINUS                : 101 115
MINUSMINUS           : 110 122
MOD                  : 105
PLUS                 : 100 114
PLUSPLUS             : 109 121
RBRACE               : 39 40 62 63 64 65
RBRACKET             : 27 48 49 118
RETURN               : 73
RPAREN               : 26 28 29 30 47 50 51 68 69 70 71 107 119 120 126
SCONST               : 125
SEMI                 : 9 10 61 71 71 72 73
TIMES                : 103 113
TYPEID               : 17
VOID                 : 15
WHILE                : 70
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 45 47
abstract_declarator_opt : 35 43
additive_expression  : 98 100 101
and_expression       : 88 90
argument_expression_list : 119 128
assignment_expression : 38 76 77 79 127 128
assignment_operator  : 79
cast_expression      : 102 103 104 105 107 111
compound_statement   : 5 6 7 8 57
conditional_expression : 78 82
constant             : 124
constant_expression  : 53
constant_expression_opt : 27 48 49
declaration          : 4 11 12
declaration_list     : 5 6 12 62 64
declaration_specifiers : 5 8 9 10 13 34 35
declarator           : 5 6 7 8 20 21 26 34
direct_abstract_declarator : 46 48 50
direct_declarator    : 24 27 28 29 30
empty                : 44 52 54 74
equality_expression  : 89 90 92
exclusive_or_expression : 87
expression           : 68 69 70 75 77 118 126
expression_opt       : 61 71 71 71 73
expression_statement : 56
external_declaration : 1 2
function_definition  : 3
identifier_list      : 29 37
inclusive_or_expression : 85 86
init_declarator      : 18 19
init_declarator_list : 9 19
initializer          : 21 41 42
initializer_list     : 39 40 42
iteration_statement  : 59
jump_statement       : 60
logical_and_expression : 83 84 86
logical_or_expression : 81 84
multiplicative_expression : 99 100 101 103 104 105
parameter_declaration : 32 33
parameter_list       : 31 33
parameter_type_list  : 28 55
parameter_type_list_opt : 50 51
postfix_expression   : 108 118 119 120 121 122
primary_expression   : 117
relational_expression : 91 92 94 95 96 97
selection_statement  : 58
shift_expression     : 93 94 95 96 97
specifier_qualifier_list : 22 43
statement            : 66 67 68 69 69 70 71
statement_list       : 62 63 67
translation_unit     : 2 0
type_name            : 107
type_specifier       : 13 14 22 23
unary_expression     : 79 106 109 110
unary_operator       : 111

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (1) translation_unit -> . external_declaration
    (2) translation_unit -> . translation_unit external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (5) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (6) function_definition -> . declarator declaration_list compound_statement
    (7) function_definition -> . declarator compound_statement
    (8) function_definition -> . declaration_specifiers declarator compound_statement
    (9) declaration -> . declaration_specifiers init_declarator_list SEMI
    (10) declaration -> . declaration_specifiers SEMI
    (13) declaration_specifiers -> . type_specifier declaration_specifiers
    (14) declaration_specifiers -> . type_specifier
    (24) declarator -> . direct_declarator
    (15) type_specifier -> . VOID
    (16) type_specifier -> . INT
    (17) type_specifier -> . TYPEID
    (25) direct_declarator -> . ID
    (26) direct_declarator -> . LPAREN declarator RPAREN
    (27) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (28) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (29) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (30) direct_declarator -> . direct_declarator LPAREN RPAREN

    VOID            shift and go to state 9
    INT             shift and go to state 10
    TYPEID          shift and go to state 11
    ID              shift and go to state 12
    LPAREN          shift and go to state 13

    translation_unit               shift and go to state 1
    external_declaration           shift and go to state 2
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 5
    declarator                     shift and go to state 6
    type_specifier                 shift and go to state 7
    direct_declarator              shift and go to state 8

state 1

    (0) S' -> translation_unit .
    (2) translation_unit -> translation_unit . external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (5) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (6) function_definition -> . declarator declaration_list compound_statement
    (7) function_definition -> . declarator compound_statement
    (8) function_definition -> . declaration_specifiers declarator compound_statement
    (9) declaration -> . declaration_specifiers init_declarator_list SEMI
    (10) declaration -> . declaration_specifiers SEMI
    (13) declaration_specifiers -> . type_specifier declaration_specifiers
    (14) declaration_specifiers -> . type_specifier
    (24) declarator -> . direct_declarator
    (15) type_specifier -> . VOID
    (16) type_specifier -> . INT
    (17) type_specifier -> . TYPEID
    (25) direct_declarator -> . ID
    (26) direct_declarator -> . LPAREN declarator RPAREN
    (27) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (28) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (29) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (30) direct_declarator -> . direct_declarator LPAREN RPAREN

    VOID            shift and go to state 9
    INT             shift and go to state 10
    TYPEID          shift and go to state 11
    ID              shift and go to state 12
    LPAREN          shift and go to state 13

    external_declaration           shift and go to state 14
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 5
    declarator                     shift and go to state 6
    type_specifier                 shift and go to state 7
    direct_declarator              shift and go to state 8

state 2

    (1) translation_unit -> external_declaration .

    VOID            reduce using rule 1 (translation_unit -> external_declaration .)
    INT             reduce using rule 1 (translation_unit -> external_declaration .)
    TYPEID          reduce using rule 1 (translation_unit -> external_declaration .)
    ID              reduce using rule 1 (translation_unit -> external_declaration .)
    LPAREN          reduce using rule 1 (translation_unit -> external_declaration .)
    $end            reduce using rule 1 (translation_unit -> external_declaration .)


state 3

    (3) external_declaration -> function_definition .

    VOID            reduce using rule 3 (external_declaration -> function_definition .)
    INT             reduce using rule 3 (external_declaration -> function_definition .)
    TYPEID          reduce using rule 3 (external_declaration -> function_definition .)
    ID              reduce using rule 3 (external_declaration -> function_definition .)
    LPAREN          reduce using rule 3 (external_declaration -> function_definition .)
    $end            reduce using rule 3 (external_declaration -> function_definition .)


state 4

    (4) external_declaration -> declaration .

    VOID            reduce using rule 4 (external_declaration -> declaration .)
    INT             reduce using rule 4 (external_declaration -> declaration .)
    TYPEID          reduce using rule 4 (external_declaration -> declaration .)
    ID              reduce using rule 4 (external_declaration -> declaration .)
    LPAREN          reduce using rule 4 (external_declaration -> declaration .)
    $end            reduce using rule 4 (external_declaration -> declaration .)


state 5

    (5) function_definition -> declaration_specifiers . declarator declaration_list compound_statement
    (8) function_definition -> declaration_specifiers . declarator compound_statement
    (9) declaration -> declaration_specifiers . init_declarator_list SEMI
    (10) declaration -> declaration_specifiers . SEMI
    (24) declarator -> . direct_declarator
    (18) init_declarator_list -> . init_declarator
    (19) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (25) direct_declarator -> . ID
    (26) direct_declarator -> . LPAREN declarator RPAREN
    (27) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (28) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (29) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (30) direct_declarator -> . direct_declarator LPAREN RPAREN
    (20) init_declarator -> . declarator
    (21) init_declarator -> . declarator EQUALS initializer

    SEMI            shift and go to state 17
    ID              shift and go to state 12
    LPAREN          shift and go to state 13

    declarator                     shift and go to state 15
    init_declarator_list           shift and go to state 16
    direct_declarator              shift and go to state 8
    init_declarator                shift and go to state 18

state 6

    (6) function_definition -> declarator . declaration_list compound_statement
    (7) function_definition -> declarator . compound_statement
    (11) declaration_list -> . declaration
    (12) declaration_list -> . declaration_list declaration
    (62) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (63) compound_statement -> . LBRACE statement_list RBRACE
    (64) compound_statement -> . LBRACE declaration_list RBRACE
    (65) compound_statement -> . LBRACE RBRACE
    (9) declaration -> . declaration_specifiers init_declarator_list SEMI
    (10) declaration -> . declaration_specifiers SEMI
    (13) declaration_specifiers -> . type_specifier declaration_specifiers
    (14) declaration_specifiers -> . type_specifier
    (15) type_specifier -> . VOID
    (16) type_specifier -> . INT
    (17) type_specifier -> . TYPEID

    LBRACE          shift and go to state 22
    VOID            shift and go to state 9
    INT             shift and go to state 10
    TYPEID          shift and go to state 11

    declaration_list               shift and go to state 19
    compound_statement             shift and go to state 20
    declaration                    shift and go to state 21
    declaration_specifiers         shift and go to state 23
    type_specifier                 shift and go to state 7

state 7

    (13) declaration_specifiers -> type_specifier . declaration_specifiers
    (14) declaration_specifiers -> type_specifier .
    (13) declaration_specifiers -> . type_specifier declaration_specifiers
    (14) declaration_specifiers -> . type_specifier
    (15) type_specifier -> . VOID
    (16) type_specifier -> . INT
    (17) type_specifier -> . TYPEID

    SEMI            reduce using rule 14 (declaration_specifiers -> type_specifier .)
    ID              reduce using rule 14 (declaration_specifiers -> type_specifier .)
    LPAREN          reduce using rule 14 (declaration_specifiers -> type_specifier .)
    LBRACKET        reduce using rule 14 (declaration_specifiers -> type_specifier .)
    COMMA           reduce using rule 14 (declaration_specifiers -> type_specifier .)
    RPAREN          reduce using rule 14 (declaration_specifiers -> type_specifier .)
    VOID            shift and go to state 9
    INT             shift and go to state 10
    TYPEID          shift and go to state 11

    type_specifier                 shift and go to state 7
    declaration_specifiers         shift and go to state 24

state 8

    (24) declarator -> direct_declarator .
    (27) direct_declarator -> direct_declarator . LBRACKET constant_expression_opt RBRACKET
    (28) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (29) direct_declarator -> direct_declarator . LPAREN identifier_list RPAREN
    (30) direct_declarator -> direct_declarator . LPAREN RPAREN

    LBRACE          reduce using rule 24 (declarator -> direct_declarator .)
    VOID            reduce using rule 24 (declarator -> direct_declarator .)
    INT             reduce using rule 24 (declarator -> direct_declarator .)
    TYPEID          reduce using rule 24 (declarator -> direct_declarator .)
    EQUALS          reduce using rule 24 (declarator -> direct_declarator .)
    SEMI            reduce using rule 24 (declarator -> direct_declarator .)
    COMMA           reduce using rule 24 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 24 (declarator -> direct_declarator .)
    LBRACKET        shift and go to state 25
    LPAREN          shift and go to state 26


state 9

    (15) type_specifier -> VOID .

    VOID            reduce using rule 15 (type_specifier -> VOID .)
    INT             reduce using rule 15 (type_specifier -> VOID .)
    TYPEID          reduce using rule 15 (type_specifier -> VOID .)
    SEMI            reduce using rule 15 (type_specifier -> VOID .)
    ID              reduce using rule 15 (type_specifier -> VOID .)
    LPAREN          reduce using rule 15 (type_specifier -> VOID .)
    LBRACKET        reduce using rule 15 (type_specifier -> VOID .)
    COMMA           reduce using rule 15 (type_specifier -> VOID .)
    RPAREN          reduce using rule 15 (type_specifier -> VOID .)


state 10

    (16) type_specifier -> INT .

    VOID            reduce using rule 16 (type_specifier -> INT .)
    INT             reduce using rule 16 (type_specifier -> INT .)
    TYPEID          reduce using rule 16 (type_specifier -> INT .)
    SEMI            reduce using rule 16 (type_specifier -> INT .)
    ID              reduce using rule 16 (type_specifier -> INT .)
    LPAREN          reduce using rule 16 (type_specifier -> INT .)
    LBRACKET        reduce using rule 16 (type_specifier -> INT .)
    COMMA           reduce using rule 16 (type_specifier -> INT .)
    RPAREN          reduce using rule 16 (type_specifier -> INT .)


state 11

    (17) type_specifier -> TYPEID .

    VOID            reduce using rule 17 (type_specifier -> TYPEID .)
    INT             reduce using rule 17 (type_specifier -> TYPEID .)
    TYPEID          reduce using rule 17 (type_specifier -> TYPEID .)
    SEMI            reduce using rule 17 (type_specifier -> TYPEID .)
    ID              reduce using rule 17 (type_specifier -> TYPEID .)
    LPAREN          reduce using rule 17 (type_specifier -> TYPEID .)
    LBRACKET        reduce using rule 17 (type_specifier -> TYPEID .)
    COMMA           reduce using rule 17 (type_specifier -> TYPEID .)
    RPAREN          reduce using rule 17 (type_specifier -> TYPEID .)


state 12

    (25) direct_declarator -> ID .

    LBRACKET        reduce using rule 25 (direct_declarator -> ID .)
    LPAREN          reduce using rule 25 (direct_declarator -> ID .)
    LBRACE          reduce using rule 25 (direct_declarator -> ID .)
    VOID            reduce using rule 25 (direct_declarator -> ID .)
    INT             reduce using rule 25 (direct_declarator -> ID .)
    TYPEID          reduce using rule 25 (direct_declarator -> ID .)
    EQUALS          reduce using rule 25 (direct_declarator -> ID .)
    SEMI            reduce using rule 25 (direct_declarator -> ID .)
    COMMA           reduce using rule 25 (direct_declarator -> ID .)
    RPAREN          reduce using rule 25 (direct_declarator -> ID .)


state 13

    (26) direct_declarator -> LPAREN . declarator RPAREN
    (24) declarator -> . direct_declarator
    (25) direct_declarator -> . ID
    (26) direct_declarator -> . LPAREN declarator RPAREN
    (27) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (28) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (29) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (30) direct_declarator -> . direct_declarator LPAREN RPAREN

    ID              shift and go to state 12
    LPAREN          shift and go to state 13

    declarator                     shift and go to state 27
    direct_declarator              shift and go to state 8

state 14

    (2) translation_unit -> translation_unit external_declaration .

    VOID            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    TYPEID          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    ID              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LPAREN          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)


state 15

    (5) function_definition -> declaration_specifiers declarator . declaration_list compound_statement
    (8) function_definition -> declaration_specifiers declarator . compound_statement
    (20) init_declarator -> declarator .
    (21) init_declarator -> declarator . EQUALS initializer
    (11) declaration_list -> . declaration
    (12) declaration_list -> . declaration_list declaration
    (62) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (63) compound_statement -> . LBRACE statement_list RBRACE
    (64) compound_statement -> . LBRACE declaration_list RBRACE
    (65) compound_statement -> . LBRACE RBRACE
    (9) declaration -> . declaration_specifiers init_declarator_list SEMI
    (10) declaration -> . declaration_specifiers SEMI
    (13) declaration_specifiers -> . type_specifier declaration_specifiers
    (14) declaration_specifiers -> . type_specifier
    (15) type_specifier -> . VOID
    (16) type_specifier -> . INT
    (17) type_specifier -> . TYPEID

    SEMI            reduce using rule 20 (init_declarator -> declarator .)
    COMMA           reduce using rule 20 (init_declarator -> declarator .)
    EQUALS          shift and go to state 30
    LBRACE          shift and go to state 22
    VOID            shift and go to state 9
    INT             shift and go to state 10
    TYPEID          shift and go to state 11

    declaration_specifiers         shift and go to state 23
    declaration_list               shift and go to state 28
    compound_statement             shift and go to state 29
    declaration                    shift and go to state 21
    type_specifier                 shift and go to state 7

state 16

    (9) declaration -> declaration_specifiers init_declarator_list . SEMI
    (19) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            shift and go to state 31
    COMMA           shift and go to state 32


state 17

    (10) declaration -> declaration_specifiers SEMI .

    VOID            reduce using rule 10 (declaration -> declaration_specifiers SEMI .)
    INT             reduce using rule 10 (declaration -> declaration_specifiers SEMI .)
    TYPEID          reduce using rule 10 (declaration -> declaration_specifiers SEMI .)
    ID              reduce using rule 10 (declaration -> declaration_specifiers SEMI .)
    LPAREN          reduce using rule 10 (declaration -> declaration_specifiers SEMI .)
    $end            reduce using rule 10 (declaration -> declaration_specifiers SEMI .)
    LBRACE          reduce using rule 10 (declaration -> declaration_specifiers SEMI .)
    RBRACE          reduce using rule 10 (declaration -> declaration_specifiers SEMI .)
    IF              reduce using rule 10 (declaration -> declaration_specifiers SEMI .)
    WHILE           reduce using rule 10 (declaration -> declaration_specifiers SEMI .)
    FOR             reduce using rule 10 (declaration -> declaration_specifiers SEMI .)
    BREAK           reduce using rule 10 (declaration -> declaration_specifiers SEMI .)
    RETURN          reduce using rule 10 (declaration -> declaration_specifiers SEMI .)
    PLUSPLUS        reduce using rule 10 (declaration -> declaration_specifiers SEMI .)
    MINUSMINUS      reduce using rule 10 (declaration -> declaration_specifiers SEMI .)
    AND             reduce using rule 10 (declaration -> declaration_specifiers SEMI .)
    TIMES           reduce using rule 10 (declaration -> declaration_specifiers SEMI .)
    PLUS            reduce using rule 10 (declaration -> declaration_specifiers SEMI .)
    MINUS           reduce using rule 10 (declaration -> declaration_specifiers SEMI .)
    LNOT            reduce using rule 10 (declaration -> declaration_specifiers SEMI .)
    SCONST          reduce using rule 10 (declaration -> declaration_specifiers SEMI .)
    ICONST          reduce using rule 10 (declaration -> declaration_specifiers SEMI .)
    FCONST          reduce using rule 10 (declaration -> declaration_specifiers SEMI .)
    CCONST          reduce using rule 10 (declaration -> declaration_specifiers SEMI .)
    SEMI            reduce using rule 10 (declaration -> declaration_specifiers SEMI .)


state 18

    (18) init_declarator_list -> init_declarator .

    SEMI            reduce using rule 18 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 18 (init_declarator_list -> init_declarator .)


state 19

    (6) function_definition -> declarator declaration_list . compound_statement
    (12) declaration_list -> declaration_list . declaration
    (62) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (63) compound_statement -> . LBRACE statement_list RBRACE
    (64) compound_statement -> . LBRACE declaration_list RBRACE
    (65) compound_statement -> . LBRACE RBRACE
    (9) declaration -> . declaration_specifiers init_declarator_list SEMI
    (10) declaration -> . declaration_specifiers SEMI
    (13) declaration_specifiers -> . type_specifier declaration_specifiers
    (14) declaration_specifiers -> . type_specifier
    (15) type_specifier -> . VOID
    (16) type_specifier -> . INT
    (17) type_specifier -> . TYPEID

    LBRACE          shift and go to state 22
    VOID            shift and go to state 9
    INT             shift and go to state 10
    TYPEID          shift and go to state 11

    compound_statement             shift and go to state 33
    declaration                    shift and go to state 34
    declaration_specifiers         shift and go to state 23
    type_specifier                 shift and go to state 7

state 20

    (7) function_definition -> declarator compound_statement .

    VOID            reduce using rule 7 (function_definition -> declarator compound_statement .)
    INT             reduce using rule 7 (function_definition -> declarator compound_statement .)
    TYPEID          reduce using rule 7 (function_definition -> declarator compound_statement .)
    ID              reduce using rule 7 (function_definition -> declarator compound_statement .)
    LPAREN          reduce using rule 7 (function_definition -> declarator compound_statement .)
    $end            reduce using rule 7 (function_definition -> declarator compound_statement .)


state 21

    (11) declaration_list -> declaration .

    LBRACE          reduce using rule 11 (declaration_list -> declaration .)
    VOID            reduce using rule 11 (declaration_list -> declaration .)
    INT             reduce using rule 11 (declaration_list -> declaration .)
    TYPEID          reduce using rule 11 (declaration_list -> declaration .)
    RBRACE          reduce using rule 11 (declaration_list -> declaration .)
    IF              reduce using rule 11 (declaration_list -> declaration .)
    WHILE           reduce using rule 11 (declaration_list -> declaration .)
    FOR             reduce using rule 11 (declaration_list -> declaration .)
    BREAK           reduce using rule 11 (declaration_list -> declaration .)
    RETURN          reduce using rule 11 (declaration_list -> declaration .)
    PLUSPLUS        reduce using rule 11 (declaration_list -> declaration .)
    MINUSMINUS      reduce using rule 11 (declaration_list -> declaration .)
    AND             reduce using rule 11 (declaration_list -> declaration .)
    TIMES           reduce using rule 11 (declaration_list -> declaration .)
    PLUS            reduce using rule 11 (declaration_list -> declaration .)
    MINUS           reduce using rule 11 (declaration_list -> declaration .)
    LNOT            reduce using rule 11 (declaration_list -> declaration .)
    ID              reduce using rule 11 (declaration_list -> declaration .)
    SCONST          reduce using rule 11 (declaration_list -> declaration .)
    LPAREN          reduce using rule 11 (declaration_list -> declaration .)
    ICONST          reduce using rule 11 (declaration_list -> declaration .)
    FCONST          reduce using rule 11 (declaration_list -> declaration .)
    CCONST          reduce using rule 11 (declaration_list -> declaration .)
    SEMI            reduce using rule 11 (declaration_list -> declaration .)


state 22

    (62) compound_statement -> LBRACE . declaration_list statement_list RBRACE
    (63) compound_statement -> LBRACE . statement_list RBRACE
    (64) compound_statement -> LBRACE . declaration_list RBRACE
    (65) compound_statement -> LBRACE . RBRACE
    (11) declaration_list -> . declaration
    (12) declaration_list -> . declaration_list declaration
    (66) statement_list -> . statement
    (67) statement_list -> . statement_list statement
    (9) declaration -> . declaration_specifiers init_declarator_list SEMI
    (10) declaration -> . declaration_specifiers SEMI
    (56) statement -> . expression_statement
    (57) statement -> . compound_statement
    (58) statement -> . selection_statement
    (59) statement -> . iteration_statement
    (60) statement -> . jump_statement
    (13) declaration_specifiers -> . type_specifier declaration_specifiers
    (14) declaration_specifiers -> . type_specifier
    (61) expression_statement -> . expression_opt SEMI
    (62) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (63) compound_statement -> . LBRACE statement_list RBRACE
    (64) compound_statement -> . LBRACE declaration_list RBRACE
    (65) compound_statement -> . LBRACE RBRACE
    (68) selection_statement -> . IF LPAREN expression RPAREN statement
    (69) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (70) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (71) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (72) jump_statement -> . BREAK SEMI
    (73) jump_statement -> . RETURN expression_opt SEMI
    (15) type_specifier -> . VOID
    (16) type_specifier -> . INT
    (17) type_specifier -> . TYPEID
    (74) expression_opt -> . empty
    (75) expression_opt -> . expression
    (132) empty -> .
    (76) expression -> . assignment_expression
    (77) expression -> . expression COMMA assignment_expression
    (78) assignment_expression -> . conditional_expression
    (79) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (87) inclusive_or_expression -> . exclusive_or_expression
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 37
    LBRACE          shift and go to state 22
    IF              shift and go to state 45
    WHILE           shift and go to state 48
    FOR             shift and go to state 49
    BREAK           shift and go to state 50
    RETURN          shift and go to state 51
    VOID            shift and go to state 9
    INT             shift and go to state 10
    TYPEID          shift and go to state 11
    SEMI            reduce using rule 132 (empty -> .)
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    LPAREN          shift and go to state 46
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    declaration_list               shift and go to state 35
    statement_list                 shift and go to state 36
    declaration                    shift and go to state 21
    statement                      shift and go to state 38
    declaration_specifiers         shift and go to state 23
    expression_statement           shift and go to state 39
    compound_statement             shift and go to state 40
    selection_statement            shift and go to state 41
    iteration_statement            shift and go to state 42
    jump_statement                 shift and go to state 43
    type_specifier                 shift and go to state 7
    expression_opt                 shift and go to state 44
    expression                     shift and go to state 47
    empty                          shift and go to state 52
    assignment_expression          shift and go to state 53
    conditional_expression         shift and go to state 54
    unary_expression               shift and go to state 55
    logical_or_expression          shift and go to state 56
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 61
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 69
    constant                       shift and go to state 71
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82

state 23

    (9) declaration -> declaration_specifiers . init_declarator_list SEMI
    (10) declaration -> declaration_specifiers . SEMI
    (18) init_declarator_list -> . init_declarator
    (19) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (20) init_declarator -> . declarator
    (21) init_declarator -> . declarator EQUALS initializer
    (24) declarator -> . direct_declarator
    (25) direct_declarator -> . ID
    (26) direct_declarator -> . LPAREN declarator RPAREN
    (27) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (28) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (29) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (30) direct_declarator -> . direct_declarator LPAREN RPAREN

    SEMI            shift and go to state 17
    ID              shift and go to state 12
    LPAREN          shift and go to state 13

    init_declarator_list           shift and go to state 16
    init_declarator                shift and go to state 18
    declarator                     shift and go to state 83
    direct_declarator              shift and go to state 8

state 24

    (13) declaration_specifiers -> type_specifier declaration_specifiers .

    SEMI            reduce using rule 13 (declaration_specifiers -> type_specifier declaration_specifiers .)
    ID              reduce using rule 13 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LPAREN          reduce using rule 13 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LBRACKET        reduce using rule 13 (declaration_specifiers -> type_specifier declaration_specifiers .)
    COMMA           reduce using rule 13 (declaration_specifiers -> type_specifier declaration_specifiers .)
    RPAREN          reduce using rule 13 (declaration_specifiers -> type_specifier declaration_specifiers .)


state 25

    (27) direct_declarator -> direct_declarator LBRACKET . constant_expression_opt RBRACKET
    (52) constant_expression_opt -> . empty
    (53) constant_expression_opt -> . constant_expression
    (132) empty -> .
    (82) constant_expression -> . conditional_expression
    (81) conditional_expression -> . logical_or_expression
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (87) inclusive_or_expression -> . exclusive_or_expression
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST

    RBRACKET        reduce using rule 132 (empty -> .)
    LPAREN          shift and go to state 89
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    constant_expression_opt        shift and go to state 84
    empty                          shift and go to state 85
    constant_expression            shift and go to state 86
    conditional_expression         shift and go to state 87
    logical_or_expression          shift and go to state 56
    logical_and_expression         shift and go to state 62
    inclusive_or_expression        shift and go to state 69
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82
    cast_expression                shift and go to state 61
    unary_expression               shift and go to state 88
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    primary_expression             shift and go to state 63
    constant                       shift and go to state 71

state 26

    (28) direct_declarator -> direct_declarator LPAREN . parameter_type_list RPAREN
    (29) direct_declarator -> direct_declarator LPAREN . identifier_list RPAREN
    (30) direct_declarator -> direct_declarator LPAREN . RPAREN
    (31) parameter_type_list -> . parameter_list
    (36) identifier_list -> . ID
    (37) identifier_list -> . identifier_list COMMA ID
    (32) parameter_list -> . parameter_declaration
    (33) parameter_list -> . parameter_list COMMA parameter_declaration
    (34) parameter_declaration -> . declaration_specifiers declarator
    (35) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (13) declaration_specifiers -> . type_specifier declaration_specifiers
    (14) declaration_specifiers -> . type_specifier
    (15) type_specifier -> . VOID
    (16) type_specifier -> . INT
    (17) type_specifier -> . TYPEID

    RPAREN          shift and go to state 91
    ID              shift and go to state 94
    VOID            shift and go to state 9
    INT             shift and go to state 10
    TYPEID          shift and go to state 11

    parameter_type_list            shift and go to state 90
    identifier_list                shift and go to state 92
    parameter_list                 shift and go to state 93
    parameter_declaration          shift and go to state 95
    declaration_specifiers         shift and go to state 96
    type_specifier                 shift and go to state 7

state 27

    (26) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 97


state 28

    (5) function_definition -> declaration_specifiers declarator declaration_list . compound_statement
    (12) declaration_list -> declaration_list . declaration
    (62) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (63) compound_statement -> . LBRACE statement_list RBRACE
    (64) compound_statement -> . LBRACE declaration_list RBRACE
    (65) compound_statement -> . LBRACE RBRACE
    (9) declaration -> . declaration_specifiers init_declarator_list SEMI
    (10) declaration -> . declaration_specifiers SEMI
    (13) declaration_specifiers -> . type_specifier declaration_specifiers
    (14) declaration_specifiers -> . type_specifier
    (15) type_specifier -> . VOID
    (16) type_specifier -> . INT
    (17) type_specifier -> . TYPEID

    LBRACE          shift and go to state 22
    VOID            shift and go to state 9
    INT             shift and go to state 10
    TYPEID          shift and go to state 11

    declaration_specifiers         shift and go to state 23
    compound_statement             shift and go to state 98
    declaration                    shift and go to state 34
    type_specifier                 shift and go to state 7

state 29

    (8) function_definition -> declaration_specifiers declarator compound_statement .

    VOID            reduce using rule 8 (function_definition -> declaration_specifiers declarator compound_statement .)
    INT             reduce using rule 8 (function_definition -> declaration_specifiers declarator compound_statement .)
    TYPEID          reduce using rule 8 (function_definition -> declaration_specifiers declarator compound_statement .)
    ID              reduce using rule 8 (function_definition -> declaration_specifiers declarator compound_statement .)
    LPAREN          reduce using rule 8 (function_definition -> declaration_specifiers declarator compound_statement .)
    $end            reduce using rule 8 (function_definition -> declaration_specifiers declarator compound_statement .)


state 30

    (21) init_declarator -> declarator EQUALS . initializer
    (38) initializer -> . assignment_expression
    (39) initializer -> . LBRACE initializer_list RBRACE
    (40) initializer -> . LBRACE initializer_list COMMA RBRACE
    (78) assignment_expression -> . conditional_expression
    (79) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (87) inclusive_or_expression -> . exclusive_or_expression
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 101
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    LPAREN          shift and go to state 46
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    initializer                    shift and go to state 99
    assignment_expression          shift and go to state 100
    conditional_expression         shift and go to state 54
    unary_expression               shift and go to state 55
    logical_or_expression          shift and go to state 56
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 61
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 69
    constant                       shift and go to state 71
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82

state 31

    (9) declaration -> declaration_specifiers init_declarator_list SEMI .

    VOID            reduce using rule 9 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    INT             reduce using rule 9 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TYPEID          reduce using rule 9 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    ID              reduce using rule 9 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LPAREN          reduce using rule 9 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    $end            reduce using rule 9 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LBRACE          reduce using rule 9 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    RBRACE          reduce using rule 9 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    IF              reduce using rule 9 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    WHILE           reduce using rule 9 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FOR             reduce using rule 9 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    BREAK           reduce using rule 9 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    RETURN          reduce using rule 9 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    PLUSPLUS        reduce using rule 9 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    MINUSMINUS      reduce using rule 9 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    AND             reduce using rule 9 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TIMES           reduce using rule 9 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    PLUS            reduce using rule 9 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    MINUS           reduce using rule 9 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LNOT            reduce using rule 9 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SCONST          reduce using rule 9 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    ICONST          reduce using rule 9 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FCONST          reduce using rule 9 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CCONST          reduce using rule 9 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SEMI            reduce using rule 9 (declaration -> declaration_specifiers init_declarator_list SEMI .)


state 32

    (19) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (20) init_declarator -> . declarator
    (21) init_declarator -> . declarator EQUALS initializer
    (24) declarator -> . direct_declarator
    (25) direct_declarator -> . ID
    (26) direct_declarator -> . LPAREN declarator RPAREN
    (27) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (28) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (29) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (30) direct_declarator -> . direct_declarator LPAREN RPAREN

    ID              shift and go to state 12
    LPAREN          shift and go to state 13

    init_declarator                shift and go to state 102
    declarator                     shift and go to state 83
    direct_declarator              shift and go to state 8

state 33

    (6) function_definition -> declarator declaration_list compound_statement .

    VOID            reduce using rule 6 (function_definition -> declarator declaration_list compound_statement .)
    INT             reduce using rule 6 (function_definition -> declarator declaration_list compound_statement .)
    TYPEID          reduce using rule 6 (function_definition -> declarator declaration_list compound_statement .)
    ID              reduce using rule 6 (function_definition -> declarator declaration_list compound_statement .)
    LPAREN          reduce using rule 6 (function_definition -> declarator declaration_list compound_statement .)
    $end            reduce using rule 6 (function_definition -> declarator declaration_list compound_statement .)


state 34

    (12) declaration_list -> declaration_list declaration .

    LBRACE          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 12 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 12 (declaration_list -> declaration_list declaration .)
    TYPEID          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    RBRACE          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 12 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 12 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 12 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 12 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    PLUSPLUS        reduce using rule 12 (declaration_list -> declaration_list declaration .)
    MINUSMINUS      reduce using rule 12 (declaration_list -> declaration_list declaration .)
    AND             reduce using rule 12 (declaration_list -> declaration_list declaration .)
    TIMES           reduce using rule 12 (declaration_list -> declaration_list declaration .)
    PLUS            reduce using rule 12 (declaration_list -> declaration_list declaration .)
    MINUS           reduce using rule 12 (declaration_list -> declaration_list declaration .)
    LNOT            reduce using rule 12 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 12 (declaration_list -> declaration_list declaration .)
    SCONST          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    LPAREN          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    ICONST          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    FCONST          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    CCONST          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    SEMI            reduce using rule 12 (declaration_list -> declaration_list declaration .)


state 35

    (62) compound_statement -> LBRACE declaration_list . statement_list RBRACE
    (64) compound_statement -> LBRACE declaration_list . RBRACE
    (12) declaration_list -> declaration_list . declaration
    (66) statement_list -> . statement
    (67) statement_list -> . statement_list statement
    (9) declaration -> . declaration_specifiers init_declarator_list SEMI
    (10) declaration -> . declaration_specifiers SEMI
    (56) statement -> . expression_statement
    (57) statement -> . compound_statement
    (58) statement -> . selection_statement
    (59) statement -> . iteration_statement
    (60) statement -> . jump_statement
    (13) declaration_specifiers -> . type_specifier declaration_specifiers
    (14) declaration_specifiers -> . type_specifier
    (61) expression_statement -> . expression_opt SEMI
    (62) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (63) compound_statement -> . LBRACE statement_list RBRACE
    (64) compound_statement -> . LBRACE declaration_list RBRACE
    (65) compound_statement -> . LBRACE RBRACE
    (68) selection_statement -> . IF LPAREN expression RPAREN statement
    (69) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (70) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (71) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (72) jump_statement -> . BREAK SEMI
    (73) jump_statement -> . RETURN expression_opt SEMI
    (15) type_specifier -> . VOID
    (16) type_specifier -> . INT
    (17) type_specifier -> . TYPEID
    (74) expression_opt -> . empty
    (75) expression_opt -> . expression
    (132) empty -> .
    (76) expression -> . assignment_expression
    (77) expression -> . expression COMMA assignment_expression
    (78) assignment_expression -> . conditional_expression
    (79) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (87) inclusive_or_expression -> . exclusive_or_expression
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 104
    LBRACE          shift and go to state 22
    IF              shift and go to state 45
    WHILE           shift and go to state 48
    FOR             shift and go to state 49
    BREAK           shift and go to state 50
    RETURN          shift and go to state 51
    VOID            shift and go to state 9
    INT             shift and go to state 10
    TYPEID          shift and go to state 11
    SEMI            reduce using rule 132 (empty -> .)
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    LPAREN          shift and go to state 46
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    statement_list                 shift and go to state 103
    declaration                    shift and go to state 34
    statement                      shift and go to state 38
    declaration_specifiers         shift and go to state 23
    expression_statement           shift and go to state 39
    compound_statement             shift and go to state 40
    selection_statement            shift and go to state 41
    iteration_statement            shift and go to state 42
    jump_statement                 shift and go to state 43
    type_specifier                 shift and go to state 7
    expression_opt                 shift and go to state 44
    expression                     shift and go to state 47
    empty                          shift and go to state 52
    assignment_expression          shift and go to state 53
    conditional_expression         shift and go to state 54
    unary_expression               shift and go to state 55
    logical_or_expression          shift and go to state 56
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 61
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 69
    constant                       shift and go to state 71
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82

state 36

    (63) compound_statement -> LBRACE statement_list . RBRACE
    (67) statement_list -> statement_list . statement
    (56) statement -> . expression_statement
    (57) statement -> . compound_statement
    (58) statement -> . selection_statement
    (59) statement -> . iteration_statement
    (60) statement -> . jump_statement
    (61) expression_statement -> . expression_opt SEMI
    (62) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (63) compound_statement -> . LBRACE statement_list RBRACE
    (64) compound_statement -> . LBRACE declaration_list RBRACE
    (65) compound_statement -> . LBRACE RBRACE
    (68) selection_statement -> . IF LPAREN expression RPAREN statement
    (69) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (70) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (71) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (72) jump_statement -> . BREAK SEMI
    (73) jump_statement -> . RETURN expression_opt SEMI
    (74) expression_opt -> . empty
    (75) expression_opt -> . expression
    (132) empty -> .
    (76) expression -> . assignment_expression
    (77) expression -> . expression COMMA assignment_expression
    (78) assignment_expression -> . conditional_expression
    (79) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (87) inclusive_or_expression -> . exclusive_or_expression
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 105
    LBRACE          shift and go to state 22
    IF              shift and go to state 45
    WHILE           shift and go to state 48
    FOR             shift and go to state 49
    BREAK           shift and go to state 50
    RETURN          shift and go to state 51
    SEMI            reduce using rule 132 (empty -> .)
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    LPAREN          shift and go to state 46
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    statement                      shift and go to state 106
    expression_statement           shift and go to state 39
    compound_statement             shift and go to state 40
    selection_statement            shift and go to state 41
    iteration_statement            shift and go to state 42
    jump_statement                 shift and go to state 43
    expression_opt                 shift and go to state 44
    expression                     shift and go to state 47
    empty                          shift and go to state 52
    assignment_expression          shift and go to state 53
    conditional_expression         shift and go to state 54
    unary_expression               shift and go to state 55
    logical_or_expression          shift and go to state 56
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 61
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 69
    constant                       shift and go to state 71
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82

state 37

    (65) compound_statement -> LBRACE RBRACE .

    VOID            reduce using rule 65 (compound_statement -> LBRACE RBRACE .)
    INT             reduce using rule 65 (compound_statement -> LBRACE RBRACE .)
    TYPEID          reduce using rule 65 (compound_statement -> LBRACE RBRACE .)
    ID              reduce using rule 65 (compound_statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 65 (compound_statement -> LBRACE RBRACE .)
    $end            reduce using rule 65 (compound_statement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 65 (compound_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 65 (compound_statement -> LBRACE RBRACE .)
    IF              reduce using rule 65 (compound_statement -> LBRACE RBRACE .)
    WHILE           reduce using rule 65 (compound_statement -> LBRACE RBRACE .)
    FOR             reduce using rule 65 (compound_statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 65 (compound_statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 65 (compound_statement -> LBRACE RBRACE .)
    PLUSPLUS        reduce using rule 65 (compound_statement -> LBRACE RBRACE .)
    MINUSMINUS      reduce using rule 65 (compound_statement -> LBRACE RBRACE .)
    AND             reduce using rule 65 (compound_statement -> LBRACE RBRACE .)
    TIMES           reduce using rule 65 (compound_statement -> LBRACE RBRACE .)
    PLUS            reduce using rule 65 (compound_statement -> LBRACE RBRACE .)
    MINUS           reduce using rule 65 (compound_statement -> LBRACE RBRACE .)
    LNOT            reduce using rule 65 (compound_statement -> LBRACE RBRACE .)
    SCONST          reduce using rule 65 (compound_statement -> LBRACE RBRACE .)
    ICONST          reduce using rule 65 (compound_statement -> LBRACE RBRACE .)
    FCONST          reduce using rule 65 (compound_statement -> LBRACE RBRACE .)
    CCONST          reduce using rule 65 (compound_statement -> LBRACE RBRACE .)
    SEMI            reduce using rule 65 (compound_statement -> LBRACE RBRACE .)
    ELSE            reduce using rule 65 (compound_statement -> LBRACE RBRACE .)


state 38

    (66) statement_list -> statement .

    RBRACE          reduce using rule 66 (statement_list -> statement .)
    LBRACE          reduce using rule 66 (statement_list -> statement .)
    IF              reduce using rule 66 (statement_list -> statement .)
    WHILE           reduce using rule 66 (statement_list -> statement .)
    FOR             reduce using rule 66 (statement_list -> statement .)
    BREAK           reduce using rule 66 (statement_list -> statement .)
    RETURN          reduce using rule 66 (statement_list -> statement .)
    PLUSPLUS        reduce using rule 66 (statement_list -> statement .)
    MINUSMINUS      reduce using rule 66 (statement_list -> statement .)
    AND             reduce using rule 66 (statement_list -> statement .)
    TIMES           reduce using rule 66 (statement_list -> statement .)
    PLUS            reduce using rule 66 (statement_list -> statement .)
    MINUS           reduce using rule 66 (statement_list -> statement .)
    LNOT            reduce using rule 66 (statement_list -> statement .)
    ID              reduce using rule 66 (statement_list -> statement .)
    SCONST          reduce using rule 66 (statement_list -> statement .)
    LPAREN          reduce using rule 66 (statement_list -> statement .)
    ICONST          reduce using rule 66 (statement_list -> statement .)
    FCONST          reduce using rule 66 (statement_list -> statement .)
    CCONST          reduce using rule 66 (statement_list -> statement .)
    SEMI            reduce using rule 66 (statement_list -> statement .)


state 39

    (56) statement -> expression_statement .

    RBRACE          reduce using rule 56 (statement -> expression_statement .)
    LBRACE          reduce using rule 56 (statement -> expression_statement .)
    IF              reduce using rule 56 (statement -> expression_statement .)
    WHILE           reduce using rule 56 (statement -> expression_statement .)
    FOR             reduce using rule 56 (statement -> expression_statement .)
    BREAK           reduce using rule 56 (statement -> expression_statement .)
    RETURN          reduce using rule 56 (statement -> expression_statement .)
    PLUSPLUS        reduce using rule 56 (statement -> expression_statement .)
    MINUSMINUS      reduce using rule 56 (statement -> expression_statement .)
    AND             reduce using rule 56 (statement -> expression_statement .)
    TIMES           reduce using rule 56 (statement -> expression_statement .)
    PLUS            reduce using rule 56 (statement -> expression_statement .)
    MINUS           reduce using rule 56 (statement -> expression_statement .)
    LNOT            reduce using rule 56 (statement -> expression_statement .)
    ID              reduce using rule 56 (statement -> expression_statement .)
    SCONST          reduce using rule 56 (statement -> expression_statement .)
    LPAREN          reduce using rule 56 (statement -> expression_statement .)
    ICONST          reduce using rule 56 (statement -> expression_statement .)
    FCONST          reduce using rule 56 (statement -> expression_statement .)
    CCONST          reduce using rule 56 (statement -> expression_statement .)
    SEMI            reduce using rule 56 (statement -> expression_statement .)
    ELSE            reduce using rule 56 (statement -> expression_statement .)


state 40

    (57) statement -> compound_statement .

    RBRACE          reduce using rule 57 (statement -> compound_statement .)
    LBRACE          reduce using rule 57 (statement -> compound_statement .)
    IF              reduce using rule 57 (statement -> compound_statement .)
    WHILE           reduce using rule 57 (statement -> compound_statement .)
    FOR             reduce using rule 57 (statement -> compound_statement .)
    BREAK           reduce using rule 57 (statement -> compound_statement .)
    RETURN          reduce using rule 57 (statement -> compound_statement .)
    PLUSPLUS        reduce using rule 57 (statement -> compound_statement .)
    MINUSMINUS      reduce using rule 57 (statement -> compound_statement .)
    AND             reduce using rule 57 (statement -> compound_statement .)
    TIMES           reduce using rule 57 (statement -> compound_statement .)
    PLUS            reduce using rule 57 (statement -> compound_statement .)
    MINUS           reduce using rule 57 (statement -> compound_statement .)
    LNOT            reduce using rule 57 (statement -> compound_statement .)
    ID              reduce using rule 57 (statement -> compound_statement .)
    SCONST          reduce using rule 57 (statement -> compound_statement .)
    LPAREN          reduce using rule 57 (statement -> compound_statement .)
    ICONST          reduce using rule 57 (statement -> compound_statement .)
    FCONST          reduce using rule 57 (statement -> compound_statement .)
    CCONST          reduce using rule 57 (statement -> compound_statement .)
    SEMI            reduce using rule 57 (statement -> compound_statement .)
    ELSE            reduce using rule 57 (statement -> compound_statement .)


state 41

    (58) statement -> selection_statement .

    RBRACE          reduce using rule 58 (statement -> selection_statement .)
    LBRACE          reduce using rule 58 (statement -> selection_statement .)
    IF              reduce using rule 58 (statement -> selection_statement .)
    WHILE           reduce using rule 58 (statement -> selection_statement .)
    FOR             reduce using rule 58 (statement -> selection_statement .)
    BREAK           reduce using rule 58 (statement -> selection_statement .)
    RETURN          reduce using rule 58 (statement -> selection_statement .)
    PLUSPLUS        reduce using rule 58 (statement -> selection_statement .)
    MINUSMINUS      reduce using rule 58 (statement -> selection_statement .)
    AND             reduce using rule 58 (statement -> selection_statement .)
    TIMES           reduce using rule 58 (statement -> selection_statement .)
    PLUS            reduce using rule 58 (statement -> selection_statement .)
    MINUS           reduce using rule 58 (statement -> selection_statement .)
    LNOT            reduce using rule 58 (statement -> selection_statement .)
    ID              reduce using rule 58 (statement -> selection_statement .)
    SCONST          reduce using rule 58 (statement -> selection_statement .)
    LPAREN          reduce using rule 58 (statement -> selection_statement .)
    ICONST          reduce using rule 58 (statement -> selection_statement .)
    FCONST          reduce using rule 58 (statement -> selection_statement .)
    CCONST          reduce using rule 58 (statement -> selection_statement .)
    SEMI            reduce using rule 58 (statement -> selection_statement .)
    ELSE            reduce using rule 58 (statement -> selection_statement .)


state 42

    (59) statement -> iteration_statement .

    RBRACE          reduce using rule 59 (statement -> iteration_statement .)
    LBRACE          reduce using rule 59 (statement -> iteration_statement .)
    IF              reduce using rule 59 (statement -> iteration_statement .)
    WHILE           reduce using rule 59 (statement -> iteration_statement .)
    FOR             reduce using rule 59 (statement -> iteration_statement .)
    BREAK           reduce using rule 59 (statement -> iteration_statement .)
    RETURN          reduce using rule 59 (statement -> iteration_statement .)
    PLUSPLUS        reduce using rule 59 (statement -> iteration_statement .)
    MINUSMINUS      reduce using rule 59 (statement -> iteration_statement .)
    AND             reduce using rule 59 (statement -> iteration_statement .)
    TIMES           reduce using rule 59 (statement -> iteration_statement .)
    PLUS            reduce using rule 59 (statement -> iteration_statement .)
    MINUS           reduce using rule 59 (statement -> iteration_statement .)
    LNOT            reduce using rule 59 (statement -> iteration_statement .)
    ID              reduce using rule 59 (statement -> iteration_statement .)
    SCONST          reduce using rule 59 (statement -> iteration_statement .)
    LPAREN          reduce using rule 59 (statement -> iteration_statement .)
    ICONST          reduce using rule 59 (statement -> iteration_statement .)
    FCONST          reduce using rule 59 (statement -> iteration_statement .)
    CCONST          reduce using rule 59 (statement -> iteration_statement .)
    SEMI            reduce using rule 59 (statement -> iteration_statement .)
    ELSE            reduce using rule 59 (statement -> iteration_statement .)


state 43

    (60) statement -> jump_statement .

    RBRACE          reduce using rule 60 (statement -> jump_statement .)
    LBRACE          reduce using rule 60 (statement -> jump_statement .)
    IF              reduce using rule 60 (statement -> jump_statement .)
    WHILE           reduce using rule 60 (statement -> jump_statement .)
    FOR             reduce using rule 60 (statement -> jump_statement .)
    BREAK           reduce using rule 60 (statement -> jump_statement .)
    RETURN          reduce using rule 60 (statement -> jump_statement .)
    PLUSPLUS        reduce using rule 60 (statement -> jump_statement .)
    MINUSMINUS      reduce using rule 60 (statement -> jump_statement .)
    AND             reduce using rule 60 (statement -> jump_statement .)
    TIMES           reduce using rule 60 (statement -> jump_statement .)
    PLUS            reduce using rule 60 (statement -> jump_statement .)
    MINUS           reduce using rule 60 (statement -> jump_statement .)
    LNOT            reduce using rule 60 (statement -> jump_statement .)
    ID              reduce using rule 60 (statement -> jump_statement .)
    SCONST          reduce using rule 60 (statement -> jump_statement .)
    LPAREN          reduce using rule 60 (statement -> jump_statement .)
    ICONST          reduce using rule 60 (statement -> jump_statement .)
    FCONST          reduce using rule 60 (statement -> jump_statement .)
    CCONST          reduce using rule 60 (statement -> jump_statement .)
    SEMI            reduce using rule 60 (statement -> jump_statement .)
    ELSE            reduce using rule 60 (statement -> jump_statement .)


state 44

    (61) expression_statement -> expression_opt . SEMI

    SEMI            shift and go to state 107


state 45

    (68) selection_statement -> IF . LPAREN expression RPAREN statement
    (69) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 108


state 46

    (126) primary_expression -> LPAREN . expression RPAREN
    (107) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (76) expression -> . assignment_expression
    (77) expression -> . expression COMMA assignment_expression
    (43) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (78) assignment_expression -> . conditional_expression
    (79) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (22) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (23) specifier_qualifier_list -> . type_specifier
    (81) conditional_expression -> . logical_or_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (15) type_specifier -> . VOID
    (16) type_specifier -> . INT
    (17) type_specifier -> . TYPEID
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (87) inclusive_or_expression -> . exclusive_or_expression
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    VOID            shift and go to state 9
    INT             shift and go to state 10
    TYPEID          shift and go to state 11
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    LPAREN          shift and go to state 46
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    expression                     shift and go to state 109
    type_name                      shift and go to state 110
    cast_expression                shift and go to state 61
    assignment_expression          shift and go to state 53
    specifier_qualifier_list       shift and go to state 111
    conditional_expression         shift and go to state 54
    unary_expression               shift and go to state 55
    type_specifier                 shift and go to state 112
    logical_or_expression          shift and go to state 56
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 69
    constant                       shift and go to state 71
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82

state 47

    (75) expression_opt -> expression .
    (77) expression -> expression . COMMA assignment_expression

    SEMI            reduce using rule 75 (expression_opt -> expression .)
    RPAREN          reduce using rule 75 (expression_opt -> expression .)
    COMMA           shift and go to state 113


state 48

    (70) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 114


state 49

    (71) iteration_statement -> FOR . LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement

    LPAREN          shift and go to state 115


state 50

    (72) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 116


state 51

    (73) jump_statement -> RETURN . expression_opt SEMI
    (74) expression_opt -> . empty
    (75) expression_opt -> . expression
    (132) empty -> .
    (76) expression -> . assignment_expression
    (77) expression -> . expression COMMA assignment_expression
    (78) assignment_expression -> . conditional_expression
    (79) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (87) inclusive_or_expression -> . exclusive_or_expression
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMI            reduce using rule 132 (empty -> .)
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    LPAREN          shift and go to state 46
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    expression_opt                 shift and go to state 117
    empty                          shift and go to state 52
    expression                     shift and go to state 47
    assignment_expression          shift and go to state 53
    conditional_expression         shift and go to state 54
    unary_expression               shift and go to state 55
    logical_or_expression          shift and go to state 56
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 61
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 69
    constant                       shift and go to state 71
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82

state 52

    (74) expression_opt -> empty .

    SEMI            reduce using rule 74 (expression_opt -> empty .)
    RPAREN          reduce using rule 74 (expression_opt -> empty .)


state 53

    (76) expression -> assignment_expression .

    COMMA           reduce using rule 76 (expression -> assignment_expression .)
    SEMI            reduce using rule 76 (expression -> assignment_expression .)
    RPAREN          reduce using rule 76 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 76 (expression -> assignment_expression .)


state 54

    (78) assignment_expression -> conditional_expression .

    COMMA           reduce using rule 78 (assignment_expression -> conditional_expression .)
    SEMI            reduce using rule 78 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 78 (assignment_expression -> conditional_expression .)
    RBRACE          reduce using rule 78 (assignment_expression -> conditional_expression .)
    RBRACKET        reduce using rule 78 (assignment_expression -> conditional_expression .)


state 55

    (79) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (106) cast_expression -> unary_expression .
    (80) assignment_operator -> . EQUALS

    TIMES           reduce using rule 106 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 106 (cast_expression -> unary_expression .)
    MOD             reduce using rule 106 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 106 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 106 (cast_expression -> unary_expression .)
    LT              reduce using rule 106 (cast_expression -> unary_expression .)
    GT              reduce using rule 106 (cast_expression -> unary_expression .)
    LE              reduce using rule 106 (cast_expression -> unary_expression .)
    GE              reduce using rule 106 (cast_expression -> unary_expression .)
    EQ              reduce using rule 106 (cast_expression -> unary_expression .)
    AND             reduce using rule 106 (cast_expression -> unary_expression .)
    LAND            reduce using rule 106 (cast_expression -> unary_expression .)
    LOR             reduce using rule 106 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 106 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 106 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 106 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 106 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 106 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 119

    assignment_operator            shift and go to state 118

state 56

    (81) conditional_expression -> logical_or_expression .
    (84) logical_or_expression -> logical_or_expression . LOR logical_and_expression

    COMMA           reduce using rule 81 (conditional_expression -> logical_or_expression .)
    SEMI            reduce using rule 81 (conditional_expression -> logical_or_expression .)
    RBRACKET        reduce using rule 81 (conditional_expression -> logical_or_expression .)
    RPAREN          reduce using rule 81 (conditional_expression -> logical_or_expression .)
    RBRACE          reduce using rule 81 (conditional_expression -> logical_or_expression .)
    LOR             shift and go to state 120


state 57

    (108) unary_expression -> postfix_expression .
    (118) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (119) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> postfix_expression . LPAREN RPAREN
    (121) postfix_expression -> postfix_expression . PLUSPLUS
    (122) postfix_expression -> postfix_expression . MINUSMINUS

    EQUALS          reduce using rule 108 (unary_expression -> postfix_expression .)
    TIMES           reduce using rule 108 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 108 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 108 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 108 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 108 (unary_expression -> postfix_expression .)
    LT              reduce using rule 108 (unary_expression -> postfix_expression .)
    GT              reduce using rule 108 (unary_expression -> postfix_expression .)
    LE              reduce using rule 108 (unary_expression -> postfix_expression .)
    GE              reduce using rule 108 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 108 (unary_expression -> postfix_expression .)
    AND             reduce using rule 108 (unary_expression -> postfix_expression .)
    LAND            reduce using rule 108 (unary_expression -> postfix_expression .)
    LOR             reduce using rule 108 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 108 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 108 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 108 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 108 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 108 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 121
    LPAREN          shift and go to state 122
    PLUSPLUS        shift and go to state 123
    MINUSMINUS      shift and go to state 124


state 58

    (109) unary_expression -> PLUSPLUS . unary_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST

    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    LPAREN          shift and go to state 126
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    primary_expression             shift and go to state 63
    constant                       shift and go to state 71

state 59

    (110) unary_expression -> MINUSMINUS . unary_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST

    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    LPAREN          shift and go to state 126
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    primary_expression             shift and go to state 63
    constant                       shift and go to state 71

state 60

    (111) unary_expression -> unary_operator . cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST

    LPAREN          shift and go to state 89
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 128
    unary_expression               shift and go to state 88
    postfix_expression             shift and go to state 57
    primary_expression             shift and go to state 63
    constant                       shift and go to state 71

state 61

    (102) multiplicative_expression -> cast_expression .

    TIMES           reduce using rule 102 (multiplicative_expression -> cast_expression .)
    DIVIDE          reduce using rule 102 (multiplicative_expression -> cast_expression .)
    MOD             reduce using rule 102 (multiplicative_expression -> cast_expression .)
    PLUS            reduce using rule 102 (multiplicative_expression -> cast_expression .)
    MINUS           reduce using rule 102 (multiplicative_expression -> cast_expression .)
    LT              reduce using rule 102 (multiplicative_expression -> cast_expression .)
    GT              reduce using rule 102 (multiplicative_expression -> cast_expression .)
    LE              reduce using rule 102 (multiplicative_expression -> cast_expression .)
    GE              reduce using rule 102 (multiplicative_expression -> cast_expression .)
    EQ              reduce using rule 102 (multiplicative_expression -> cast_expression .)
    AND             reduce using rule 102 (multiplicative_expression -> cast_expression .)
    LAND            reduce using rule 102 (multiplicative_expression -> cast_expression .)
    LOR             reduce using rule 102 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 102 (multiplicative_expression -> cast_expression .)
    SEMI            reduce using rule 102 (multiplicative_expression -> cast_expression .)
    RBRACKET        reduce using rule 102 (multiplicative_expression -> cast_expression .)
    RPAREN          reduce using rule 102 (multiplicative_expression -> cast_expression .)
    RBRACE          reduce using rule 102 (multiplicative_expression -> cast_expression .)


state 62

    (83) logical_or_expression -> logical_and_expression .
    (86) logical_and_expression -> logical_and_expression . LAND inclusive_or_expression

    LOR             reduce using rule 83 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 83 (logical_or_expression -> logical_and_expression .)
    SEMI            reduce using rule 83 (logical_or_expression -> logical_and_expression .)
    RBRACKET        reduce using rule 83 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 83 (logical_or_expression -> logical_and_expression .)
    RBRACE          reduce using rule 83 (logical_or_expression -> logical_and_expression .)
    LAND            shift and go to state 129


state 63

    (117) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 117 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 117 (postfix_expression -> primary_expression .)
    PLUSPLUS        reduce using rule 117 (postfix_expression -> primary_expression .)
    MINUSMINUS      reduce using rule 117 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 117 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 117 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 117 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 117 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 117 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 117 (postfix_expression -> primary_expression .)
    LT              reduce using rule 117 (postfix_expression -> primary_expression .)
    GT              reduce using rule 117 (postfix_expression -> primary_expression .)
    LE              reduce using rule 117 (postfix_expression -> primary_expression .)
    GE              reduce using rule 117 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 117 (postfix_expression -> primary_expression .)
    AND             reduce using rule 117 (postfix_expression -> primary_expression .)
    LAND            reduce using rule 117 (postfix_expression -> primary_expression .)
    LOR             reduce using rule 117 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 117 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 117 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 117 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 117 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 117 (postfix_expression -> primary_expression .)


state 64

    (112) unary_operator -> AND .

    LPAREN          reduce using rule 112 (unary_operator -> AND .)
    PLUSPLUS        reduce using rule 112 (unary_operator -> AND .)
    MINUSMINUS      reduce using rule 112 (unary_operator -> AND .)
    AND             reduce using rule 112 (unary_operator -> AND .)
    TIMES           reduce using rule 112 (unary_operator -> AND .)
    PLUS            reduce using rule 112 (unary_operator -> AND .)
    MINUS           reduce using rule 112 (unary_operator -> AND .)
    LNOT            reduce using rule 112 (unary_operator -> AND .)
    ID              reduce using rule 112 (unary_operator -> AND .)
    SCONST          reduce using rule 112 (unary_operator -> AND .)
    ICONST          reduce using rule 112 (unary_operator -> AND .)
    FCONST          reduce using rule 112 (unary_operator -> AND .)
    CCONST          reduce using rule 112 (unary_operator -> AND .)


state 65

    (113) unary_operator -> TIMES .

    LPAREN          reduce using rule 113 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 113 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 113 (unary_operator -> TIMES .)
    AND             reduce using rule 113 (unary_operator -> TIMES .)
    TIMES           reduce using rule 113 (unary_operator -> TIMES .)
    PLUS            reduce using rule 113 (unary_operator -> TIMES .)
    MINUS           reduce using rule 113 (unary_operator -> TIMES .)
    LNOT            reduce using rule 113 (unary_operator -> TIMES .)
    ID              reduce using rule 113 (unary_operator -> TIMES .)
    SCONST          reduce using rule 113 (unary_operator -> TIMES .)
    ICONST          reduce using rule 113 (unary_operator -> TIMES .)
    FCONST          reduce using rule 113 (unary_operator -> TIMES .)
    CCONST          reduce using rule 113 (unary_operator -> TIMES .)


state 66

    (114) unary_operator -> PLUS .

    LPAREN          reduce using rule 114 (unary_operator -> PLUS .)
    PLUSPLUS        reduce using rule 114 (unary_operator -> PLUS .)
    MINUSMINUS      reduce using rule 114 (unary_operator -> PLUS .)
    AND             reduce using rule 114 (unary_operator -> PLUS .)
    TIMES           reduce using rule 114 (unary_operator -> PLUS .)
    PLUS            reduce using rule 114 (unary_operator -> PLUS .)
    MINUS           reduce using rule 114 (unary_operator -> PLUS .)
    LNOT            reduce using rule 114 (unary_operator -> PLUS .)
    ID              reduce using rule 114 (unary_operator -> PLUS .)
    SCONST          reduce using rule 114 (unary_operator -> PLUS .)
    ICONST          reduce using rule 114 (unary_operator -> PLUS .)
    FCONST          reduce using rule 114 (unary_operator -> PLUS .)
    CCONST          reduce using rule 114 (unary_operator -> PLUS .)


state 67

    (115) unary_operator -> MINUS .

    LPAREN          reduce using rule 115 (unary_operator -> MINUS .)
    PLUSPLUS        reduce using rule 115 (unary_operator -> MINUS .)
    MINUSMINUS      reduce using rule 115 (unary_operator -> MINUS .)
    AND             reduce using rule 115 (unary_operator -> MINUS .)
    TIMES           reduce using rule 115 (unary_operator -> MINUS .)
    PLUS            reduce using rule 115 (unary_operator -> MINUS .)
    MINUS           reduce using rule 115 (unary_operator -> MINUS .)
    LNOT            reduce using rule 115 (unary_operator -> MINUS .)
    ID              reduce using rule 115 (unary_operator -> MINUS .)
    SCONST          reduce using rule 115 (unary_operator -> MINUS .)
    ICONST          reduce using rule 115 (unary_operator -> MINUS .)
    FCONST          reduce using rule 115 (unary_operator -> MINUS .)
    CCONST          reduce using rule 115 (unary_operator -> MINUS .)


state 68

    (116) unary_operator -> LNOT .

    LPAREN          reduce using rule 116 (unary_operator -> LNOT .)
    PLUSPLUS        reduce using rule 116 (unary_operator -> LNOT .)
    MINUSMINUS      reduce using rule 116 (unary_operator -> LNOT .)
    AND             reduce using rule 116 (unary_operator -> LNOT .)
    TIMES           reduce using rule 116 (unary_operator -> LNOT .)
    PLUS            reduce using rule 116 (unary_operator -> LNOT .)
    MINUS           reduce using rule 116 (unary_operator -> LNOT .)
    LNOT            reduce using rule 116 (unary_operator -> LNOT .)
    ID              reduce using rule 116 (unary_operator -> LNOT .)
    SCONST          reduce using rule 116 (unary_operator -> LNOT .)
    ICONST          reduce using rule 116 (unary_operator -> LNOT .)
    FCONST          reduce using rule 116 (unary_operator -> LNOT .)
    CCONST          reduce using rule 116 (unary_operator -> LNOT .)


state 69

    (85) logical_and_expression -> inclusive_or_expression .

    LAND            reduce using rule 85 (logical_and_expression -> inclusive_or_expression .)
    LOR             reduce using rule 85 (logical_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 85 (logical_and_expression -> inclusive_or_expression .)
    SEMI            reduce using rule 85 (logical_and_expression -> inclusive_or_expression .)
    RBRACKET        reduce using rule 85 (logical_and_expression -> inclusive_or_expression .)
    RPAREN          reduce using rule 85 (logical_and_expression -> inclusive_or_expression .)
    RBRACE          reduce using rule 85 (logical_and_expression -> inclusive_or_expression .)


state 70

    (123) primary_expression -> ID .

    LBRACKET        reduce using rule 123 (primary_expression -> ID .)
    LPAREN          reduce using rule 123 (primary_expression -> ID .)
    PLUSPLUS        reduce using rule 123 (primary_expression -> ID .)
    MINUSMINUS      reduce using rule 123 (primary_expression -> ID .)
    EQUALS          reduce using rule 123 (primary_expression -> ID .)
    TIMES           reduce using rule 123 (primary_expression -> ID .)
    DIVIDE          reduce using rule 123 (primary_expression -> ID .)
    MOD             reduce using rule 123 (primary_expression -> ID .)
    PLUS            reduce using rule 123 (primary_expression -> ID .)
    MINUS           reduce using rule 123 (primary_expression -> ID .)
    LT              reduce using rule 123 (primary_expression -> ID .)
    GT              reduce using rule 123 (primary_expression -> ID .)
    LE              reduce using rule 123 (primary_expression -> ID .)
    GE              reduce using rule 123 (primary_expression -> ID .)
    EQ              reduce using rule 123 (primary_expression -> ID .)
    AND             reduce using rule 123 (primary_expression -> ID .)
    LAND            reduce using rule 123 (primary_expression -> ID .)
    LOR             reduce using rule 123 (primary_expression -> ID .)
    COMMA           reduce using rule 123 (primary_expression -> ID .)
    SEMI            reduce using rule 123 (primary_expression -> ID .)
    RBRACKET        reduce using rule 123 (primary_expression -> ID .)
    RPAREN          reduce using rule 123 (primary_expression -> ID .)
    RBRACE          reduce using rule 123 (primary_expression -> ID .)


state 71

    (124) primary_expression -> constant .

    LBRACKET        reduce using rule 124 (primary_expression -> constant .)
    LPAREN          reduce using rule 124 (primary_expression -> constant .)
    PLUSPLUS        reduce using rule 124 (primary_expression -> constant .)
    MINUSMINUS      reduce using rule 124 (primary_expression -> constant .)
    EQUALS          reduce using rule 124 (primary_expression -> constant .)
    TIMES           reduce using rule 124 (primary_expression -> constant .)
    DIVIDE          reduce using rule 124 (primary_expression -> constant .)
    MOD             reduce using rule 124 (primary_expression -> constant .)
    PLUS            reduce using rule 124 (primary_expression -> constant .)
    MINUS           reduce using rule 124 (primary_expression -> constant .)
    LT              reduce using rule 124 (primary_expression -> constant .)
    GT              reduce using rule 124 (primary_expression -> constant .)
    LE              reduce using rule 124 (primary_expression -> constant .)
    GE              reduce using rule 124 (primary_expression -> constant .)
    EQ              reduce using rule 124 (primary_expression -> constant .)
    AND             reduce using rule 124 (primary_expression -> constant .)
    LAND            reduce using rule 124 (primary_expression -> constant .)
    LOR             reduce using rule 124 (primary_expression -> constant .)
    COMMA           reduce using rule 124 (primary_expression -> constant .)
    SEMI            reduce using rule 124 (primary_expression -> constant .)
    RBRACKET        reduce using rule 124 (primary_expression -> constant .)
    RPAREN          reduce using rule 124 (primary_expression -> constant .)
    RBRACE          reduce using rule 124 (primary_expression -> constant .)


state 72

    (125) primary_expression -> SCONST .

    LBRACKET        reduce using rule 125 (primary_expression -> SCONST .)
    LPAREN          reduce using rule 125 (primary_expression -> SCONST .)
    PLUSPLUS        reduce using rule 125 (primary_expression -> SCONST .)
    MINUSMINUS      reduce using rule 125 (primary_expression -> SCONST .)
    EQUALS          reduce using rule 125 (primary_expression -> SCONST .)
    TIMES           reduce using rule 125 (primary_expression -> SCONST .)
    DIVIDE          reduce using rule 125 (primary_expression -> SCONST .)
    MOD             reduce using rule 125 (primary_expression -> SCONST .)
    PLUS            reduce using rule 125 (primary_expression -> SCONST .)
    MINUS           reduce using rule 125 (primary_expression -> SCONST .)
    LT              reduce using rule 125 (primary_expression -> SCONST .)
    GT              reduce using rule 125 (primary_expression -> SCONST .)
    LE              reduce using rule 125 (primary_expression -> SCONST .)
    GE              reduce using rule 125 (primary_expression -> SCONST .)
    EQ              reduce using rule 125 (primary_expression -> SCONST .)
    AND             reduce using rule 125 (primary_expression -> SCONST .)
    LAND            reduce using rule 125 (primary_expression -> SCONST .)
    LOR             reduce using rule 125 (primary_expression -> SCONST .)
    COMMA           reduce using rule 125 (primary_expression -> SCONST .)
    SEMI            reduce using rule 125 (primary_expression -> SCONST .)
    RBRACKET        reduce using rule 125 (primary_expression -> SCONST .)
    RPAREN          reduce using rule 125 (primary_expression -> SCONST .)
    RBRACE          reduce using rule 125 (primary_expression -> SCONST .)


state 73

    (87) inclusive_or_expression -> exclusive_or_expression .

    LAND            reduce using rule 87 (inclusive_or_expression -> exclusive_or_expression .)
    LOR             reduce using rule 87 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 87 (inclusive_or_expression -> exclusive_or_expression .)
    SEMI            reduce using rule 87 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACKET        reduce using rule 87 (inclusive_or_expression -> exclusive_or_expression .)
    RPAREN          reduce using rule 87 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACE          reduce using rule 87 (inclusive_or_expression -> exclusive_or_expression .)


state 74

    (129) constant -> ICONST .

    LBRACKET        reduce using rule 129 (constant -> ICONST .)
    LPAREN          reduce using rule 129 (constant -> ICONST .)
    PLUSPLUS        reduce using rule 129 (constant -> ICONST .)
    MINUSMINUS      reduce using rule 129 (constant -> ICONST .)
    EQUALS          reduce using rule 129 (constant -> ICONST .)
    TIMES           reduce using rule 129 (constant -> ICONST .)
    DIVIDE          reduce using rule 129 (constant -> ICONST .)
    MOD             reduce using rule 129 (constant -> ICONST .)
    PLUS            reduce using rule 129 (constant -> ICONST .)
    MINUS           reduce using rule 129 (constant -> ICONST .)
    LT              reduce using rule 129 (constant -> ICONST .)
    GT              reduce using rule 129 (constant -> ICONST .)
    LE              reduce using rule 129 (constant -> ICONST .)
    GE              reduce using rule 129 (constant -> ICONST .)
    EQ              reduce using rule 129 (constant -> ICONST .)
    AND             reduce using rule 129 (constant -> ICONST .)
    LAND            reduce using rule 129 (constant -> ICONST .)
    LOR             reduce using rule 129 (constant -> ICONST .)
    COMMA           reduce using rule 129 (constant -> ICONST .)
    SEMI            reduce using rule 129 (constant -> ICONST .)
    RBRACKET        reduce using rule 129 (constant -> ICONST .)
    RPAREN          reduce using rule 129 (constant -> ICONST .)
    RBRACE          reduce using rule 129 (constant -> ICONST .)


state 75

    (130) constant -> FCONST .

    LBRACKET        reduce using rule 130 (constant -> FCONST .)
    LPAREN          reduce using rule 130 (constant -> FCONST .)
    PLUSPLUS        reduce using rule 130 (constant -> FCONST .)
    MINUSMINUS      reduce using rule 130 (constant -> FCONST .)
    EQUALS          reduce using rule 130 (constant -> FCONST .)
    TIMES           reduce using rule 130 (constant -> FCONST .)
    DIVIDE          reduce using rule 130 (constant -> FCONST .)
    MOD             reduce using rule 130 (constant -> FCONST .)
    PLUS            reduce using rule 130 (constant -> FCONST .)
    MINUS           reduce using rule 130 (constant -> FCONST .)
    LT              reduce using rule 130 (constant -> FCONST .)
    GT              reduce using rule 130 (constant -> FCONST .)
    LE              reduce using rule 130 (constant -> FCONST .)
    GE              reduce using rule 130 (constant -> FCONST .)
    EQ              reduce using rule 130 (constant -> FCONST .)
    AND             reduce using rule 130 (constant -> FCONST .)
    LAND            reduce using rule 130 (constant -> FCONST .)
    LOR             reduce using rule 130 (constant -> FCONST .)
    COMMA           reduce using rule 130 (constant -> FCONST .)
    SEMI            reduce using rule 130 (constant -> FCONST .)
    RBRACKET        reduce using rule 130 (constant -> FCONST .)
    RPAREN          reduce using rule 130 (constant -> FCONST .)
    RBRACE          reduce using rule 130 (constant -> FCONST .)


state 76

    (131) constant -> CCONST .

    LBRACKET        reduce using rule 131 (constant -> CCONST .)
    LPAREN          reduce using rule 131 (constant -> CCONST .)
    PLUSPLUS        reduce using rule 131 (constant -> CCONST .)
    MINUSMINUS      reduce using rule 131 (constant -> CCONST .)
    EQUALS          reduce using rule 131 (constant -> CCONST .)
    TIMES           reduce using rule 131 (constant -> CCONST .)
    DIVIDE          reduce using rule 131 (constant -> CCONST .)
    MOD             reduce using rule 131 (constant -> CCONST .)
    PLUS            reduce using rule 131 (constant -> CCONST .)
    MINUS           reduce using rule 131 (constant -> CCONST .)
    LT              reduce using rule 131 (constant -> CCONST .)
    GT              reduce using rule 131 (constant -> CCONST .)
    LE              reduce using rule 131 (constant -> CCONST .)
    GE              reduce using rule 131 (constant -> CCONST .)
    EQ              reduce using rule 131 (constant -> CCONST .)
    AND             reduce using rule 131 (constant -> CCONST .)
    LAND            reduce using rule 131 (constant -> CCONST .)
    LOR             reduce using rule 131 (constant -> CCONST .)
    COMMA           reduce using rule 131 (constant -> CCONST .)
    SEMI            reduce using rule 131 (constant -> CCONST .)
    RBRACKET        reduce using rule 131 (constant -> CCONST .)
    RPAREN          reduce using rule 131 (constant -> CCONST .)
    RBRACE          reduce using rule 131 (constant -> CCONST .)


state 77

    (88) exclusive_or_expression -> and_expression .
    (90) and_expression -> and_expression . AND equality_expression

    LAND            reduce using rule 88 (exclusive_or_expression -> and_expression .)
    LOR             reduce using rule 88 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 88 (exclusive_or_expression -> and_expression .)
    SEMI            reduce using rule 88 (exclusive_or_expression -> and_expression .)
    RBRACKET        reduce using rule 88 (exclusive_or_expression -> and_expression .)
    RPAREN          reduce using rule 88 (exclusive_or_expression -> and_expression .)
    RBRACE          reduce using rule 88 (exclusive_or_expression -> and_expression .)
    AND             shift and go to state 130


state 78

    (89) and_expression -> equality_expression .
    (92) equality_expression -> equality_expression . EQ relational_expression

    AND             reduce using rule 89 (and_expression -> equality_expression .)
    LAND            reduce using rule 89 (and_expression -> equality_expression .)
    LOR             reduce using rule 89 (and_expression -> equality_expression .)
    COMMA           reduce using rule 89 (and_expression -> equality_expression .)
    SEMI            reduce using rule 89 (and_expression -> equality_expression .)
    RBRACKET        reduce using rule 89 (and_expression -> equality_expression .)
    RPAREN          reduce using rule 89 (and_expression -> equality_expression .)
    RBRACE          reduce using rule 89 (and_expression -> equality_expression .)
    EQ              shift and go to state 131


state 79

    (91) equality_expression -> relational_expression .
    (94) relational_expression -> relational_expression . LT shift_expression
    (95) relational_expression -> relational_expression . GT shift_expression
    (96) relational_expression -> relational_expression . LE shift_expression
    (97) relational_expression -> relational_expression . GE shift_expression

    EQ              reduce using rule 91 (equality_expression -> relational_expression .)
    AND             reduce using rule 91 (equality_expression -> relational_expression .)
    LAND            reduce using rule 91 (equality_expression -> relational_expression .)
    LOR             reduce using rule 91 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 91 (equality_expression -> relational_expression .)
    SEMI            reduce using rule 91 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 91 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 91 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 91 (equality_expression -> relational_expression .)
    LT              shift and go to state 132
    GT              shift and go to state 133
    LE              shift and go to state 134
    GE              shift and go to state 135


state 80

    (93) relational_expression -> shift_expression .

    LT              reduce using rule 93 (relational_expression -> shift_expression .)
    GT              reduce using rule 93 (relational_expression -> shift_expression .)
    LE              reduce using rule 93 (relational_expression -> shift_expression .)
    GE              reduce using rule 93 (relational_expression -> shift_expression .)
    EQ              reduce using rule 93 (relational_expression -> shift_expression .)
    AND             reduce using rule 93 (relational_expression -> shift_expression .)
    LAND            reduce using rule 93 (relational_expression -> shift_expression .)
    LOR             reduce using rule 93 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 93 (relational_expression -> shift_expression .)
    SEMI            reduce using rule 93 (relational_expression -> shift_expression .)
    RBRACKET        reduce using rule 93 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 93 (relational_expression -> shift_expression .)
    RBRACE          reduce using rule 93 (relational_expression -> shift_expression .)


state 81

    (98) shift_expression -> additive_expression .
    (100) additive_expression -> additive_expression . PLUS multiplicative_expression
    (101) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 98 (shift_expression -> additive_expression .)
    GT              reduce using rule 98 (shift_expression -> additive_expression .)
    LE              reduce using rule 98 (shift_expression -> additive_expression .)
    GE              reduce using rule 98 (shift_expression -> additive_expression .)
    EQ              reduce using rule 98 (shift_expression -> additive_expression .)
    AND             reduce using rule 98 (shift_expression -> additive_expression .)
    LAND            reduce using rule 98 (shift_expression -> additive_expression .)
    LOR             reduce using rule 98 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 98 (shift_expression -> additive_expression .)
    SEMI            reduce using rule 98 (shift_expression -> additive_expression .)
    RBRACKET        reduce using rule 98 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 98 (shift_expression -> additive_expression .)
    RBRACE          reduce using rule 98 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 136
    MINUS           shift and go to state 137


state 82

    (99) additive_expression -> multiplicative_expression .
    (103) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (104) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (105) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 99 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 99 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 99 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 99 (additive_expression -> multiplicative_expression .)
    LE              reduce using rule 99 (additive_expression -> multiplicative_expression .)
    GE              reduce using rule 99 (additive_expression -> multiplicative_expression .)
    EQ              reduce using rule 99 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 99 (additive_expression -> multiplicative_expression .)
    LAND            reduce using rule 99 (additive_expression -> multiplicative_expression .)
    LOR             reduce using rule 99 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 99 (additive_expression -> multiplicative_expression .)
    SEMI            reduce using rule 99 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 99 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 99 (additive_expression -> multiplicative_expression .)
    RBRACE          reduce using rule 99 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 138
    DIVIDE          shift and go to state 139
    MOD             shift and go to state 140


state 83

    (20) init_declarator -> declarator .
    (21) init_declarator -> declarator . EQUALS initializer

    SEMI            reduce using rule 20 (init_declarator -> declarator .)
    COMMA           reduce using rule 20 (init_declarator -> declarator .)
    EQUALS          shift and go to state 30


state 84

    (27) direct_declarator -> direct_declarator LBRACKET constant_expression_opt . RBRACKET

    RBRACKET        shift and go to state 141


state 85

    (52) constant_expression_opt -> empty .

    RBRACKET        reduce using rule 52 (constant_expression_opt -> empty .)


state 86

    (53) constant_expression_opt -> constant_expression .

    RBRACKET        reduce using rule 53 (constant_expression_opt -> constant_expression .)


state 87

    (82) constant_expression -> conditional_expression .

    RBRACKET        reduce using rule 82 (constant_expression -> conditional_expression .)


state 88

    (106) cast_expression -> unary_expression .

    TIMES           reduce using rule 106 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 106 (cast_expression -> unary_expression .)
    MOD             reduce using rule 106 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 106 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 106 (cast_expression -> unary_expression .)
    LT              reduce using rule 106 (cast_expression -> unary_expression .)
    GT              reduce using rule 106 (cast_expression -> unary_expression .)
    LE              reduce using rule 106 (cast_expression -> unary_expression .)
    GE              reduce using rule 106 (cast_expression -> unary_expression .)
    EQ              reduce using rule 106 (cast_expression -> unary_expression .)
    AND             reduce using rule 106 (cast_expression -> unary_expression .)
    LAND            reduce using rule 106 (cast_expression -> unary_expression .)
    LOR             reduce using rule 106 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 106 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 106 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 106 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 106 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 106 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 106 (cast_expression -> unary_expression .)


state 89

    (107) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (126) primary_expression -> LPAREN . expression RPAREN
    (43) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (76) expression -> . assignment_expression
    (77) expression -> . expression COMMA assignment_expression
    (22) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (23) specifier_qualifier_list -> . type_specifier
    (78) assignment_expression -> . conditional_expression
    (79) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (15) type_specifier -> . VOID
    (16) type_specifier -> . INT
    (17) type_specifier -> . TYPEID
    (81) conditional_expression -> . logical_or_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (87) inclusive_or_expression -> . exclusive_or_expression
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 9
    INT             shift and go to state 10
    TYPEID          shift and go to state 11
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    LPAREN          shift and go to state 46
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    type_name                      shift and go to state 110
    cast_expression                shift and go to state 61
    expression                     shift and go to state 109
    specifier_qualifier_list       shift and go to state 111
    assignment_expression          shift and go to state 53
    type_specifier                 shift and go to state 112
    conditional_expression         shift and go to state 54
    unary_expression               shift and go to state 55
    logical_or_expression          shift and go to state 56
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 69
    constant                       shift and go to state 71
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82

state 90

    (28) direct_declarator -> direct_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 142


state 91

    (30) direct_declarator -> direct_declarator LPAREN RPAREN .

    LBRACKET        reduce using rule 30 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LPAREN          reduce using rule 30 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LBRACE          reduce using rule 30 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    VOID            reduce using rule 30 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    INT             reduce using rule 30 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    TYPEID          reduce using rule 30 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    EQUALS          reduce using rule 30 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SEMI            reduce using rule 30 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COMMA           reduce using rule 30 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 30 (direct_declarator -> direct_declarator LPAREN RPAREN .)


state 92

    (29) direct_declarator -> direct_declarator LPAREN identifier_list . RPAREN
    (37) identifier_list -> identifier_list . COMMA ID

    RPAREN          shift and go to state 143
    COMMA           shift and go to state 144


state 93

    (31) parameter_type_list -> parameter_list .
    (33) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          reduce using rule 31 (parameter_type_list -> parameter_list .)
    COMMA           shift and go to state 145


state 94

    (36) identifier_list -> ID .

    RPAREN          reduce using rule 36 (identifier_list -> ID .)
    COMMA           reduce using rule 36 (identifier_list -> ID .)


state 95

    (32) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 32 (parameter_list -> parameter_declaration .)
    RPAREN          reduce using rule 32 (parameter_list -> parameter_declaration .)


state 96

    (34) parameter_declaration -> declaration_specifiers . declarator
    (35) parameter_declaration -> declaration_specifiers . abstract_declarator_opt
    (24) declarator -> . direct_declarator
    (44) abstract_declarator_opt -> . empty
    (45) abstract_declarator_opt -> . abstract_declarator
    (25) direct_declarator -> . ID
    (26) direct_declarator -> . LPAREN declarator RPAREN
    (27) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (28) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (29) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (30) direct_declarator -> . direct_declarator LPAREN RPAREN
    (132) empty -> .
    (46) abstract_declarator -> . direct_abstract_declarator
    (47) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (48) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression_opt RBRACKET
    (49) direct_abstract_declarator -> . LBRACKET constant_expression_opt RBRACKET
    (50) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (51) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN

    ID              shift and go to state 12
    LPAREN          shift and go to state 150
    COMMA           reduce using rule 132 (empty -> .)
    RPAREN          reduce using rule 132 (empty -> .)
    LBRACKET        shift and go to state 151

    declarator                     shift and go to state 146
    abstract_declarator_opt        shift and go to state 147
    direct_declarator              shift and go to state 8
    empty                          shift and go to state 148
    abstract_declarator            shift and go to state 149
    direct_abstract_declarator     shift and go to state 152

state 97

    (26) direct_declarator -> LPAREN declarator RPAREN .

    LBRACKET        reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACE          reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    TYPEID          reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)


state 98

    (5) function_definition -> declaration_specifiers declarator declaration_list compound_statement .

    VOID            reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INT             reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    TYPEID          reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ID              reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LPAREN          reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    $end            reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)


state 99

    (21) init_declarator -> declarator EQUALS initializer .

    SEMI            reduce using rule 21 (init_declarator -> declarator EQUALS initializer .)
    COMMA           reduce using rule 21 (init_declarator -> declarator EQUALS initializer .)


state 100

    (38) initializer -> assignment_expression .

    SEMI            reduce using rule 38 (initializer -> assignment_expression .)
    COMMA           reduce using rule 38 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 38 (initializer -> assignment_expression .)


state 101

    (39) initializer -> LBRACE . initializer_list RBRACE
    (40) initializer -> LBRACE . initializer_list COMMA RBRACE
    (41) initializer_list -> . initializer
    (42) initializer_list -> . initializer_list COMMA initializer
    (38) initializer -> . assignment_expression
    (39) initializer -> . LBRACE initializer_list RBRACE
    (40) initializer -> . LBRACE initializer_list COMMA RBRACE
    (78) assignment_expression -> . conditional_expression
    (79) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (87) inclusive_or_expression -> . exclusive_or_expression
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 101
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    LPAREN          shift and go to state 46
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    initializer_list               shift and go to state 153
    initializer                    shift and go to state 154
    assignment_expression          shift and go to state 100
    conditional_expression         shift and go to state 54
    unary_expression               shift and go to state 55
    logical_or_expression          shift and go to state 56
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 61
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 69
    constant                       shift and go to state 71
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82

state 102

    (19) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMI            reduce using rule 19 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 19 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 103

    (62) compound_statement -> LBRACE declaration_list statement_list . RBRACE
    (67) statement_list -> statement_list . statement
    (56) statement -> . expression_statement
    (57) statement -> . compound_statement
    (58) statement -> . selection_statement
    (59) statement -> . iteration_statement
    (60) statement -> . jump_statement
    (61) expression_statement -> . expression_opt SEMI
    (62) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (63) compound_statement -> . LBRACE statement_list RBRACE
    (64) compound_statement -> . LBRACE declaration_list RBRACE
    (65) compound_statement -> . LBRACE RBRACE
    (68) selection_statement -> . IF LPAREN expression RPAREN statement
    (69) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (70) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (71) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (72) jump_statement -> . BREAK SEMI
    (73) jump_statement -> . RETURN expression_opt SEMI
    (74) expression_opt -> . empty
    (75) expression_opt -> . expression
    (132) empty -> .
    (76) expression -> . assignment_expression
    (77) expression -> . expression COMMA assignment_expression
    (78) assignment_expression -> . conditional_expression
    (79) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (87) inclusive_or_expression -> . exclusive_or_expression
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 155
    LBRACE          shift and go to state 22
    IF              shift and go to state 45
    WHILE           shift and go to state 48
    FOR             shift and go to state 49
    BREAK           shift and go to state 50
    RETURN          shift and go to state 51
    SEMI            reduce using rule 132 (empty -> .)
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    LPAREN          shift and go to state 46
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    statement                      shift and go to state 106
    expression_statement           shift and go to state 39
    compound_statement             shift and go to state 40
    selection_statement            shift and go to state 41
    iteration_statement            shift and go to state 42
    jump_statement                 shift and go to state 43
    expression_opt                 shift and go to state 44
    expression                     shift and go to state 47
    empty                          shift and go to state 52
    assignment_expression          shift and go to state 53
    conditional_expression         shift and go to state 54
    unary_expression               shift and go to state 55
    logical_or_expression          shift and go to state 56
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 61
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 69
    constant                       shift and go to state 71
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82

state 104

    (64) compound_statement -> LBRACE declaration_list RBRACE .

    VOID            reduce using rule 64 (compound_statement -> LBRACE declaration_list RBRACE .)
    INT             reduce using rule 64 (compound_statement -> LBRACE declaration_list RBRACE .)
    TYPEID          reduce using rule 64 (compound_statement -> LBRACE declaration_list RBRACE .)
    ID              reduce using rule 64 (compound_statement -> LBRACE declaration_list RBRACE .)
    LPAREN          reduce using rule 64 (compound_statement -> LBRACE declaration_list RBRACE .)
    $end            reduce using rule 64 (compound_statement -> LBRACE declaration_list RBRACE .)
    RBRACE          reduce using rule 64 (compound_statement -> LBRACE declaration_list RBRACE .)
    LBRACE          reduce using rule 64 (compound_statement -> LBRACE declaration_list RBRACE .)
    IF              reduce using rule 64 (compound_statement -> LBRACE declaration_list RBRACE .)
    WHILE           reduce using rule 64 (compound_statement -> LBRACE declaration_list RBRACE .)
    FOR             reduce using rule 64 (compound_statement -> LBRACE declaration_list RBRACE .)
    BREAK           reduce using rule 64 (compound_statement -> LBRACE declaration_list RBRACE .)
    RETURN          reduce using rule 64 (compound_statement -> LBRACE declaration_list RBRACE .)
    PLUSPLUS        reduce using rule 64 (compound_statement -> LBRACE declaration_list RBRACE .)
    MINUSMINUS      reduce using rule 64 (compound_statement -> LBRACE declaration_list RBRACE .)
    AND             reduce using rule 64 (compound_statement -> LBRACE declaration_list RBRACE .)
    TIMES           reduce using rule 64 (compound_statement -> LBRACE declaration_list RBRACE .)
    PLUS            reduce using rule 64 (compound_statement -> LBRACE declaration_list RBRACE .)
    MINUS           reduce using rule 64 (compound_statement -> LBRACE declaration_list RBRACE .)
    LNOT            reduce using rule 64 (compound_statement -> LBRACE declaration_list RBRACE .)
    SCONST          reduce using rule 64 (compound_statement -> LBRACE declaration_list RBRACE .)
    ICONST          reduce using rule 64 (compound_statement -> LBRACE declaration_list RBRACE .)
    FCONST          reduce using rule 64 (compound_statement -> LBRACE declaration_list RBRACE .)
    CCONST          reduce using rule 64 (compound_statement -> LBRACE declaration_list RBRACE .)
    SEMI            reduce using rule 64 (compound_statement -> LBRACE declaration_list RBRACE .)
    ELSE            reduce using rule 64 (compound_statement -> LBRACE declaration_list RBRACE .)


state 105

    (63) compound_statement -> LBRACE statement_list RBRACE .

    VOID            reduce using rule 63 (compound_statement -> LBRACE statement_list RBRACE .)
    INT             reduce using rule 63 (compound_statement -> LBRACE statement_list RBRACE .)
    TYPEID          reduce using rule 63 (compound_statement -> LBRACE statement_list RBRACE .)
    ID              reduce using rule 63 (compound_statement -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 63 (compound_statement -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 63 (compound_statement -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 63 (compound_statement -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 63 (compound_statement -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 63 (compound_statement -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 63 (compound_statement -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 63 (compound_statement -> LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 63 (compound_statement -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 63 (compound_statement -> LBRACE statement_list RBRACE .)
    PLUSPLUS        reduce using rule 63 (compound_statement -> LBRACE statement_list RBRACE .)
    MINUSMINUS      reduce using rule 63 (compound_statement -> LBRACE statement_list RBRACE .)
    AND             reduce using rule 63 (compound_statement -> LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 63 (compound_statement -> LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 63 (compound_statement -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 63 (compound_statement -> LBRACE statement_list RBRACE .)
    LNOT            reduce using rule 63 (compound_statement -> LBRACE statement_list RBRACE .)
    SCONST          reduce using rule 63 (compound_statement -> LBRACE statement_list RBRACE .)
    ICONST          reduce using rule 63 (compound_statement -> LBRACE statement_list RBRACE .)
    FCONST          reduce using rule 63 (compound_statement -> LBRACE statement_list RBRACE .)
    CCONST          reduce using rule 63 (compound_statement -> LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 63 (compound_statement -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 63 (compound_statement -> LBRACE statement_list RBRACE .)


state 106

    (67) statement_list -> statement_list statement .

    RBRACE          reduce using rule 67 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 67 (statement_list -> statement_list statement .)
    IF              reduce using rule 67 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 67 (statement_list -> statement_list statement .)
    FOR             reduce using rule 67 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 67 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 67 (statement_list -> statement_list statement .)
    PLUSPLUS        reduce using rule 67 (statement_list -> statement_list statement .)
    MINUSMINUS      reduce using rule 67 (statement_list -> statement_list statement .)
    AND             reduce using rule 67 (statement_list -> statement_list statement .)
    TIMES           reduce using rule 67 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 67 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 67 (statement_list -> statement_list statement .)
    LNOT            reduce using rule 67 (statement_list -> statement_list statement .)
    ID              reduce using rule 67 (statement_list -> statement_list statement .)
    SCONST          reduce using rule 67 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 67 (statement_list -> statement_list statement .)
    ICONST          reduce using rule 67 (statement_list -> statement_list statement .)
    FCONST          reduce using rule 67 (statement_list -> statement_list statement .)
    CCONST          reduce using rule 67 (statement_list -> statement_list statement .)
    SEMI            reduce using rule 67 (statement_list -> statement_list statement .)


state 107

    (61) expression_statement -> expression_opt SEMI .

    RBRACE          reduce using rule 61 (expression_statement -> expression_opt SEMI .)
    LBRACE          reduce using rule 61 (expression_statement -> expression_opt SEMI .)
    IF              reduce using rule 61 (expression_statement -> expression_opt SEMI .)
    WHILE           reduce using rule 61 (expression_statement -> expression_opt SEMI .)
    FOR             reduce using rule 61 (expression_statement -> expression_opt SEMI .)
    BREAK           reduce using rule 61 (expression_statement -> expression_opt SEMI .)
    RETURN          reduce using rule 61 (expression_statement -> expression_opt SEMI .)
    PLUSPLUS        reduce using rule 61 (expression_statement -> expression_opt SEMI .)
    MINUSMINUS      reduce using rule 61 (expression_statement -> expression_opt SEMI .)
    AND             reduce using rule 61 (expression_statement -> expression_opt SEMI .)
    TIMES           reduce using rule 61 (expression_statement -> expression_opt SEMI .)
    PLUS            reduce using rule 61 (expression_statement -> expression_opt SEMI .)
    MINUS           reduce using rule 61 (expression_statement -> expression_opt SEMI .)
    LNOT            reduce using rule 61 (expression_statement -> expression_opt SEMI .)
    ID              reduce using rule 61 (expression_statement -> expression_opt SEMI .)
    SCONST          reduce using rule 61 (expression_statement -> expression_opt SEMI .)
    LPAREN          reduce using rule 61 (expression_statement -> expression_opt SEMI .)
    ICONST          reduce using rule 61 (expression_statement -> expression_opt SEMI .)
    FCONST          reduce using rule 61 (expression_statement -> expression_opt SEMI .)
    CCONST          reduce using rule 61 (expression_statement -> expression_opt SEMI .)
    SEMI            reduce using rule 61 (expression_statement -> expression_opt SEMI .)
    ELSE            reduce using rule 61 (expression_statement -> expression_opt SEMI .)


state 108

    (68) selection_statement -> IF LPAREN . expression RPAREN statement
    (69) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (76) expression -> . assignment_expression
    (77) expression -> . expression COMMA assignment_expression
    (78) assignment_expression -> . conditional_expression
    (79) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (87) inclusive_or_expression -> . exclusive_or_expression
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    LPAREN          shift and go to state 46
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    expression                     shift and go to state 156
    assignment_expression          shift and go to state 53
    conditional_expression         shift and go to state 54
    unary_expression               shift and go to state 55
    logical_or_expression          shift and go to state 56
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 61
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 69
    constant                       shift and go to state 71
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82

state 109

    (126) primary_expression -> LPAREN expression . RPAREN
    (77) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 157
    COMMA           shift and go to state 113


state 110

    (107) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 158


state 111

    (43) type_name -> specifier_qualifier_list . abstract_declarator_opt
    (44) abstract_declarator_opt -> . empty
    (45) abstract_declarator_opt -> . abstract_declarator
    (132) empty -> .
    (46) abstract_declarator -> . direct_abstract_declarator
    (47) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (48) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression_opt RBRACKET
    (49) direct_abstract_declarator -> . LBRACKET constant_expression_opt RBRACKET
    (50) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (51) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN

    RPAREN          reduce using rule 132 (empty -> .)
    LPAREN          shift and go to state 160
    LBRACKET        shift and go to state 151

    abstract_declarator_opt        shift and go to state 159
    empty                          shift and go to state 148
    abstract_declarator            shift and go to state 149
    direct_abstract_declarator     shift and go to state 152

state 112

    (22) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (23) specifier_qualifier_list -> type_specifier .
    (22) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (23) specifier_qualifier_list -> . type_specifier
    (15) type_specifier -> . VOID
    (16) type_specifier -> . INT
    (17) type_specifier -> . TYPEID

    LPAREN          reduce using rule 23 (specifier_qualifier_list -> type_specifier .)
    LBRACKET        reduce using rule 23 (specifier_qualifier_list -> type_specifier .)
    RPAREN          reduce using rule 23 (specifier_qualifier_list -> type_specifier .)
    VOID            shift and go to state 9
    INT             shift and go to state 10
    TYPEID          shift and go to state 11

    type_specifier                 shift and go to state 112
    specifier_qualifier_list       shift and go to state 161

state 113

    (77) expression -> expression COMMA . assignment_expression
    (78) assignment_expression -> . conditional_expression
    (79) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (87) inclusive_or_expression -> . exclusive_or_expression
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    LPAREN          shift and go to state 46
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    assignment_expression          shift and go to state 162
    conditional_expression         shift and go to state 54
    unary_expression               shift and go to state 55
    logical_or_expression          shift and go to state 56
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 61
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 69
    constant                       shift and go to state 71
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82

state 114

    (70) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (76) expression -> . assignment_expression
    (77) expression -> . expression COMMA assignment_expression
    (78) assignment_expression -> . conditional_expression
    (79) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (87) inclusive_or_expression -> . exclusive_or_expression
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    LPAREN          shift and go to state 46
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    expression                     shift and go to state 163
    assignment_expression          shift and go to state 53
    conditional_expression         shift and go to state 54
    unary_expression               shift and go to state 55
    logical_or_expression          shift and go to state 56
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 61
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 69
    constant                       shift and go to state 71
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82

state 115

    (71) iteration_statement -> FOR LPAREN . expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (74) expression_opt -> . empty
    (75) expression_opt -> . expression
    (132) empty -> .
    (76) expression -> . assignment_expression
    (77) expression -> . expression COMMA assignment_expression
    (78) assignment_expression -> . conditional_expression
    (79) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (87) inclusive_or_expression -> . exclusive_or_expression
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMI            reduce using rule 132 (empty -> .)
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    LPAREN          shift and go to state 46
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    expression_opt                 shift and go to state 164
    empty                          shift and go to state 52
    expression                     shift and go to state 47
    assignment_expression          shift and go to state 53
    conditional_expression         shift and go to state 54
    unary_expression               shift and go to state 55
    logical_or_expression          shift and go to state 56
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 61
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 69
    constant                       shift and go to state 71
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82

state 116

    (72) jump_statement -> BREAK SEMI .

    RBRACE          reduce using rule 72 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 72 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 72 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 72 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 72 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 72 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 72 (jump_statement -> BREAK SEMI .)
    PLUSPLUS        reduce using rule 72 (jump_statement -> BREAK SEMI .)
    MINUSMINUS      reduce using rule 72 (jump_statement -> BREAK SEMI .)
    AND             reduce using rule 72 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 72 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 72 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 72 (jump_statement -> BREAK SEMI .)
    LNOT            reduce using rule 72 (jump_statement -> BREAK SEMI .)
    ID              reduce using rule 72 (jump_statement -> BREAK SEMI .)
    SCONST          reduce using rule 72 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 72 (jump_statement -> BREAK SEMI .)
    ICONST          reduce using rule 72 (jump_statement -> BREAK SEMI .)
    FCONST          reduce using rule 72 (jump_statement -> BREAK SEMI .)
    CCONST          reduce using rule 72 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 72 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 72 (jump_statement -> BREAK SEMI .)


state 117

    (73) jump_statement -> RETURN expression_opt . SEMI

    SEMI            shift and go to state 165


state 118

    (79) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (78) assignment_expression -> . conditional_expression
    (79) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (87) inclusive_or_expression -> . exclusive_or_expression
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    LPAREN          shift and go to state 46
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    unary_expression               shift and go to state 55
    assignment_expression          shift and go to state 166
    conditional_expression         shift and go to state 54
    logical_or_expression          shift and go to state 56
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 61
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 69
    constant                       shift and go to state 71
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82

state 119

    (80) assignment_operator -> EQUALS .

    PLUSPLUS        reduce using rule 80 (assignment_operator -> EQUALS .)
    MINUSMINUS      reduce using rule 80 (assignment_operator -> EQUALS .)
    AND             reduce using rule 80 (assignment_operator -> EQUALS .)
    TIMES           reduce using rule 80 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 80 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 80 (assignment_operator -> EQUALS .)
    LNOT            reduce using rule 80 (assignment_operator -> EQUALS .)
    ID              reduce using rule 80 (assignment_operator -> EQUALS .)
    SCONST          reduce using rule 80 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 80 (assignment_operator -> EQUALS .)
    ICONST          reduce using rule 80 (assignment_operator -> EQUALS .)
    FCONST          reduce using rule 80 (assignment_operator -> EQUALS .)
    CCONST          reduce using rule 80 (assignment_operator -> EQUALS .)


state 120

    (84) logical_or_expression -> logical_or_expression LOR . logical_and_expression
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (87) inclusive_or_expression -> . exclusive_or_expression
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST

    LPAREN          shift and go to state 89
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    logical_and_expression         shift and go to state 167
    inclusive_or_expression        shift and go to state 69
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82
    cast_expression                shift and go to state 61
    unary_expression               shift and go to state 88
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    primary_expression             shift and go to state 63
    constant                       shift and go to state 71

state 121

    (118) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (76) expression -> . assignment_expression
    (77) expression -> . expression COMMA assignment_expression
    (78) assignment_expression -> . conditional_expression
    (79) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (87) inclusive_or_expression -> . exclusive_or_expression
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    LPAREN          shift and go to state 46
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    postfix_expression             shift and go to state 57
    expression                     shift and go to state 168
    assignment_expression          shift and go to state 53
    conditional_expression         shift and go to state 54
    unary_expression               shift and go to state 55
    logical_or_expression          shift and go to state 56
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 61
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 69
    constant                       shift and go to state 71
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82

state 122

    (119) postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN
    (120) postfix_expression -> postfix_expression LPAREN . RPAREN
    (127) argument_expression_list -> . assignment_expression
    (128) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (78) assignment_expression -> . conditional_expression
    (79) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (87) inclusive_or_expression -> . exclusive_or_expression
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 170
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    LPAREN          shift and go to state 46
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    postfix_expression             shift and go to state 57
    argument_expression_list       shift and go to state 169
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 54
    unary_expression               shift and go to state 55
    logical_or_expression          shift and go to state 56
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 61
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 69
    constant                       shift and go to state 71
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82

state 123

    (121) postfix_expression -> postfix_expression PLUSPLUS .

    LBRACKET        reduce using rule 121 (postfix_expression -> postfix_expression PLUSPLUS .)
    LPAREN          reduce using rule 121 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSPLUS        reduce using rule 121 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 121 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQUALS          reduce using rule 121 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMES           reduce using rule 121 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVIDE          reduce using rule 121 (postfix_expression -> postfix_expression PLUSPLUS .)
    MOD             reduce using rule 121 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUS            reduce using rule 121 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUS           reduce using rule 121 (postfix_expression -> postfix_expression PLUSPLUS .)
    LT              reduce using rule 121 (postfix_expression -> postfix_expression PLUSPLUS .)
    GT              reduce using rule 121 (postfix_expression -> postfix_expression PLUSPLUS .)
    LE              reduce using rule 121 (postfix_expression -> postfix_expression PLUSPLUS .)
    GE              reduce using rule 121 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQ              reduce using rule 121 (postfix_expression -> postfix_expression PLUSPLUS .)
    AND             reduce using rule 121 (postfix_expression -> postfix_expression PLUSPLUS .)
    LAND            reduce using rule 121 (postfix_expression -> postfix_expression PLUSPLUS .)
    LOR             reduce using rule 121 (postfix_expression -> postfix_expression PLUSPLUS .)
    COMMA           reduce using rule 121 (postfix_expression -> postfix_expression PLUSPLUS .)
    SEMI            reduce using rule 121 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACKET        reduce using rule 121 (postfix_expression -> postfix_expression PLUSPLUS .)
    RPAREN          reduce using rule 121 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACE          reduce using rule 121 (postfix_expression -> postfix_expression PLUSPLUS .)


state 124

    (122) postfix_expression -> postfix_expression MINUSMINUS .

    LBRACKET        reduce using rule 122 (postfix_expression -> postfix_expression MINUSMINUS .)
    LPAREN          reduce using rule 122 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSPLUS        reduce using rule 122 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 122 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQUALS          reduce using rule 122 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMES           reduce using rule 122 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVIDE          reduce using rule 122 (postfix_expression -> postfix_expression MINUSMINUS .)
    MOD             reduce using rule 122 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUS            reduce using rule 122 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUS           reduce using rule 122 (postfix_expression -> postfix_expression MINUSMINUS .)
    LT              reduce using rule 122 (postfix_expression -> postfix_expression MINUSMINUS .)
    GT              reduce using rule 122 (postfix_expression -> postfix_expression MINUSMINUS .)
    LE              reduce using rule 122 (postfix_expression -> postfix_expression MINUSMINUS .)
    GE              reduce using rule 122 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQ              reduce using rule 122 (postfix_expression -> postfix_expression MINUSMINUS .)
    AND             reduce using rule 122 (postfix_expression -> postfix_expression MINUSMINUS .)
    LAND            reduce using rule 122 (postfix_expression -> postfix_expression MINUSMINUS .)
    LOR             reduce using rule 122 (postfix_expression -> postfix_expression MINUSMINUS .)
    COMMA           reduce using rule 122 (postfix_expression -> postfix_expression MINUSMINUS .)
    SEMI            reduce using rule 122 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACKET        reduce using rule 122 (postfix_expression -> postfix_expression MINUSMINUS .)
    RPAREN          reduce using rule 122 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACE          reduce using rule 122 (postfix_expression -> postfix_expression MINUSMINUS .)


state 125

    (109) unary_expression -> PLUSPLUS unary_expression .

    EQUALS          reduce using rule 109 (unary_expression -> PLUSPLUS unary_expression .)
    TIMES           reduce using rule 109 (unary_expression -> PLUSPLUS unary_expression .)
    DIVIDE          reduce using rule 109 (unary_expression -> PLUSPLUS unary_expression .)
    MOD             reduce using rule 109 (unary_expression -> PLUSPLUS unary_expression .)
    PLUS            reduce using rule 109 (unary_expression -> PLUSPLUS unary_expression .)
    MINUS           reduce using rule 109 (unary_expression -> PLUSPLUS unary_expression .)
    LT              reduce using rule 109 (unary_expression -> PLUSPLUS unary_expression .)
    GT              reduce using rule 109 (unary_expression -> PLUSPLUS unary_expression .)
    LE              reduce using rule 109 (unary_expression -> PLUSPLUS unary_expression .)
    GE              reduce using rule 109 (unary_expression -> PLUSPLUS unary_expression .)
    EQ              reduce using rule 109 (unary_expression -> PLUSPLUS unary_expression .)
    AND             reduce using rule 109 (unary_expression -> PLUSPLUS unary_expression .)
    LAND            reduce using rule 109 (unary_expression -> PLUSPLUS unary_expression .)
    LOR             reduce using rule 109 (unary_expression -> PLUSPLUS unary_expression .)
    COMMA           reduce using rule 109 (unary_expression -> PLUSPLUS unary_expression .)
    SEMI            reduce using rule 109 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACKET        reduce using rule 109 (unary_expression -> PLUSPLUS unary_expression .)
    RPAREN          reduce using rule 109 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACE          reduce using rule 109 (unary_expression -> PLUSPLUS unary_expression .)


state 126

    (126) primary_expression -> LPAREN . expression RPAREN
    (76) expression -> . assignment_expression
    (77) expression -> . expression COMMA assignment_expression
    (78) assignment_expression -> . conditional_expression
    (79) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (87) inclusive_or_expression -> . exclusive_or_expression
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    LPAREN          shift and go to state 46
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    expression                     shift and go to state 109
    assignment_expression          shift and go to state 53
    conditional_expression         shift and go to state 54
    unary_expression               shift and go to state 55
    logical_or_expression          shift and go to state 56
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 61
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 69
    constant                       shift and go to state 71
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82

state 127

    (110) unary_expression -> MINUSMINUS unary_expression .

    EQUALS          reduce using rule 110 (unary_expression -> MINUSMINUS unary_expression .)
    TIMES           reduce using rule 110 (unary_expression -> MINUSMINUS unary_expression .)
    DIVIDE          reduce using rule 110 (unary_expression -> MINUSMINUS unary_expression .)
    MOD             reduce using rule 110 (unary_expression -> MINUSMINUS unary_expression .)
    PLUS            reduce using rule 110 (unary_expression -> MINUSMINUS unary_expression .)
    MINUS           reduce using rule 110 (unary_expression -> MINUSMINUS unary_expression .)
    LT              reduce using rule 110 (unary_expression -> MINUSMINUS unary_expression .)
    GT              reduce using rule 110 (unary_expression -> MINUSMINUS unary_expression .)
    LE              reduce using rule 110 (unary_expression -> MINUSMINUS unary_expression .)
    GE              reduce using rule 110 (unary_expression -> MINUSMINUS unary_expression .)
    EQ              reduce using rule 110 (unary_expression -> MINUSMINUS unary_expression .)
    AND             reduce using rule 110 (unary_expression -> MINUSMINUS unary_expression .)
    LAND            reduce using rule 110 (unary_expression -> MINUSMINUS unary_expression .)
    LOR             reduce using rule 110 (unary_expression -> MINUSMINUS unary_expression .)
    COMMA           reduce using rule 110 (unary_expression -> MINUSMINUS unary_expression .)
    SEMI            reduce using rule 110 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACKET        reduce using rule 110 (unary_expression -> MINUSMINUS unary_expression .)
    RPAREN          reduce using rule 110 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACE          reduce using rule 110 (unary_expression -> MINUSMINUS unary_expression .)


state 128

    (111) unary_expression -> unary_operator cast_expression .

    EQUALS          reduce using rule 111 (unary_expression -> unary_operator cast_expression .)
    TIMES           reduce using rule 111 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 111 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 111 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 111 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 111 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 111 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 111 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 111 (unary_expression -> unary_operator cast_expression .)
    GE              reduce using rule 111 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 111 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 111 (unary_expression -> unary_operator cast_expression .)
    LAND            reduce using rule 111 (unary_expression -> unary_operator cast_expression .)
    LOR             reduce using rule 111 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 111 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 111 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 111 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 111 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 111 (unary_expression -> unary_operator cast_expression .)


state 129

    (86) logical_and_expression -> logical_and_expression LAND . inclusive_or_expression
    (87) inclusive_or_expression -> . exclusive_or_expression
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST

    LPAREN          shift and go to state 89
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    inclusive_or_expression        shift and go to state 172
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82
    cast_expression                shift and go to state 61
    unary_expression               shift and go to state 88
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    primary_expression             shift and go to state 63
    constant                       shift and go to state 71

state 130

    (90) and_expression -> and_expression AND . equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST

    LPAREN          shift and go to state 89
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    equality_expression            shift and go to state 173
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82
    cast_expression                shift and go to state 61
    unary_expression               shift and go to state 88
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    primary_expression             shift and go to state 63
    constant                       shift and go to state 71

state 131

    (92) equality_expression -> equality_expression EQ . relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST

    LPAREN          shift and go to state 89
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    relational_expression          shift and go to state 174
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82
    cast_expression                shift and go to state 61
    unary_expression               shift and go to state 88
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    primary_expression             shift and go to state 63
    constant                       shift and go to state 71

state 132

    (94) relational_expression -> relational_expression LT . shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST

    LPAREN          shift and go to state 89
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    shift_expression               shift and go to state 175
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82
    cast_expression                shift and go to state 61
    unary_expression               shift and go to state 88
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    primary_expression             shift and go to state 63
    constant                       shift and go to state 71

state 133

    (95) relational_expression -> relational_expression GT . shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST

    LPAREN          shift and go to state 89
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    shift_expression               shift and go to state 176
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82
    cast_expression                shift and go to state 61
    unary_expression               shift and go to state 88
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    primary_expression             shift and go to state 63
    constant                       shift and go to state 71

state 134

    (96) relational_expression -> relational_expression LE . shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST

    LPAREN          shift and go to state 89
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    shift_expression               shift and go to state 177
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82
    cast_expression                shift and go to state 61
    unary_expression               shift and go to state 88
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    primary_expression             shift and go to state 63
    constant                       shift and go to state 71

state 135

    (97) relational_expression -> relational_expression GE . shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST

    LPAREN          shift and go to state 89
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82
    cast_expression                shift and go to state 61
    unary_expression               shift and go to state 88
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    primary_expression             shift and go to state 63
    constant                       shift and go to state 71

state 136

    (100) additive_expression -> additive_expression PLUS . multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST

    LPAREN          shift and go to state 89
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    multiplicative_expression      shift and go to state 179
    cast_expression                shift and go to state 61
    unary_expression               shift and go to state 88
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    primary_expression             shift and go to state 63
    constant                       shift and go to state 71

state 137

    (101) additive_expression -> additive_expression MINUS . multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST

    LPAREN          shift and go to state 89
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    multiplicative_expression      shift and go to state 180
    cast_expression                shift and go to state 61
    unary_expression               shift and go to state 88
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    primary_expression             shift and go to state 63
    constant                       shift and go to state 71

state 138

    (103) multiplicative_expression -> multiplicative_expression TIMES . cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST

    LPAREN          shift and go to state 89
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    cast_expression                shift and go to state 181
    unary_expression               shift and go to state 88
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    primary_expression             shift and go to state 63
    constant                       shift and go to state 71

state 139

    (104) multiplicative_expression -> multiplicative_expression DIVIDE . cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST

    LPAREN          shift and go to state 89
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    cast_expression                shift and go to state 182
    unary_expression               shift and go to state 88
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    primary_expression             shift and go to state 63
    constant                       shift and go to state 71

state 140

    (105) multiplicative_expression -> multiplicative_expression MOD . cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST

    LPAREN          shift and go to state 89
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    cast_expression                shift and go to state 183
    unary_expression               shift and go to state 88
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    primary_expression             shift and go to state 63
    constant                       shift and go to state 71

state 141

    (27) direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .

    LBRACKET        reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    LPAREN          reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    LBRACE          reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    VOID            reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    INT             reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    TYPEID          reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    EQUALS          reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    SEMI            reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    COMMA           reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    RPAREN          reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)


state 142

    (28) direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 28 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 28 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LBRACE          reduce using rule 28 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOID            reduce using rule 28 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    INT             reduce using rule 28 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    TYPEID          reduce using rule 28 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EQUALS          reduce using rule 28 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SEMI            reduce using rule 28 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 28 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 28 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)


state 143

    (29) direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .

    LBRACKET        reduce using rule 29 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LPAREN          reduce using rule 29 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LBRACE          reduce using rule 29 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    VOID            reduce using rule 29 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    INT             reduce using rule 29 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    TYPEID          reduce using rule 29 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    EQUALS          reduce using rule 29 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SEMI            reduce using rule 29 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    COMMA           reduce using rule 29 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    RPAREN          reduce using rule 29 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)


state 144

    (37) identifier_list -> identifier_list COMMA . ID

    ID              shift and go to state 184


state 145

    (33) parameter_list -> parameter_list COMMA . parameter_declaration
    (34) parameter_declaration -> . declaration_specifiers declarator
    (35) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (13) declaration_specifiers -> . type_specifier declaration_specifiers
    (14) declaration_specifiers -> . type_specifier
    (15) type_specifier -> . VOID
    (16) type_specifier -> . INT
    (17) type_specifier -> . TYPEID

    VOID            shift and go to state 9
    INT             shift and go to state 10
    TYPEID          shift and go to state 11

    parameter_declaration          shift and go to state 185
    declaration_specifiers         shift and go to state 96
    type_specifier                 shift and go to state 7

state 146

    (34) parameter_declaration -> declaration_specifiers declarator .

    COMMA           reduce using rule 34 (parameter_declaration -> declaration_specifiers declarator .)
    RPAREN          reduce using rule 34 (parameter_declaration -> declaration_specifiers declarator .)


state 147

    (35) parameter_declaration -> declaration_specifiers abstract_declarator_opt .

    COMMA           reduce using rule 35 (parameter_declaration -> declaration_specifiers abstract_declarator_opt .)
    RPAREN          reduce using rule 35 (parameter_declaration -> declaration_specifiers abstract_declarator_opt .)


state 148

    (44) abstract_declarator_opt -> empty .

    COMMA           reduce using rule 44 (abstract_declarator_opt -> empty .)
    RPAREN          reduce using rule 44 (abstract_declarator_opt -> empty .)


state 149

    (45) abstract_declarator_opt -> abstract_declarator .

    COMMA           reduce using rule 45 (abstract_declarator_opt -> abstract_declarator .)
    RPAREN          reduce using rule 45 (abstract_declarator_opt -> abstract_declarator .)


state 150

    (26) direct_declarator -> LPAREN . declarator RPAREN
    (47) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (51) direct_abstract_declarator -> LPAREN . parameter_type_list_opt RPAREN
    (24) declarator -> . direct_declarator
    (46) abstract_declarator -> . direct_abstract_declarator
    (54) parameter_type_list_opt -> . empty
    (55) parameter_type_list_opt -> . parameter_type_list
    (25) direct_declarator -> . ID
    (26) direct_declarator -> . LPAREN declarator RPAREN
    (27) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (28) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (29) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (30) direct_declarator -> . direct_declarator LPAREN RPAREN
    (47) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (48) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression_opt RBRACKET
    (49) direct_abstract_declarator -> . LBRACKET constant_expression_opt RBRACKET
    (50) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (51) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN
    (132) empty -> .
    (31) parameter_type_list -> . parameter_list
    (32) parameter_list -> . parameter_declaration
    (33) parameter_list -> . parameter_list COMMA parameter_declaration
    (34) parameter_declaration -> . declaration_specifiers declarator
    (35) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (13) declaration_specifiers -> . type_specifier declaration_specifiers
    (14) declaration_specifiers -> . type_specifier
    (15) type_specifier -> . VOID
    (16) type_specifier -> . INT
    (17) type_specifier -> . TYPEID

    ID              shift and go to state 12
    LPAREN          shift and go to state 150
    LBRACKET        shift and go to state 151
    RPAREN          reduce using rule 132 (empty -> .)
    VOID            shift and go to state 9
    INT             shift and go to state 10
    TYPEID          shift and go to state 11

    declarator                     shift and go to state 27
    abstract_declarator            shift and go to state 186
    parameter_type_list_opt        shift and go to state 187
    direct_declarator              shift and go to state 8
    direct_abstract_declarator     shift and go to state 152
    empty                          shift and go to state 188
    parameter_type_list            shift and go to state 189
    parameter_list                 shift and go to state 93
    parameter_declaration          shift and go to state 95
    declaration_specifiers         shift and go to state 96
    type_specifier                 shift and go to state 7

state 151

    (49) direct_abstract_declarator -> LBRACKET . constant_expression_opt RBRACKET
    (52) constant_expression_opt -> . empty
    (53) constant_expression_opt -> . constant_expression
    (132) empty -> .
    (82) constant_expression -> . conditional_expression
    (81) conditional_expression -> . logical_or_expression
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (87) inclusive_or_expression -> . exclusive_or_expression
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST

    RBRACKET        reduce using rule 132 (empty -> .)
    LPAREN          shift and go to state 89
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    constant_expression_opt        shift and go to state 190
    empty                          shift and go to state 85
    constant_expression            shift and go to state 86
    conditional_expression         shift and go to state 87
    logical_or_expression          shift and go to state 56
    logical_and_expression         shift and go to state 62
    inclusive_or_expression        shift and go to state 69
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82
    cast_expression                shift and go to state 61
    unary_expression               shift and go to state 88
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    primary_expression             shift and go to state 63
    constant                       shift and go to state 71

state 152

    (46) abstract_declarator -> direct_abstract_declarator .
    (48) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET constant_expression_opt RBRACKET
    (50) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list_opt RPAREN

    COMMA           reduce using rule 46 (abstract_declarator -> direct_abstract_declarator .)
    RPAREN          reduce using rule 46 (abstract_declarator -> direct_abstract_declarator .)
    LBRACKET        shift and go to state 191
    LPAREN          shift and go to state 192


state 153

    (39) initializer -> LBRACE initializer_list . RBRACE
    (40) initializer -> LBRACE initializer_list . COMMA RBRACE
    (42) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 193
    COMMA           shift and go to state 194


state 154

    (41) initializer_list -> initializer .

    RBRACE          reduce using rule 41 (initializer_list -> initializer .)
    COMMA           reduce using rule 41 (initializer_list -> initializer .)


state 155

    (62) compound_statement -> LBRACE declaration_list statement_list RBRACE .

    VOID            reduce using rule 62 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INT             reduce using rule 62 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    TYPEID          reduce using rule 62 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ID              reduce using rule 62 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LPAREN          reduce using rule 62 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    $end            reduce using rule 62 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    RBRACE          reduce using rule 62 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LBRACE          reduce using rule 62 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    IF              reduce using rule 62 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    WHILE           reduce using rule 62 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    FOR             reduce using rule 62 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    BREAK           reduce using rule 62 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    RETURN          reduce using rule 62 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    PLUSPLUS        reduce using rule 62 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    MINUSMINUS      reduce using rule 62 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    AND             reduce using rule 62 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    TIMES           reduce using rule 62 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    PLUS            reduce using rule 62 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    MINUS           reduce using rule 62 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LNOT            reduce using rule 62 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SCONST          reduce using rule 62 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ICONST          reduce using rule 62 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    FCONST          reduce using rule 62 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CCONST          reduce using rule 62 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SEMI            reduce using rule 62 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ELSE            reduce using rule 62 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)


state 156

    (68) selection_statement -> IF LPAREN expression . RPAREN statement
    (69) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (77) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 195
    COMMA           shift and go to state 113


state 157

    (126) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 126 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 126 (primary_expression -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 126 (primary_expression -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 126 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 126 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 126 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 126 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 126 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 126 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 126 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 126 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 126 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 126 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 126 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 126 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 126 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 126 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 126 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 126 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 126 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 126 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 126 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 126 (primary_expression -> LPAREN expression RPAREN .)


state 158

    (107) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST

    LPAREN          shift and go to state 89
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    cast_expression                shift and go to state 196
    unary_expression               shift and go to state 88
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    primary_expression             shift and go to state 63
    constant                       shift and go to state 71

state 159

    (43) type_name -> specifier_qualifier_list abstract_declarator_opt .

    RPAREN          reduce using rule 43 (type_name -> specifier_qualifier_list abstract_declarator_opt .)


state 160

    (47) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (51) direct_abstract_declarator -> LPAREN . parameter_type_list_opt RPAREN
    (46) abstract_declarator -> . direct_abstract_declarator
    (54) parameter_type_list_opt -> . empty
    (55) parameter_type_list_opt -> . parameter_type_list
    (47) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (48) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression_opt RBRACKET
    (49) direct_abstract_declarator -> . LBRACKET constant_expression_opt RBRACKET
    (50) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (51) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN
    (132) empty -> .
    (31) parameter_type_list -> . parameter_list
    (32) parameter_list -> . parameter_declaration
    (33) parameter_list -> . parameter_list COMMA parameter_declaration
    (34) parameter_declaration -> . declaration_specifiers declarator
    (35) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (13) declaration_specifiers -> . type_specifier declaration_specifiers
    (14) declaration_specifiers -> . type_specifier
    (15) type_specifier -> . VOID
    (16) type_specifier -> . INT
    (17) type_specifier -> . TYPEID

    LPAREN          shift and go to state 160
    LBRACKET        shift and go to state 151
    RPAREN          reduce using rule 132 (empty -> .)
    VOID            shift and go to state 9
    INT             shift and go to state 10
    TYPEID          shift and go to state 11

    abstract_declarator            shift and go to state 186
    parameter_type_list_opt        shift and go to state 187
    direct_abstract_declarator     shift and go to state 152
    empty                          shift and go to state 188
    parameter_type_list            shift and go to state 189
    parameter_list                 shift and go to state 93
    parameter_declaration          shift and go to state 95
    declaration_specifiers         shift and go to state 96
    type_specifier                 shift and go to state 7

state 161

    (22) specifier_qualifier_list -> type_specifier specifier_qualifier_list .

    LPAREN          reduce using rule 22 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    LBRACKET        reduce using rule 22 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    RPAREN          reduce using rule 22 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)


state 162

    (77) expression -> expression COMMA assignment_expression .

    COMMA           reduce using rule 77 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 77 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 77 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 77 (expression -> expression COMMA assignment_expression .)


state 163

    (70) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (77) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 197
    COMMA           shift and go to state 113


state 164

    (71) iteration_statement -> FOR LPAREN expression_opt . SEMI expression_opt SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 198


state 165

    (73) jump_statement -> RETURN expression_opt SEMI .

    RBRACE          reduce using rule 73 (jump_statement -> RETURN expression_opt SEMI .)
    LBRACE          reduce using rule 73 (jump_statement -> RETURN expression_opt SEMI .)
    IF              reduce using rule 73 (jump_statement -> RETURN expression_opt SEMI .)
    WHILE           reduce using rule 73 (jump_statement -> RETURN expression_opt SEMI .)
    FOR             reduce using rule 73 (jump_statement -> RETURN expression_opt SEMI .)
    BREAK           reduce using rule 73 (jump_statement -> RETURN expression_opt SEMI .)
    RETURN          reduce using rule 73 (jump_statement -> RETURN expression_opt SEMI .)
    PLUSPLUS        reduce using rule 73 (jump_statement -> RETURN expression_opt SEMI .)
    MINUSMINUS      reduce using rule 73 (jump_statement -> RETURN expression_opt SEMI .)
    AND             reduce using rule 73 (jump_statement -> RETURN expression_opt SEMI .)
    TIMES           reduce using rule 73 (jump_statement -> RETURN expression_opt SEMI .)
    PLUS            reduce using rule 73 (jump_statement -> RETURN expression_opt SEMI .)
    MINUS           reduce using rule 73 (jump_statement -> RETURN expression_opt SEMI .)
    LNOT            reduce using rule 73 (jump_statement -> RETURN expression_opt SEMI .)
    ID              reduce using rule 73 (jump_statement -> RETURN expression_opt SEMI .)
    SCONST          reduce using rule 73 (jump_statement -> RETURN expression_opt SEMI .)
    LPAREN          reduce using rule 73 (jump_statement -> RETURN expression_opt SEMI .)
    ICONST          reduce using rule 73 (jump_statement -> RETURN expression_opt SEMI .)
    FCONST          reduce using rule 73 (jump_statement -> RETURN expression_opt SEMI .)
    CCONST          reduce using rule 73 (jump_statement -> RETURN expression_opt SEMI .)
    SEMI            reduce using rule 73 (jump_statement -> RETURN expression_opt SEMI .)
    ELSE            reduce using rule 73 (jump_statement -> RETURN expression_opt SEMI .)


state 166

    (79) assignment_expression -> unary_expression assignment_operator assignment_expression .

    COMMA           reduce using rule 79 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMI            reduce using rule 79 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 79 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 79 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 79 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 167

    (84) logical_or_expression -> logical_or_expression LOR logical_and_expression .
    (86) logical_and_expression -> logical_and_expression . LAND inclusive_or_expression

    LOR             reduce using rule 84 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    COMMA           reduce using rule 84 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    SEMI            reduce using rule 84 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RBRACKET        reduce using rule 84 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RPAREN          reduce using rule 84 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RBRACE          reduce using rule 84 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    LAND            shift and go to state 129


state 168

    (118) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (77) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 199
    COMMA           shift and go to state 113


state 169

    (119) postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN
    (128) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 200
    COMMA           shift and go to state 201


state 170

    (120) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBRACKET        reduce using rule 120 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 120 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSPLUS        reduce using rule 120 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSMINUS      reduce using rule 120 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 120 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 120 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 120 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 120 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 120 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 120 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 120 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT              reduce using rule 120 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LE              reduce using rule 120 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GE              reduce using rule 120 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 120 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 120 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LAND            reduce using rule 120 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LOR             reduce using rule 120 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 120 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMI            reduce using rule 120 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 120 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 120 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 120 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 171

    (127) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 127 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 127 (argument_expression_list -> assignment_expression .)


state 172

    (86) logical_and_expression -> logical_and_expression LAND inclusive_or_expression .

    LAND            reduce using rule 86 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    LOR             reduce using rule 86 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    COMMA           reduce using rule 86 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    SEMI            reduce using rule 86 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RBRACKET        reduce using rule 86 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RPAREN          reduce using rule 86 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RBRACE          reduce using rule 86 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)


state 173

    (90) and_expression -> and_expression AND equality_expression .
    (92) equality_expression -> equality_expression . EQ relational_expression

    AND             reduce using rule 90 (and_expression -> and_expression AND equality_expression .)
    LAND            reduce using rule 90 (and_expression -> and_expression AND equality_expression .)
    LOR             reduce using rule 90 (and_expression -> and_expression AND equality_expression .)
    COMMA           reduce using rule 90 (and_expression -> and_expression AND equality_expression .)
    SEMI            reduce using rule 90 (and_expression -> and_expression AND equality_expression .)
    RBRACKET        reduce using rule 90 (and_expression -> and_expression AND equality_expression .)
    RPAREN          reduce using rule 90 (and_expression -> and_expression AND equality_expression .)
    RBRACE          reduce using rule 90 (and_expression -> and_expression AND equality_expression .)
    EQ              shift and go to state 131


state 174

    (92) equality_expression -> equality_expression EQ relational_expression .
    (94) relational_expression -> relational_expression . LT shift_expression
    (95) relational_expression -> relational_expression . GT shift_expression
    (96) relational_expression -> relational_expression . LE shift_expression
    (97) relational_expression -> relational_expression . GE shift_expression

    EQ              reduce using rule 92 (equality_expression -> equality_expression EQ relational_expression .)
    AND             reduce using rule 92 (equality_expression -> equality_expression EQ relational_expression .)
    LAND            reduce using rule 92 (equality_expression -> equality_expression EQ relational_expression .)
    LOR             reduce using rule 92 (equality_expression -> equality_expression EQ relational_expression .)
    COMMA           reduce using rule 92 (equality_expression -> equality_expression EQ relational_expression .)
    SEMI            reduce using rule 92 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACKET        reduce using rule 92 (equality_expression -> equality_expression EQ relational_expression .)
    RPAREN          reduce using rule 92 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACE          reduce using rule 92 (equality_expression -> equality_expression EQ relational_expression .)
    LT              shift and go to state 132
    GT              shift and go to state 133
    LE              shift and go to state 134
    GE              shift and go to state 135


state 175

    (94) relational_expression -> relational_expression LT shift_expression .

    LT              reduce using rule 94 (relational_expression -> relational_expression LT shift_expression .)
    GT              reduce using rule 94 (relational_expression -> relational_expression LT shift_expression .)
    LE              reduce using rule 94 (relational_expression -> relational_expression LT shift_expression .)
    GE              reduce using rule 94 (relational_expression -> relational_expression LT shift_expression .)
    EQ              reduce using rule 94 (relational_expression -> relational_expression LT shift_expression .)
    AND             reduce using rule 94 (relational_expression -> relational_expression LT shift_expression .)
    LAND            reduce using rule 94 (relational_expression -> relational_expression LT shift_expression .)
    LOR             reduce using rule 94 (relational_expression -> relational_expression LT shift_expression .)
    COMMA           reduce using rule 94 (relational_expression -> relational_expression LT shift_expression .)
    SEMI            reduce using rule 94 (relational_expression -> relational_expression LT shift_expression .)
    RBRACKET        reduce using rule 94 (relational_expression -> relational_expression LT shift_expression .)
    RPAREN          reduce using rule 94 (relational_expression -> relational_expression LT shift_expression .)
    RBRACE          reduce using rule 94 (relational_expression -> relational_expression LT shift_expression .)


state 176

    (95) relational_expression -> relational_expression GT shift_expression .

    LT              reduce using rule 95 (relational_expression -> relational_expression GT shift_expression .)
    GT              reduce using rule 95 (relational_expression -> relational_expression GT shift_expression .)
    LE              reduce using rule 95 (relational_expression -> relational_expression GT shift_expression .)
    GE              reduce using rule 95 (relational_expression -> relational_expression GT shift_expression .)
    EQ              reduce using rule 95 (relational_expression -> relational_expression GT shift_expression .)
    AND             reduce using rule 95 (relational_expression -> relational_expression GT shift_expression .)
    LAND            reduce using rule 95 (relational_expression -> relational_expression GT shift_expression .)
    LOR             reduce using rule 95 (relational_expression -> relational_expression GT shift_expression .)
    COMMA           reduce using rule 95 (relational_expression -> relational_expression GT shift_expression .)
    SEMI            reduce using rule 95 (relational_expression -> relational_expression GT shift_expression .)
    RBRACKET        reduce using rule 95 (relational_expression -> relational_expression GT shift_expression .)
    RPAREN          reduce using rule 95 (relational_expression -> relational_expression GT shift_expression .)
    RBRACE          reduce using rule 95 (relational_expression -> relational_expression GT shift_expression .)


state 177

    (96) relational_expression -> relational_expression LE shift_expression .

    LT              reduce using rule 96 (relational_expression -> relational_expression LE shift_expression .)
    GT              reduce using rule 96 (relational_expression -> relational_expression LE shift_expression .)
    LE              reduce using rule 96 (relational_expression -> relational_expression LE shift_expression .)
    GE              reduce using rule 96 (relational_expression -> relational_expression LE shift_expression .)
    EQ              reduce using rule 96 (relational_expression -> relational_expression LE shift_expression .)
    AND             reduce using rule 96 (relational_expression -> relational_expression LE shift_expression .)
    LAND            reduce using rule 96 (relational_expression -> relational_expression LE shift_expression .)
    LOR             reduce using rule 96 (relational_expression -> relational_expression LE shift_expression .)
    COMMA           reduce using rule 96 (relational_expression -> relational_expression LE shift_expression .)
    SEMI            reduce using rule 96 (relational_expression -> relational_expression LE shift_expression .)
    RBRACKET        reduce using rule 96 (relational_expression -> relational_expression LE shift_expression .)
    RPAREN          reduce using rule 96 (relational_expression -> relational_expression LE shift_expression .)
    RBRACE          reduce using rule 96 (relational_expression -> relational_expression LE shift_expression .)


state 178

    (97) relational_expression -> relational_expression GE shift_expression .

    LT              reduce using rule 97 (relational_expression -> relational_expression GE shift_expression .)
    GT              reduce using rule 97 (relational_expression -> relational_expression GE shift_expression .)
    LE              reduce using rule 97 (relational_expression -> relational_expression GE shift_expression .)
    GE              reduce using rule 97 (relational_expression -> relational_expression GE shift_expression .)
    EQ              reduce using rule 97 (relational_expression -> relational_expression GE shift_expression .)
    AND             reduce using rule 97 (relational_expression -> relational_expression GE shift_expression .)
    LAND            reduce using rule 97 (relational_expression -> relational_expression GE shift_expression .)
    LOR             reduce using rule 97 (relational_expression -> relational_expression GE shift_expression .)
    COMMA           reduce using rule 97 (relational_expression -> relational_expression GE shift_expression .)
    SEMI            reduce using rule 97 (relational_expression -> relational_expression GE shift_expression .)
    RBRACKET        reduce using rule 97 (relational_expression -> relational_expression GE shift_expression .)
    RPAREN          reduce using rule 97 (relational_expression -> relational_expression GE shift_expression .)
    RBRACE          reduce using rule 97 (relational_expression -> relational_expression GE shift_expression .)


state 179

    (100) additive_expression -> additive_expression PLUS multiplicative_expression .
    (103) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (104) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (105) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 100 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 100 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT              reduce using rule 100 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT              reduce using rule 100 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE              reduce using rule 100 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE              reduce using rule 100 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ              reduce using rule 100 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 100 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LAND            reduce using rule 100 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOR             reduce using rule 100 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 100 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMI            reduce using rule 100 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 100 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 100 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACE          reduce using rule 100 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 138
    DIVIDE          shift and go to state 139
    MOD             shift and go to state 140


state 180

    (101) additive_expression -> additive_expression MINUS multiplicative_expression .
    (103) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (104) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (105) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 101 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 101 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT              reduce using rule 101 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT              reduce using rule 101 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE              reduce using rule 101 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE              reduce using rule 101 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ              reduce using rule 101 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 101 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LAND            reduce using rule 101 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOR             reduce using rule 101 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 101 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMI            reduce using rule 101 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 101 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 101 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACE          reduce using rule 101 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 138
    DIVIDE          shift and go to state 139
    MOD             shift and go to state 140


state 181

    (103) multiplicative_expression -> multiplicative_expression TIMES cast_expression .

    TIMES           reduce using rule 103 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    DIVIDE          reduce using rule 103 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MOD             reduce using rule 103 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    PLUS            reduce using rule 103 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MINUS           reduce using rule 103 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LT              reduce using rule 103 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GT              reduce using rule 103 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LE              reduce using rule 103 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GE              reduce using rule 103 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    EQ              reduce using rule 103 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    AND             reduce using rule 103 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LAND            reduce using rule 103 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LOR             reduce using rule 103 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COMMA           reduce using rule 103 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    SEMI            reduce using rule 103 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RBRACKET        reduce using rule 103 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RPAREN          reduce using rule 103 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RBRACE          reduce using rule 103 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)


state 182

    (104) multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .

    TIMES           reduce using rule 104 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    DIVIDE          reduce using rule 104 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MOD             reduce using rule 104 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    PLUS            reduce using rule 104 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MINUS           reduce using rule 104 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LT              reduce using rule 104 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GT              reduce using rule 104 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LE              reduce using rule 104 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GE              reduce using rule 104 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    EQ              reduce using rule 104 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    AND             reduce using rule 104 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LAND            reduce using rule 104 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LOR             reduce using rule 104 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COMMA           reduce using rule 104 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    SEMI            reduce using rule 104 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RBRACKET        reduce using rule 104 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RPAREN          reduce using rule 104 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RBRACE          reduce using rule 104 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)


state 183

    (105) multiplicative_expression -> multiplicative_expression MOD cast_expression .

    TIMES           reduce using rule 105 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    DIVIDE          reduce using rule 105 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MOD             reduce using rule 105 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    PLUS            reduce using rule 105 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MINUS           reduce using rule 105 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LT              reduce using rule 105 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GT              reduce using rule 105 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LE              reduce using rule 105 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GE              reduce using rule 105 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    EQ              reduce using rule 105 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    AND             reduce using rule 105 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LAND            reduce using rule 105 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LOR             reduce using rule 105 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COMMA           reduce using rule 105 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    SEMI            reduce using rule 105 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RBRACKET        reduce using rule 105 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RPAREN          reduce using rule 105 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RBRACE          reduce using rule 105 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)


state 184

    (37) identifier_list -> identifier_list COMMA ID .

    RPAREN          reduce using rule 37 (identifier_list -> identifier_list COMMA ID .)
    COMMA           reduce using rule 37 (identifier_list -> identifier_list COMMA ID .)


state 185

    (33) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 33 (parameter_list -> parameter_list COMMA parameter_declaration .)
    RPAREN          reduce using rule 33 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 186

    (47) direct_abstract_declarator -> LPAREN abstract_declarator . RPAREN

    RPAREN          shift and go to state 202


state 187

    (51) direct_abstract_declarator -> LPAREN parameter_type_list_opt . RPAREN

    RPAREN          shift and go to state 203


state 188

    (54) parameter_type_list_opt -> empty .

    RPAREN          reduce using rule 54 (parameter_type_list_opt -> empty .)


state 189

    (55) parameter_type_list_opt -> parameter_type_list .

    RPAREN          reduce using rule 55 (parameter_type_list_opt -> parameter_type_list .)


state 190

    (49) direct_abstract_declarator -> LBRACKET constant_expression_opt . RBRACKET

    RBRACKET        shift and go to state 204


state 191

    (48) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . constant_expression_opt RBRACKET
    (52) constant_expression_opt -> . empty
    (53) constant_expression_opt -> . constant_expression
    (132) empty -> .
    (82) constant_expression -> . conditional_expression
    (81) conditional_expression -> . logical_or_expression
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (87) inclusive_or_expression -> . exclusive_or_expression
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST

    RBRACKET        reduce using rule 132 (empty -> .)
    LPAREN          shift and go to state 89
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    constant_expression_opt        shift and go to state 205
    empty                          shift and go to state 85
    constant_expression            shift and go to state 86
    conditional_expression         shift and go to state 87
    logical_or_expression          shift and go to state 56
    logical_and_expression         shift and go to state 62
    inclusive_or_expression        shift and go to state 69
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82
    cast_expression                shift and go to state 61
    unary_expression               shift and go to state 88
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    primary_expression             shift and go to state 63
    constant                       shift and go to state 71

state 192

    (50) direct_abstract_declarator -> direct_abstract_declarator LPAREN . parameter_type_list_opt RPAREN
    (54) parameter_type_list_opt -> . empty
    (55) parameter_type_list_opt -> . parameter_type_list
    (132) empty -> .
    (31) parameter_type_list -> . parameter_list
    (32) parameter_list -> . parameter_declaration
    (33) parameter_list -> . parameter_list COMMA parameter_declaration
    (34) parameter_declaration -> . declaration_specifiers declarator
    (35) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (13) declaration_specifiers -> . type_specifier declaration_specifiers
    (14) declaration_specifiers -> . type_specifier
    (15) type_specifier -> . VOID
    (16) type_specifier -> . INT
    (17) type_specifier -> . TYPEID

    RPAREN          reduce using rule 132 (empty -> .)
    VOID            shift and go to state 9
    INT             shift and go to state 10
    TYPEID          shift and go to state 11

    parameter_type_list_opt        shift and go to state 206
    empty                          shift and go to state 188
    parameter_type_list            shift and go to state 189
    parameter_list                 shift and go to state 93
    parameter_declaration          shift and go to state 95
    declaration_specifiers         shift and go to state 96
    type_specifier                 shift and go to state 7

state 193

    (39) initializer -> LBRACE initializer_list RBRACE .

    SEMI            reduce using rule 39 (initializer -> LBRACE initializer_list RBRACE .)
    COMMA           reduce using rule 39 (initializer -> LBRACE initializer_list RBRACE .)
    RBRACE          reduce using rule 39 (initializer -> LBRACE initializer_list RBRACE .)


state 194

    (40) initializer -> LBRACE initializer_list COMMA . RBRACE
    (42) initializer_list -> initializer_list COMMA . initializer
    (38) initializer -> . assignment_expression
    (39) initializer -> . LBRACE initializer_list RBRACE
    (40) initializer -> . LBRACE initializer_list COMMA RBRACE
    (78) assignment_expression -> . conditional_expression
    (79) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (87) inclusive_or_expression -> . exclusive_or_expression
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 207
    LBRACE          shift and go to state 101
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    LPAREN          shift and go to state 46
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    initializer                    shift and go to state 208
    assignment_expression          shift and go to state 100
    conditional_expression         shift and go to state 54
    unary_expression               shift and go to state 55
    logical_or_expression          shift and go to state 56
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 61
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 69
    constant                       shift and go to state 71
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82

state 195

    (68) selection_statement -> IF LPAREN expression RPAREN . statement
    (69) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (56) statement -> . expression_statement
    (57) statement -> . compound_statement
    (58) statement -> . selection_statement
    (59) statement -> . iteration_statement
    (60) statement -> . jump_statement
    (61) expression_statement -> . expression_opt SEMI
    (62) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (63) compound_statement -> . LBRACE statement_list RBRACE
    (64) compound_statement -> . LBRACE declaration_list RBRACE
    (65) compound_statement -> . LBRACE RBRACE
    (68) selection_statement -> . IF LPAREN expression RPAREN statement
    (69) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (70) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (71) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (72) jump_statement -> . BREAK SEMI
    (73) jump_statement -> . RETURN expression_opt SEMI
    (74) expression_opt -> . empty
    (75) expression_opt -> . expression
    (132) empty -> .
    (76) expression -> . assignment_expression
    (77) expression -> . expression COMMA assignment_expression
    (78) assignment_expression -> . conditional_expression
    (79) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (87) inclusive_or_expression -> . exclusive_or_expression
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 22
    IF              shift and go to state 45
    WHILE           shift and go to state 48
    FOR             shift and go to state 49
    BREAK           shift and go to state 50
    RETURN          shift and go to state 51
    SEMI            reduce using rule 132 (empty -> .)
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    LPAREN          shift and go to state 46
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    expression                     shift and go to state 47
    statement                      shift and go to state 209
    expression_statement           shift and go to state 39
    compound_statement             shift and go to state 40
    selection_statement            shift and go to state 41
    iteration_statement            shift and go to state 42
    jump_statement                 shift and go to state 43
    expression_opt                 shift and go to state 44
    empty                          shift and go to state 52
    assignment_expression          shift and go to state 53
    conditional_expression         shift and go to state 54
    unary_expression               shift and go to state 55
    logical_or_expression          shift and go to state 56
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 61
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 69
    constant                       shift and go to state 71
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82

state 196

    (107) cast_expression -> LPAREN type_name RPAREN cast_expression .

    TIMES           reduce using rule 107 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVIDE          reduce using rule 107 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MOD             reduce using rule 107 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUS            reduce using rule 107 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUS           reduce using rule 107 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LT              reduce using rule 107 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GT              reduce using rule 107 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LE              reduce using rule 107 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GE              reduce using rule 107 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQ              reduce using rule 107 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND             reduce using rule 107 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LAND            reduce using rule 107 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LOR             reduce using rule 107 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 107 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMI            reduce using rule 107 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACKET        reduce using rule 107 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 107 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUALS          reduce using rule 107 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACE          reduce using rule 107 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 197

    (70) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (56) statement -> . expression_statement
    (57) statement -> . compound_statement
    (58) statement -> . selection_statement
    (59) statement -> . iteration_statement
    (60) statement -> . jump_statement
    (61) expression_statement -> . expression_opt SEMI
    (62) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (63) compound_statement -> . LBRACE statement_list RBRACE
    (64) compound_statement -> . LBRACE declaration_list RBRACE
    (65) compound_statement -> . LBRACE RBRACE
    (68) selection_statement -> . IF LPAREN expression RPAREN statement
    (69) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (70) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (71) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (72) jump_statement -> . BREAK SEMI
    (73) jump_statement -> . RETURN expression_opt SEMI
    (74) expression_opt -> . empty
    (75) expression_opt -> . expression
    (132) empty -> .
    (76) expression -> . assignment_expression
    (77) expression -> . expression COMMA assignment_expression
    (78) assignment_expression -> . conditional_expression
    (79) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (87) inclusive_or_expression -> . exclusive_or_expression
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 22
    IF              shift and go to state 45
    WHILE           shift and go to state 48
    FOR             shift and go to state 49
    BREAK           shift and go to state 50
    RETURN          shift and go to state 51
    SEMI            reduce using rule 132 (empty -> .)
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    LPAREN          shift and go to state 46
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    expression                     shift and go to state 47
    statement                      shift and go to state 210
    expression_statement           shift and go to state 39
    compound_statement             shift and go to state 40
    selection_statement            shift and go to state 41
    iteration_statement            shift and go to state 42
    jump_statement                 shift and go to state 43
    expression_opt                 shift and go to state 44
    empty                          shift and go to state 52
    assignment_expression          shift and go to state 53
    conditional_expression         shift and go to state 54
    unary_expression               shift and go to state 55
    logical_or_expression          shift and go to state 56
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 61
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 69
    constant                       shift and go to state 71
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82

state 198

    (71) iteration_statement -> FOR LPAREN expression_opt SEMI . expression_opt SEMI expression_opt RPAREN statement
    (74) expression_opt -> . empty
    (75) expression_opt -> . expression
    (132) empty -> .
    (76) expression -> . assignment_expression
    (77) expression -> . expression COMMA assignment_expression
    (78) assignment_expression -> . conditional_expression
    (79) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (87) inclusive_or_expression -> . exclusive_or_expression
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMI            reduce using rule 132 (empty -> .)
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    LPAREN          shift and go to state 46
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    expression_opt                 shift and go to state 211
    empty                          shift and go to state 52
    expression                     shift and go to state 47
    assignment_expression          shift and go to state 53
    conditional_expression         shift and go to state 54
    unary_expression               shift and go to state 55
    logical_or_expression          shift and go to state 56
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 61
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 69
    constant                       shift and go to state 71
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82

state 199

    (118) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 118 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 118 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 118 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 118 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 118 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 118 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 118 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 118 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 118 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 118 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 118 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 118 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 118 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 118 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 118 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 118 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LAND            reduce using rule 118 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LOR             reduce using rule 118 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 118 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 118 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 118 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 118 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 118 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 200

    (119) postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .

    LBRACKET        reduce using rule 119 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LPAREN          reduce using rule 119 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUSPLUS        reduce using rule 119 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUSMINUS      reduce using rule 119 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQUALS          reduce using rule 119 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMES           reduce using rule 119 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVIDE          reduce using rule 119 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD             reduce using rule 119 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 119 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 119 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LT              reduce using rule 119 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GT              reduce using rule 119 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LE              reduce using rule 119 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GE              reduce using rule 119 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ              reduce using rule 119 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND             reduce using rule 119 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LAND            reduce using rule 119 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LOR             reduce using rule 119 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 119 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SEMI            reduce using rule 119 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACKET        reduce using rule 119 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 119 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACE          reduce using rule 119 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)


state 201

    (128) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (78) assignment_expression -> . conditional_expression
    (79) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (87) inclusive_or_expression -> . exclusive_or_expression
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    LPAREN          shift and go to state 46
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    assignment_expression          shift and go to state 212
    conditional_expression         shift and go to state 54
    unary_expression               shift and go to state 55
    logical_or_expression          shift and go to state 56
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 61
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 69
    constant                       shift and go to state 71
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82

state 202

    (47) direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .

    LBRACKET        reduce using rule 47 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    LPAREN          reduce using rule 47 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    COMMA           reduce using rule 47 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    RPAREN          reduce using rule 47 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)


state 203

    (51) direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .

    LBRACKET        reduce using rule 51 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)
    LPAREN          reduce using rule 51 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)
    COMMA           reduce using rule 51 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)
    RPAREN          reduce using rule 51 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)


state 204

    (49) direct_abstract_declarator -> LBRACKET constant_expression_opt RBRACKET .

    LBRACKET        reduce using rule 49 (direct_abstract_declarator -> LBRACKET constant_expression_opt RBRACKET .)
    LPAREN          reduce using rule 49 (direct_abstract_declarator -> LBRACKET constant_expression_opt RBRACKET .)
    COMMA           reduce using rule 49 (direct_abstract_declarator -> LBRACKET constant_expression_opt RBRACKET .)
    RPAREN          reduce using rule 49 (direct_abstract_declarator -> LBRACKET constant_expression_opt RBRACKET .)


state 205

    (48) direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_opt . RBRACKET

    RBRACKET        shift and go to state 213


state 206

    (50) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt . RPAREN

    RPAREN          shift and go to state 214


state 207

    (40) initializer -> LBRACE initializer_list COMMA RBRACE .

    SEMI            reduce using rule 40 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    COMMA           reduce using rule 40 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 40 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 208

    (42) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 42 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 42 (initializer_list -> initializer_list COMMA initializer .)


state 209

    (68) selection_statement -> IF LPAREN expression RPAREN statement .
    (69) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RBRACE          reduce using rule 68 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 68 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 68 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 68 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 68 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 68 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 68 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 68 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 68 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AND             reduce using rule 68 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 68 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 68 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 68 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 68 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 68 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SCONST          reduce using rule 68 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 68 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ICONST          reduce using rule 68 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FCONST          reduce using rule 68 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CCONST          reduce using rule 68 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 68 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 215

  ! ELSE            [ reduce using rule 68 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 210

    (70) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 70 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 70 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 70 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 70 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 70 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 70 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 70 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 70 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 70 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AND             reduce using rule 70 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 70 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 70 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 70 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 70 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 70 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SCONST          reduce using rule 70 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 70 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ICONST          reduce using rule 70 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FCONST          reduce using rule 70 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CCONST          reduce using rule 70 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 70 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 70 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 211

    (71) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 216


state 212

    (128) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 128 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 128 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 213

    (48) direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_opt RBRACKET .

    LBRACKET        reduce using rule 48 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_opt RBRACKET .)
    LPAREN          reduce using rule 48 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_opt RBRACKET .)
    COMMA           reduce using rule 48 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_opt RBRACKET .)
    RPAREN          reduce using rule 48 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_opt RBRACKET .)


state 214

    (50) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .

    LBRACKET        reduce using rule 50 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)
    LPAREN          reduce using rule 50 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)
    COMMA           reduce using rule 50 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)
    RPAREN          reduce using rule 50 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)


state 215

    (69) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (56) statement -> . expression_statement
    (57) statement -> . compound_statement
    (58) statement -> . selection_statement
    (59) statement -> . iteration_statement
    (60) statement -> . jump_statement
    (61) expression_statement -> . expression_opt SEMI
    (62) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (63) compound_statement -> . LBRACE statement_list RBRACE
    (64) compound_statement -> . LBRACE declaration_list RBRACE
    (65) compound_statement -> . LBRACE RBRACE
    (68) selection_statement -> . IF LPAREN expression RPAREN statement
    (69) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (70) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (71) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (72) jump_statement -> . BREAK SEMI
    (73) jump_statement -> . RETURN expression_opt SEMI
    (74) expression_opt -> . empty
    (75) expression_opt -> . expression
    (132) empty -> .
    (76) expression -> . assignment_expression
    (77) expression -> . expression COMMA assignment_expression
    (78) assignment_expression -> . conditional_expression
    (79) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (87) inclusive_or_expression -> . exclusive_or_expression
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 22
    IF              shift and go to state 45
    WHILE           shift and go to state 48
    FOR             shift and go to state 49
    BREAK           shift and go to state 50
    RETURN          shift and go to state 51
    SEMI            reduce using rule 132 (empty -> .)
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    LPAREN          shift and go to state 46
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    expression                     shift and go to state 47
    statement                      shift and go to state 217
    expression_statement           shift and go to state 39
    compound_statement             shift and go to state 40
    selection_statement            shift and go to state 41
    iteration_statement            shift and go to state 42
    jump_statement                 shift and go to state 43
    expression_opt                 shift and go to state 44
    empty                          shift and go to state 52
    assignment_expression          shift and go to state 53
    conditional_expression         shift and go to state 54
    unary_expression               shift and go to state 55
    logical_or_expression          shift and go to state 56
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 61
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 69
    constant                       shift and go to state 71
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82

state 216

    (71) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI . expression_opt RPAREN statement
    (74) expression_opt -> . empty
    (75) expression_opt -> . expression
    (132) empty -> .
    (76) expression -> . assignment_expression
    (77) expression -> . expression COMMA assignment_expression
    (78) assignment_expression -> . conditional_expression
    (79) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (87) inclusive_or_expression -> . exclusive_or_expression
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          reduce using rule 132 (empty -> .)
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    LPAREN          shift and go to state 46
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    expression_opt                 shift and go to state 218
    empty                          shift and go to state 52
    expression                     shift and go to state 47
    assignment_expression          shift and go to state 53
    conditional_expression         shift and go to state 54
    unary_expression               shift and go to state 55
    logical_or_expression          shift and go to state 56
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 61
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 69
    constant                       shift and go to state 71
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82

state 217

    (69) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RBRACE          reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSPLUS        reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSMINUS      reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AND             reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LNOT            reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SCONST          reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ICONST          reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FCONST          reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CCONST          reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 218

    (71) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 219


state 219

    (71) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN . statement
    (56) statement -> . expression_statement
    (57) statement -> . compound_statement
    (58) statement -> . selection_statement
    (59) statement -> . iteration_statement
    (60) statement -> . jump_statement
    (61) expression_statement -> . expression_opt SEMI
    (62) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (63) compound_statement -> . LBRACE statement_list RBRACE
    (64) compound_statement -> . LBRACE declaration_list RBRACE
    (65) compound_statement -> . LBRACE RBRACE
    (68) selection_statement -> . IF LPAREN expression RPAREN statement
    (69) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (70) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (71) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (72) jump_statement -> . BREAK SEMI
    (73) jump_statement -> . RETURN expression_opt SEMI
    (74) expression_opt -> . empty
    (75) expression_opt -> . expression
    (132) empty -> .
    (76) expression -> . assignment_expression
    (77) expression -> . expression COMMA assignment_expression
    (78) assignment_expression -> . conditional_expression
    (79) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (108) unary_expression -> . postfix_expression
    (109) unary_expression -> . PLUSPLUS unary_expression
    (110) unary_expression -> . MINUSMINUS unary_expression
    (111) unary_expression -> . unary_operator cast_expression
    (83) logical_or_expression -> . logical_and_expression
    (84) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (117) postfix_expression -> . primary_expression
    (118) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (119) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (120) postfix_expression -> . postfix_expression LPAREN RPAREN
    (121) postfix_expression -> . postfix_expression PLUSPLUS
    (122) postfix_expression -> . postfix_expression MINUSMINUS
    (112) unary_operator -> . AND
    (113) unary_operator -> . TIMES
    (114) unary_operator -> . PLUS
    (115) unary_operator -> . MINUS
    (116) unary_operator -> . LNOT
    (85) logical_and_expression -> . inclusive_or_expression
    (86) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (123) primary_expression -> . ID
    (124) primary_expression -> . constant
    (125) primary_expression -> . SCONST
    (126) primary_expression -> . LPAREN expression RPAREN
    (87) inclusive_or_expression -> . exclusive_or_expression
    (129) constant -> . ICONST
    (130) constant -> . FCONST
    (131) constant -> . CCONST
    (88) exclusive_or_expression -> . and_expression
    (89) and_expression -> . equality_expression
    (90) and_expression -> . and_expression AND equality_expression
    (91) equality_expression -> . relational_expression
    (92) equality_expression -> . equality_expression EQ relational_expression
    (93) relational_expression -> . shift_expression
    (94) relational_expression -> . relational_expression LT shift_expression
    (95) relational_expression -> . relational_expression GT shift_expression
    (96) relational_expression -> . relational_expression LE shift_expression
    (97) relational_expression -> . relational_expression GE shift_expression
    (98) shift_expression -> . additive_expression
    (99) additive_expression -> . multiplicative_expression
    (100) additive_expression -> . additive_expression PLUS multiplicative_expression
    (101) additive_expression -> . additive_expression MINUS multiplicative_expression
    (102) multiplicative_expression -> . cast_expression
    (103) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (104) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (105) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (106) cast_expression -> . unary_expression
    (107) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 22
    IF              shift and go to state 45
    WHILE           shift and go to state 48
    FOR             shift and go to state 49
    BREAK           shift and go to state 50
    RETURN          shift and go to state 51
    SEMI            reduce using rule 132 (empty -> .)
    PLUSPLUS        shift and go to state 58
    MINUSMINUS      shift and go to state 59
    AND             shift and go to state 64
    TIMES           shift and go to state 65
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LNOT            shift and go to state 68
    ID              shift and go to state 70
    SCONST          shift and go to state 72
    LPAREN          shift and go to state 46
    ICONST          shift and go to state 74
    FCONST          shift and go to state 75
    CCONST          shift and go to state 76

    expression_opt                 shift and go to state 44
    statement                      shift and go to state 220
    expression_statement           shift and go to state 39
    compound_statement             shift and go to state 40
    selection_statement            shift and go to state 41
    iteration_statement            shift and go to state 42
    jump_statement                 shift and go to state 43
    expression                     shift and go to state 47
    empty                          shift and go to state 52
    assignment_expression          shift and go to state 53
    conditional_expression         shift and go to state 54
    unary_expression               shift and go to state 55
    logical_or_expression          shift and go to state 56
    postfix_expression             shift and go to state 57
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 61
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 69
    constant                       shift and go to state 71
    exclusive_or_expression        shift and go to state 73
    and_expression                 shift and go to state 77
    equality_expression            shift and go to state 78
    relational_expression          shift and go to state 79
    shift_expression               shift and go to state 80
    additive_expression            shift and go to state 81
    multiplicative_expression      shift and go to state 82

state 220

    (71) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .

    RBRACE          reduce using rule 71 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LBRACE          reduce using rule 71 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 71 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 71 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 71 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 71 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 71 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUSPLUS        reduce using rule 71 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUSMINUS      reduce using rule 71 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    AND             reduce using rule 71 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 71 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 71 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 71 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LNOT            reduce using rule 71 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ID              reduce using rule 71 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SCONST          reduce using rule 71 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 71 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ICONST          reduce using rule 71 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FCONST          reduce using rule 71 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CCONST          reduce using rule 71 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 71 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 71 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 209 resolved as shift
