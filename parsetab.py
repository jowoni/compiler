
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'
_lr_method = 'LALR'
_lr_signature = 'AND BREAK CCONST COMMA DIVIDE DOT ELSE EQ EQUALS FCONST FOR GE GT ICONST ID IF INCLUDE INT LAND LBRACE LBRACKET LE LNOT LOR LPAREN LSHIFT LT MINUS MINUSMINUS MOD OR PLUS PLUSPLUS RBRACE RBRACKET RETURN RPAREN RSHIFT SCONST SEMI TIMES TYPEID VOID WHILEtranslation_unit : external_declarationtranslation_unit : translation_unit external_declarationexternal_declaration : function_definitionexternal_declaration : declarationexternal_declaration : INCLUDE LT ID include_endingsinclude_endings : DOT GTinclude_endings : GTfunction_definition : declaration_specifiers declarator declaration_list compound_statementfunction_definition : declarator declaration_list compound_statementfunction_definition : declarator compound_statementfunction_definition : declaration_specifiers declarator compound_statementdeclaration : declaration_specifiers init_declarator_list SEMIdeclaration : declaration_specifiers SEMIdeclaration_list : declarationdeclaration_list : declaration_list declaration declaration_specifiers : type_specifier declaration_specifiersdeclaration_specifiers : type_specifiertype_specifier : VOID\n                      | INT\n                      | TYPEID\n                      init_declarator_list : init_declaratorinit_declarator_list : init_declarator_list COMMA init_declaratorinit_declarator : declaratorinit_declarator : declarator EQUALS initializerspecifier_qualifier_list : type_specifier specifier_qualifier_listspecifier_qualifier_list : type_specifierdeclarator : direct_declaratordirect_declarator : IDdirect_declarator : LPAREN declarator RPARENdirect_declarator : direct_declarator LBRACKET constant_expression_opt RBRACKETdirect_declarator : direct_declarator LPAREN parameter_type_list RPAREN direct_declarator : direct_declarator LPAREN identifier_list RPAREN direct_declarator : direct_declarator LPAREN RPAREN parameter_type_list : parameter_listparameter_list : parameter_declarationparameter_list : parameter_list COMMA parameter_declarationparameter_declaration : declaration_specifiers declaratorparameter_declaration : declaration_specifiers abstract_declarator_optidentifier_list : IDidentifier_list : identifier_list COMMA IDinitializer : assignment_expressioninitializer : LBRACE initializer_list RBRACE\n                   | LBRACE initializer_list COMMA RBRACEinitializer_list : initializerinitializer_list : initializer_list COMMA initializertype_name : specifier_qualifier_list abstract_declarator_optabstract_declarator_opt : emptyabstract_declarator_opt : abstract_declaratorabstract_declarator : direct_abstract_declaratordirect_abstract_declarator : LPAREN abstract_declarator RPARENdirect_abstract_declarator : direct_abstract_declarator LBRACKET constant_expression_opt RBRACKETdirect_abstract_declarator : LBRACKET constant_expression_opt RBRACKETdirect_abstract_declarator : direct_abstract_declarator LPAREN parameter_type_list_opt RPARENdirect_abstract_declarator : LPAREN parameter_type_list_opt RPARENconstant_expression_opt : emptyconstant_expression_opt : constant_expressionparameter_type_list_opt : emptyparameter_type_list_opt : parameter_type_list\n    statement :  expression_statement\n              | compound_statement\n              | selection_statement\n              | iteration_statement\n              | jump_statement\n              expression_statement : expression_opt SEMIcompound_statement : LBRACE declaration_list statement_list RBRACEcompound_statement : LBRACE statement_list RBRACEcompound_statement : LBRACE declaration_list RBRACEcompound_statement : LBRACE RBRACEstatement_list : statementstatement_list : statement_list statementselection_statement : IF LPAREN expression RPAREN statementselection_statement : IF LPAREN expression RPAREN statement ELSE statement iteration_statement : WHILE LPAREN expression RPAREN statementiteration_statement : FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement jump_statement : BREAK SEMIjump_statement : RETURN expression_opt SEMIexpression_opt : emptyexpression_opt : expressionexpression : assignment_expressionexpression : expression COMMA assignment_expressionassignment_expression : conditional_expressionassignment_expression : unary_expression assignment_operator assignment_expression\n    assignment_operator : EQUALS\n                        conditional_expression : logical_or_expressionconstant_expression : conditional_expressionlogical_or_expression : logical_and_expressionlogical_or_expression : logical_or_expression LOR logical_and_expressionlogical_and_expression : inclusive_or_expressionlogical_and_expression : logical_and_expression LAND inclusive_or_expressioninclusive_or_expression : exclusive_or_expressioninclusive_or_expression : inclusive_or_expression OR exclusive_or_expressionexclusive_or_expression :  and_expressionand_expression : equality_expressionand_expression : and_expression AND equality_expressionequality_expression : relational_expressionequality_expression : equality_expression EQ relational_expressionrelational_expression : shift_expressionrelational_expression : relational_expression LT shift_expressionrelational_expression : relational_expression GT shift_expressionrelational_expression : relational_expression LE shift_expressionrelational_expression : relational_expression GE shift_expressionshift_expression : additive_expressionshift_expression : shift_expression LSHIFT additive_expressionshift_expression : shift_expression RSHIFT additive_expressionadditive_expression : multiplicative_expressionadditive_expression : additive_expression PLUS multiplicative_expressionadditive_expression : additive_expression MINUS multiplicative_expressionmultiplicative_expression : cast_expressionmultiplicative_expression : multiplicative_expression TIMES cast_expressionmultiplicative_expression : multiplicative_expression DIVIDE cast_expressionmultiplicative_expression : multiplicative_expression MOD cast_expressioncast_expression : unary_expressioncast_expression : LPAREN type_name RPAREN cast_expressionunary_expression : postfix_expressionunary_expression : PLUSPLUS unary_expressionunary_expression : MINUSMINUS unary_expressionunary_expression : unary_operator cast_expressionunary_operator : AND\n                    | TIMES\n                    | PLUS\n                    | MINUS\n                    | LNOT postfix_expression : primary_expressionpostfix_expression : postfix_expression LBRACKET expression RBRACKETpostfix_expression : postfix_expression LPAREN argument_expression_list RPARENpostfix_expression : postfix_expression LPAREN RPARENpostfix_expression : postfix_expression PLUSPLUSpostfix_expression : postfix_expression MINUSMINUSprimary_expression : constant\n                        |  SCONST\n                        | ID function_call\n                        | LPAREN expression RPAREN\n                        | LPAREN RPARENfunction_call : function_call2\n                        | emptyfunction_call2 : LPAREN expression RPAREN\n                        | LPAREN RPARENargument_expression_list :  assignment_expression\n                              |  argument_expression_list COMMA assignment_expressionconstant : ICONST\n               | FCONST\n               | CCONSTempty : '
    
_lr_action_items = {'INCLUDE':([0,1,2,3,4,15,19,22,32,34,36,40,101,103,104,110,111,167,170,],[5,5,-1,-3,-4,-2,-13,-10,-11,-12,-9,-68,-5,-7,-8,-67,-66,-6,-65,]),'VOID':([0,1,2,3,4,6,8,9,10,11,12,13,15,17,19,21,22,23,24,28,31,32,34,36,37,38,40,49,92,94,100,101,103,104,110,111,119,155,156,157,159,164,167,170,175,212,],[11,11,-1,-3,-4,-28,11,11,-27,-18,-19,-20,-2,11,-13,11,-10,-14,11,11,11,-11,-12,-9,-15,11,-68,11,11,-33,-29,-5,-7,-8,-67,-66,11,-30,-31,-32,11,11,-6,-65,11,11,]),'INT':([0,1,2,3,4,6,8,9,10,11,12,13,15,17,19,21,22,23,24,28,31,32,34,36,37,38,40,49,92,94,100,101,103,104,110,111,119,155,156,157,159,164,167,170,175,212,],[12,12,-1,-3,-4,-28,12,12,-27,-18,-19,-20,-2,12,-13,12,-10,-14,12,12,12,-11,-12,-9,-15,12,-68,12,12,-33,-29,-5,-7,-8,-67,-66,12,-30,-31,-32,12,12,-6,-65,12,12,]),'TYPEID':([0,1,2,3,4,6,8,9,10,11,12,13,15,17,19,21,22,23,24,28,31,32,34,36,37,38,40,49,92,94,100,101,103,104,110,111,119,155,156,157,159,164,167,170,175,212,],[13,13,-1,-3,-4,-28,13,13,-27,-18,-19,-20,-2,13,-13,13,-10,-14,13,13,13,-11,-12,-9,-15,13,-68,13,13,-33,-29,-5,-7,-8,-67,-66,13,-30,-31,-32,13,13,-6,-65,13,13,]),'ID':([0,1,2,3,4,7,9,11,12,13,14,15,16,19,22,23,24,25,26,27,28,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,49,54,61,62,63,67,68,69,70,71,92,99,101,103,104,107,109,110,111,112,113,114,120,121,122,123,125,126,127,128,129,133,136,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,158,164,165,167,170,173,180,211,214,215,217,218,221,230,231,236,237,238,240,241,],[6,6,-1,-3,-4,6,-17,-18,-19,-20,6,-2,30,-13,-10,-14,75,6,-16,75,97,-11,75,-12,6,-9,-15,75,75,-68,-69,-59,-60,-61,-62,-63,75,75,75,75,75,-118,-119,-120,-121,-122,75,6,-5,-7,-8,75,75,-67,-66,-70,-64,75,75,75,75,-75,75,-83,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,204,6,75,-6,-65,75,-76,75,75,75,75,75,75,-71,-73,75,75,-72,75,-74,]),'LPAREN':([0,1,2,3,4,6,7,9,10,11,12,13,14,15,19,22,23,24,25,26,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,51,52,54,60,61,62,63,66,67,68,69,70,71,73,74,75,77,78,79,92,94,99,100,101,103,104,107,109,110,111,112,113,114,116,118,119,120,121,122,123,125,126,127,128,129,130,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,164,165,166,167,170,172,173,175,176,180,185,190,211,214,215,217,218,219,220,221,222,223,224,225,230,231,234,235,236,237,238,240,241,],[14,14,-1,-3,-4,-28,14,-17,28,-18,-19,-20,14,-2,-13,-10,-14,49,14,-16,92,-11,49,-12,14,-9,-15,49,49,-68,-69,-59,-60,-61,-62,-63,114,49,121,122,49,129,133,133,92,-123,-118,-119,-120,-121,-122,-129,-130,141,-140,-141,-142,49,-33,164,-29,-5,-7,-8,49,49,-67,-66,-70,-64,49,-133,175,-26,49,49,49,-75,49,-83,92,49,49,-127,-128,49,92,92,-131,-134,-135,49,92,92,92,92,92,92,92,92,92,92,92,92,92,-30,-31,-32,164,92,212,-6,-65,-132,92,175,-25,-76,-126,-137,92,49,49,49,49,-124,-125,49,-136,-50,-54,-52,-71,-73,-51,-53,49,49,-72,49,-74,]),'$end':([1,2,3,4,15,19,22,32,34,36,40,101,103,104,110,111,167,170,],[0,-1,-3,-4,-2,-13,-10,-11,-12,-9,-68,-5,-7,-8,-67,-66,-6,-65,]),'LT':([5,58,60,64,66,73,74,75,77,78,79,82,83,84,85,91,116,130,131,132,134,135,138,139,140,172,185,190,192,193,194,195,196,197,198,199,200,201,202,203,216,219,220,222,],[16,-112,-114,-108,-123,-129,-130,-143,-140,-141,-142,144,-97,-102,-105,-112,-133,-127,-128,-115,-116,-117,-131,-134,-135,-132,-126,-137,144,-98,-99,-100,-101,-103,-104,-106,-107,-109,-110,-111,-113,-124,-125,-136,]),'LBRACKET':([6,9,10,11,12,13,26,60,66,73,74,75,77,78,79,94,99,100,116,118,119,130,131,138,139,140,155,156,157,164,166,172,175,176,185,190,219,220,222,223,224,225,234,235,],[-28,-17,27,-18,-19,-20,-16,128,-123,-129,-130,-143,-140,-141,-142,-33,165,-29,-133,165,-26,-127,-128,-131,-134,-135,-30,-31,-32,165,211,-132,165,-25,-126,-137,-124,-125,-136,-50,-54,-52,-51,-53,]),'LBRACE':([6,8,10,17,19,21,23,24,31,33,34,37,38,39,40,41,42,43,44,45,46,94,100,107,109,110,111,112,113,123,155,156,157,170,180,214,215,217,230,231,236,238,240,241,],[-28,24,-27,24,-13,24,-14,24,24,107,-12,-15,24,24,-68,-69,-59,-60,-61,-62,-63,-33,-29,107,24,-67,-66,-70,-64,-75,-30,-31,-32,-65,-76,107,24,24,-71,-73,24,-72,24,-74,]),'EQUALS':([6,10,17,58,60,66,73,74,75,77,78,79,86,91,94,100,116,130,131,132,134,135,138,139,140,155,156,157,172,185,190,216,219,220,222,],[-28,-27,33,126,-114,-123,-129,-130,-143,-140,-141,-142,33,-112,-33,-29,-133,-127,-128,-115,-116,-117,-131,-134,-135,-30,-31,-32,-132,-126,-137,-113,-124,-125,-136,]),'SEMI':([6,7,9,10,11,12,13,17,18,19,20,23,24,25,26,34,37,38,39,40,41,42,43,44,45,46,47,50,53,54,55,56,57,58,59,60,64,65,66,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,91,94,100,105,106,108,109,110,111,112,113,116,122,123,124,130,131,132,134,135,138,139,140,155,156,157,170,172,177,179,180,181,182,185,187,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,213,215,216,217,218,219,220,222,228,230,231,232,236,238,240,241,],[-28,19,-17,-27,-18,-19,-20,-23,34,-13,-21,-14,-143,19,-16,-12,-15,-143,-143,-68,-69,-59,-60,-61,-62,-63,113,-78,123,-143,-77,-79,-81,-112,-84,-114,-108,-86,-123,-88,-129,-130,-143,-90,-140,-141,-142,-92,-93,-95,-97,-102,-105,-23,-112,-33,-29,-24,-41,-22,-143,-67,-66,-70,-64,-133,-143,-75,180,-127,-128,-115,-116,-117,-131,-134,-135,-30,-31,-32,-65,-132,-80,218,-76,-82,-87,-126,-89,-91,-137,-94,-96,-98,-99,-100,-101,-103,-104,-106,-107,-109,-110,-111,-42,-143,-113,-143,-143,-124,-125,-136,-43,-71,-73,237,-143,-72,-143,-74,]),'COMMA':([6,9,10,11,12,13,17,18,20,26,50,56,57,58,59,60,64,65,66,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,91,94,95,96,97,98,99,100,105,106,108,115,116,130,131,132,134,135,138,139,140,155,156,157,160,161,162,163,166,168,169,171,172,177,178,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,213,216,219,220,222,223,224,225,228,229,233,234,235,],[-28,-17,-27,-18,-19,-20,-23,35,-21,-16,120,-79,-81,-112,-84,-114,-108,-86,-123,-88,-129,-130,-143,-90,-140,-141,-142,-92,-93,-95,-97,-102,-105,-23,-112,-33,158,159,-39,-35,-143,-29,-24,-41,-22,120,-133,-127,-128,-115,-116,-117,-131,-134,-135,-30,-31,-32,-37,-38,-47,-48,-49,214,-44,120,-132,-80,120,-82,-87,120,221,-126,-138,-89,-91,120,-137,-94,-96,-98,-99,-100,-101,-103,-104,-106,-107,-109,-110,-111,-40,-36,-42,-113,-124,-125,-136,-50,-54,-52,-43,-45,-139,-51,-53,]),'RPAREN':([6,9,10,11,12,13,26,28,29,49,50,55,56,57,58,59,60,64,65,66,72,73,74,75,76,77,78,79,80,81,82,83,84,85,91,92,93,94,95,96,97,98,99,100,115,116,117,118,119,129,130,131,132,133,134,135,138,139,140,141,155,156,157,160,161,162,163,164,166,171,172,174,175,176,177,178,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,212,216,219,220,222,223,224,225,227,233,234,235,237,239,],[-28,-17,-27,-18,-19,-20,-16,94,100,116,-78,-77,-79,-81,-112,-84,-114,-108,-86,-123,-88,-129,-130,-143,-90,-140,-141,-142,-92,-93,-95,-97,-102,-105,-112,116,156,-33,157,-34,-39,-35,-143,-29,172,-133,173,-143,-26,185,-127,-128,-115,116,-116,-117,-131,-134,-135,190,-30,-31,-32,-37,-38,-47,-48,-143,-49,215,-132,-46,-143,-25,-80,217,-82,-87,220,-126,-138,-89,-91,222,-137,-94,-96,-98,-99,-100,-101,-103,-104,-106,-107,-109,-110,-111,-40,-36,223,224,-57,-58,-143,-113,-124,-125,-136,-50,-54,-52,235,-139,-51,-53,-143,240,]),'RBRACE':([19,23,24,34,37,38,39,40,41,42,43,44,45,46,57,58,59,60,64,65,66,72,73,74,75,76,77,78,79,80,81,82,83,84,85,91,106,109,110,111,112,113,116,123,130,131,132,134,135,138,139,140,168,169,170,172,180,181,182,185,187,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,213,214,216,219,220,222,228,229,230,231,238,241,],[-13,-14,40,-12,-15,110,111,-68,-69,-59,-60,-61,-62,-63,-81,-112,-84,-114,-108,-86,-123,-88,-129,-130,-143,-90,-140,-141,-142,-92,-93,-95,-97,-102,-105,-112,-41,170,-67,-66,-70,-64,-133,-75,-127,-128,-115,-116,-117,-131,-134,-135,213,-44,-65,-132,-76,-82,-87,-126,-89,-91,-137,-94,-96,-98,-99,-100,-101,-103,-104,-106,-107,-109,-110,-111,-42,228,-113,-124,-125,-136,-43,-45,-71,-73,-72,-74,]),'IF':([19,23,24,34,37,38,39,40,41,42,43,44,45,46,109,110,111,112,113,123,170,180,215,217,230,231,236,238,240,241,],[-13,-14,48,-12,-15,48,48,-68,-69,-59,-60,-61,-62,-63,48,-67,-66,-70,-64,-75,-65,-76,48,48,-71,-73,48,-72,48,-74,]),'WHILE':([19,23,24,34,37,38,39,40,41,42,43,44,45,46,109,110,111,112,113,123,170,180,215,217,230,231,236,238,240,241,],[-13,-14,51,-12,-15,51,51,-68,-69,-59,-60,-61,-62,-63,51,-67,-66,-70,-64,-75,-65,-76,51,51,-71,-73,51,-72,51,-74,]),'FOR':([19,23,24,34,37,38,39,40,41,42,43,44,45,46,109,110,111,112,113,123,170,180,215,217,230,231,236,238,240,241,],[-13,-14,52,-12,-15,52,52,-68,-69,-59,-60,-61,-62,-63,52,-67,-66,-70,-64,-75,-65,-76,52,52,-71,-73,52,-72,52,-74,]),'BREAK':([19,23,24,34,37,38,39,40,41,42,43,44,45,46,109,110,111,112,113,123,170,180,215,217,230,231,236,238,240,241,],[-13,-14,53,-12,-15,53,53,-68,-69,-59,-60,-61,-62,-63,53,-67,-66,-70,-64,-75,-65,-76,53,53,-71,-73,53,-72,53,-74,]),'RETURN':([19,23,24,34,37,38,39,40,41,42,43,44,45,46,109,110,111,112,113,123,170,180,215,217,230,231,236,238,240,241,],[-13,-14,54,-12,-15,54,54,-68,-69,-59,-60,-61,-62,-63,54,-67,-66,-70,-64,-75,-65,-76,54,54,-71,-73,54,-72,54,-74,]),'PLUSPLUS':([19,23,24,27,33,34,37,38,39,40,41,42,43,44,45,46,49,54,60,61,62,63,66,67,68,69,70,71,73,74,75,77,78,79,92,107,109,110,111,112,113,114,116,120,121,122,123,125,126,127,128,129,130,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,170,172,173,180,185,190,211,214,215,217,218,219,220,221,222,230,231,236,237,238,240,241,],[-13,-14,61,61,61,-12,-15,61,61,-68,-69,-59,-60,-61,-62,-63,61,61,130,61,61,61,-123,-118,-119,-120,-121,-122,-129,-130,-143,-140,-141,-142,61,61,61,-67,-66,-70,-64,61,-133,61,61,61,-75,61,-83,61,61,61,-127,-128,61,61,61,-131,-134,-135,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-65,-132,61,-76,-126,-137,61,61,61,61,61,-124,-125,61,-136,-71,-73,61,61,-72,61,-74,]),'MINUSMINUS':([19,23,24,27,33,34,37,38,39,40,41,42,43,44,45,46,49,54,60,61,62,63,66,67,68,69,70,71,73,74,75,77,78,79,92,107,109,110,111,112,113,114,116,120,121,122,123,125,126,127,128,129,130,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,170,172,173,180,185,190,211,214,215,217,218,219,220,221,222,230,231,236,237,238,240,241,],[-13,-14,62,62,62,-12,-15,62,62,-68,-69,-59,-60,-61,-62,-63,62,62,131,62,62,62,-123,-118,-119,-120,-121,-122,-129,-130,-143,-140,-141,-142,62,62,62,-67,-66,-70,-64,62,-133,62,62,62,-75,62,-83,62,62,62,-127,-128,62,62,62,-131,-134,-135,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-65,-132,62,-76,-126,-137,62,62,62,62,62,-124,-125,62,-136,-71,-73,62,62,-72,62,-74,]),'AND':([19,23,24,27,33,34,37,38,39,40,41,42,43,44,45,46,49,54,58,60,61,62,63,64,66,67,68,69,70,71,73,74,75,77,78,79,80,81,82,83,84,85,91,92,107,109,110,111,112,113,114,116,120,121,122,123,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,170,172,173,180,185,190,191,192,193,194,195,196,197,198,199,200,201,202,203,211,214,215,216,217,218,219,220,221,222,230,231,236,237,238,240,241,],[-13,-14,67,67,67,-12,-15,67,67,-68,-69,-59,-60,-61,-62,-63,67,67,-112,-114,67,67,67,-108,-123,-118,-119,-120,-121,-122,-129,-130,-143,-140,-141,-142,142,-93,-95,-97,-102,-105,-112,67,67,67,-67,-66,-70,-64,67,-133,67,67,67,-75,67,-83,67,67,67,-127,-128,-115,67,-116,-117,67,67,-131,-134,-135,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-65,-132,67,-76,-126,-137,-94,-96,-98,-99,-100,-101,-103,-104,-106,-107,-109,-110,-111,67,67,67,-113,67,67,-124,-125,67,-136,-71,-73,67,67,-72,67,-74,]),'TIMES':([19,23,24,27,33,34,37,38,39,40,41,42,43,44,45,46,49,54,58,60,61,62,63,64,66,67,68,69,70,71,73,74,75,77,78,79,85,91,92,107,109,110,111,112,113,114,116,120,121,122,123,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,170,172,173,180,185,190,199,200,201,202,203,211,214,215,216,217,218,219,220,221,222,230,231,236,237,238,240,241,],[-13,-14,68,68,68,-12,-15,68,68,-68,-69,-59,-60,-61,-62,-63,68,68,-112,-114,68,68,68,-108,-123,-118,-119,-120,-121,-122,-129,-130,-143,-140,-141,-142,152,-112,68,68,68,-67,-66,-70,-64,68,-133,68,68,68,-75,68,-83,68,68,68,-127,-128,-115,68,-116,-117,68,68,-131,-134,-135,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-65,-132,68,-76,-126,-137,152,152,-109,-110,-111,68,68,68,-113,68,68,-124,-125,68,-136,-71,-73,68,68,-72,68,-74,]),'PLUS':([19,23,24,27,33,34,37,38,39,40,41,42,43,44,45,46,49,54,58,60,61,62,63,64,66,67,68,69,70,71,73,74,75,77,78,79,84,85,91,92,107,109,110,111,112,113,114,116,120,121,122,123,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,170,172,173,180,185,190,197,198,199,200,201,202,203,211,214,215,216,217,218,219,220,221,222,230,231,236,237,238,240,241,],[-13,-14,69,69,69,-12,-15,69,69,-68,-69,-59,-60,-61,-62,-63,69,69,-112,-114,69,69,69,-108,-123,-118,-119,-120,-121,-122,-129,-130,-143,-140,-141,-142,150,-105,-112,69,69,69,-67,-66,-70,-64,69,-133,69,69,69,-75,69,-83,69,69,69,-127,-128,-115,69,-116,-117,69,69,-131,-134,-135,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-65,-132,69,-76,-126,-137,150,150,-106,-107,-109,-110,-111,69,69,69,-113,69,69,-124,-125,69,-136,-71,-73,69,69,-72,69,-74,]),'MINUS':([19,23,24,27,33,34,37,38,39,40,41,42,43,44,45,46,49,54,58,60,61,62,63,64,66,67,68,69,70,71,73,74,75,77,78,79,84,85,91,92,107,109,110,111,112,113,114,116,120,121,122,123,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,170,172,173,180,185,190,197,198,199,200,201,202,203,211,214,215,216,217,218,219,220,221,222,230,231,236,237,238,240,241,],[-13,-14,70,70,70,-12,-15,70,70,-68,-69,-59,-60,-61,-62,-63,70,70,-112,-114,70,70,70,-108,-123,-118,-119,-120,-121,-122,-129,-130,-143,-140,-141,-142,151,-105,-112,70,70,70,-67,-66,-70,-64,70,-133,70,70,70,-75,70,-83,70,70,70,-127,-128,-115,70,-116,-117,70,70,-131,-134,-135,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-65,-132,70,-76,-126,-137,151,151,-106,-107,-109,-110,-111,70,70,70,-113,70,70,-124,-125,70,-136,-71,-73,70,70,-72,70,-74,]),'LNOT':([19,23,24,27,33,34,37,38,39,40,41,42,43,44,45,46,49,54,61,62,63,67,68,69,70,71,92,107,109,110,111,112,113,114,120,121,122,123,125,126,127,128,129,133,136,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,170,173,180,211,214,215,217,218,221,230,231,236,237,238,240,241,],[-13,-14,71,71,71,-12,-15,71,71,-68,-69,-59,-60,-61,-62,-63,71,71,71,71,71,-118,-119,-120,-121,-122,71,71,71,-67,-66,-70,-64,71,71,71,71,-75,71,-83,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-65,71,-76,71,71,71,71,71,71,-71,-73,71,71,-72,71,-74,]),'SCONST':([19,23,24,27,33,34,37,38,39,40,41,42,43,44,45,46,49,54,61,62,63,67,68,69,70,71,92,107,109,110,111,112,113,114,120,121,122,123,125,126,127,128,129,133,136,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,170,173,180,211,214,215,217,218,221,230,231,236,237,238,240,241,],[-13,-14,74,74,74,-12,-15,74,74,-68,-69,-59,-60,-61,-62,-63,74,74,74,74,74,-118,-119,-120,-121,-122,74,74,74,-67,-66,-70,-64,74,74,74,74,-75,74,-83,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-65,74,-76,74,74,74,74,74,74,-71,-73,74,74,-72,74,-74,]),'ICONST':([19,23,24,27,33,34,37,38,39,40,41,42,43,44,45,46,49,54,61,62,63,67,68,69,70,71,92,107,109,110,111,112,113,114,120,121,122,123,125,126,127,128,129,133,136,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,170,173,180,211,214,215,217,218,221,230,231,236,237,238,240,241,],[-13,-14,77,77,77,-12,-15,77,77,-68,-69,-59,-60,-61,-62,-63,77,77,77,77,77,-118,-119,-120,-121,-122,77,77,77,-67,-66,-70,-64,77,77,77,77,-75,77,-83,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-65,77,-76,77,77,77,77,77,77,-71,-73,77,77,-72,77,-74,]),'FCONST':([19,23,24,27,33,34,37,38,39,40,41,42,43,44,45,46,49,54,61,62,63,67,68,69,70,71,92,107,109,110,111,112,113,114,120,121,122,123,125,126,127,128,129,133,136,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,170,173,180,211,214,215,217,218,221,230,231,236,237,238,240,241,],[-13,-14,78,78,78,-12,-15,78,78,-68,-69,-59,-60,-61,-62,-63,78,78,78,78,78,-118,-119,-120,-121,-122,78,78,78,-67,-66,-70,-64,78,78,78,78,-75,78,-83,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-65,78,-76,78,78,78,78,78,78,-71,-73,78,78,-72,78,-74,]),'CCONST':([19,23,24,27,33,34,37,38,39,40,41,42,43,44,45,46,49,54,61,62,63,67,68,69,70,71,92,107,109,110,111,112,113,114,120,121,122,123,125,126,127,128,129,133,136,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,170,173,180,211,214,215,217,218,221,230,231,236,237,238,240,241,],[-13,-14,79,79,79,-12,-15,79,79,-68,-69,-59,-60,-61,-62,-63,79,79,79,79,79,-118,-119,-120,-121,-122,79,79,79,-67,-66,-70,-64,79,79,79,79,-75,79,-83,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-65,79,-76,79,79,79,79,79,79,-71,-73,79,79,-72,79,-74,]),'RBRACKET':([27,56,57,58,59,60,64,65,66,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,89,90,91,116,130,131,132,134,135,138,139,140,165,172,177,181,182,183,185,187,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,210,211,216,219,220,222,226,],[-143,-79,-81,-112,-84,-114,-108,-86,-123,-88,-129,-130,-143,-90,-140,-141,-142,-92,-93,-95,-97,-102,-105,155,-55,-56,-85,-112,-133,-127,-128,-115,-116,-117,-131,-134,-135,-143,-132,-80,-82,-87,219,-126,-89,-91,-137,-94,-96,-98,-99,-100,-101,-103,-104,-106,-107,-109,-110,-111,225,-143,-113,-124,-125,-136,234,]),'DOT':([30,],[102,]),'GT':([30,58,60,64,66,73,74,75,77,78,79,82,83,84,85,91,102,116,130,131,132,134,135,138,139,140,172,185,190,192,193,194,195,196,197,198,199,200,201,202,203,216,219,220,222,],[103,-112,-114,-108,-123,-129,-130,-143,-140,-141,-142,145,-97,-102,-105,-112,167,-133,-127,-128,-115,-116,-117,-131,-134,-135,-132,-126,-137,145,-98,-99,-100,-101,-103,-104,-106,-107,-109,-110,-111,-113,-124,-125,-136,]),'ELSE':([40,42,43,44,45,46,110,111,113,123,170,180,230,231,238,241,],[-68,-59,-60,-61,-62,-63,-67,-66,-64,-75,-65,-76,236,-73,-72,-74,]),'DIVIDE':([58,60,64,66,73,74,75,77,78,79,85,91,116,130,131,132,134,135,138,139,140,172,185,190,199,200,201,202,203,216,219,220,222,],[-112,-114,-108,-123,-129,-130,-143,-140,-141,-142,153,-112,-133,-127,-128,-115,-116,-117,-131,-134,-135,-132,-126,-137,153,153,-109,-110,-111,-113,-124,-125,-136,]),'MOD':([58,60,64,66,73,74,75,77,78,79,85,91,116,130,131,132,134,135,138,139,140,172,185,190,199,200,201,202,203,216,219,220,222,],[-112,-114,-108,-123,-129,-130,-143,-140,-141,-142,154,-112,-133,-127,-128,-115,-116,-117,-131,-134,-135,-132,-126,-137,154,154,-109,-110,-111,-113,-124,-125,-136,]),'LSHIFT':([58,60,64,66,73,74,75,77,78,79,83,84,85,91,116,130,131,132,134,135,138,139,140,172,185,190,193,194,195,196,197,198,199,200,201,202,203,216,219,220,222,],[-112,-114,-108,-123,-129,-130,-143,-140,-141,-142,148,-102,-105,-112,-133,-127,-128,-115,-116,-117,-131,-134,-135,-132,-126,-137,148,148,148,148,-103,-104,-106,-107,-109,-110,-111,-113,-124,-125,-136,]),'RSHIFT':([58,60,64,66,73,74,75,77,78,79,83,84,85,91,116,130,131,132,134,135,138,139,140,172,185,190,193,194,195,196,197,198,199,200,201,202,203,216,219,220,222,],[-112,-114,-108,-123,-129,-130,-143,-140,-141,-142,149,-102,-105,-112,-133,-127,-128,-115,-116,-117,-131,-134,-135,-132,-126,-137,149,149,149,149,-103,-104,-106,-107,-109,-110,-111,-113,-124,-125,-136,]),'LE':([58,60,64,66,73,74,75,77,78,79,82,83,84,85,91,116,130,131,132,134,135,138,139,140,172,185,190,192,193,194,195,196,197,198,199,200,201,202,203,216,219,220,222,],[-112,-114,-108,-123,-129,-130,-143,-140,-141,-142,146,-97,-102,-105,-112,-133,-127,-128,-115,-116,-117,-131,-134,-135,-132,-126,-137,146,-98,-99,-100,-101,-103,-104,-106,-107,-109,-110,-111,-113,-124,-125,-136,]),'GE':([58,60,64,66,73,74,75,77,78,79,82,83,84,85,91,116,130,131,132,134,135,138,139,140,172,185,190,192,193,194,195,196,197,198,199,200,201,202,203,216,219,220,222,],[-112,-114,-108,-123,-129,-130,-143,-140,-141,-142,147,-97,-102,-105,-112,-133,-127,-128,-115,-116,-117,-131,-134,-135,-132,-126,-137,147,-98,-99,-100,-101,-103,-104,-106,-107,-109,-110,-111,-113,-124,-125,-136,]),'EQ':([58,60,64,66,73,74,75,77,78,79,81,82,83,84,85,91,116,130,131,132,134,135,138,139,140,172,185,190,191,192,193,194,195,196,197,198,199,200,201,202,203,216,219,220,222,],[-112,-114,-108,-123,-129,-130,-143,-140,-141,-142,143,-95,-97,-102,-105,-112,-133,-127,-128,-115,-116,-117,-131,-134,-135,-132,-126,-137,143,-96,-98,-99,-100,-101,-103,-104,-106,-107,-109,-110,-111,-113,-124,-125,-136,]),'OR':([58,60,64,66,72,73,74,75,76,77,78,79,80,81,82,83,84,85,91,116,130,131,132,134,135,138,139,140,172,185,187,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,216,219,220,222,],[-112,-114,-108,-123,137,-129,-130,-143,-90,-140,-141,-142,-92,-93,-95,-97,-102,-105,-112,-133,-127,-128,-115,-116,-117,-131,-134,-135,-132,-126,137,-91,-137,-94,-96,-98,-99,-100,-101,-103,-104,-106,-107,-109,-110,-111,-113,-124,-125,-136,]),'LAND':([58,60,64,65,66,72,73,74,75,76,77,78,79,80,81,82,83,84,85,91,116,130,131,132,134,135,138,139,140,172,182,185,187,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,216,219,220,222,],[-112,-114,-108,136,-123,-88,-129,-130,-143,-90,-140,-141,-142,-92,-93,-95,-97,-102,-105,-112,-133,-127,-128,-115,-116,-117,-131,-134,-135,-132,136,-126,-89,-91,-137,-94,-96,-98,-99,-100,-101,-103,-104,-106,-107,-109,-110,-111,-113,-124,-125,-136,]),'LOR':([58,59,60,64,65,66,72,73,74,75,76,77,78,79,80,81,82,83,84,85,91,116,130,131,132,134,135,138,139,140,172,182,185,187,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,216,219,220,222,],[-112,127,-114,-108,-86,-123,-88,-129,-130,-143,-90,-140,-141,-142,-92,-93,-95,-97,-102,-105,-112,-133,-127,-128,-115,-116,-117,-131,-134,-135,-132,-87,-126,-89,-91,-137,-94,-96,-98,-99,-100,-101,-103,-104,-106,-107,-109,-110,-111,-113,-124,-125,-136,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'translation_unit':([0,],[1,]),'external_declaration':([0,1,],[2,15,]),'function_definition':([0,1,],[3,3,]),'declaration':([0,1,8,17,21,24,31,38,],[4,4,23,23,37,23,37,37,]),'declaration_specifiers':([0,1,8,9,17,21,24,28,31,38,159,164,175,212,],[7,7,25,26,25,25,25,99,25,25,99,99,99,99,]),'declarator':([0,1,7,14,25,35,99,164,],[8,8,17,29,86,86,160,29,]),'type_specifier':([0,1,8,9,17,21,24,28,31,38,49,92,119,159,164,175,212,],[9,9,9,9,9,9,9,9,9,9,119,119,119,9,9,9,9,]),'direct_declarator':([0,1,7,14,25,35,99,164,],[10,10,10,10,10,10,10,10,]),'init_declarator_list':([7,25,],[18,18,]),'init_declarator':([7,25,35,],[20,20,108,]),'declaration_list':([8,17,24,],[21,31,38,]),'compound_statement':([8,17,21,24,31,38,39,109,215,217,236,240,],[22,32,36,43,104,43,43,43,43,43,43,43,]),'statement_list':([24,38,],[39,109,]),'statement':([24,38,39,109,215,217,236,240,],[41,41,112,112,230,231,238,241,]),'expression_statement':([24,38,39,109,215,217,236,240,],[42,42,42,42,42,42,42,42,]),'selection_statement':([24,38,39,109,215,217,236,240,],[44,44,44,44,44,44,44,44,]),'iteration_statement':([24,38,39,109,215,217,236,240,],[45,45,45,45,45,45,45,45,]),'jump_statement':([24,38,39,109,215,217,236,240,],[46,46,46,46,46,46,46,46,]),'expression_opt':([24,38,39,54,109,122,215,217,218,236,237,240,],[47,47,47,124,47,179,47,47,232,47,239,47,]),'expression':([24,38,39,49,54,92,109,114,121,122,128,133,141,215,217,218,236,237,240,],[50,50,50,115,50,115,50,171,178,50,183,115,189,50,50,50,50,50,50,]),'empty':([24,27,38,39,54,75,99,109,118,122,164,165,175,211,212,215,217,218,236,237,240,],[55,88,55,55,55,140,162,55,162,55,208,88,208,88,208,55,55,55,55,55,55,]),'assignment_expression':([24,33,38,39,49,54,92,107,109,114,120,121,122,125,128,129,133,141,214,215,217,218,221,236,237,240,],[56,106,56,56,56,56,56,106,56,56,177,56,56,181,56,186,56,56,106,56,56,56,233,56,56,56,]),'conditional_expression':([24,27,33,38,39,49,54,92,107,109,114,120,121,122,125,128,129,133,141,165,211,214,215,217,218,221,236,237,240,],[57,90,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,90,90,57,57,57,57,57,57,57,57,]),'unary_expression':([24,27,33,38,39,49,54,61,62,63,92,107,109,114,120,121,122,125,127,128,129,133,136,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,173,211,214,215,217,218,221,236,237,240,],[58,91,58,58,58,58,58,132,134,91,58,58,58,58,58,58,58,58,91,58,58,58,91,91,58,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,58,58,58,58,58,58,58,58,]),'logical_or_expression':([24,27,33,38,39,49,54,92,107,109,114,120,121,122,125,128,129,133,141,165,211,214,215,217,218,221,236,237,240,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'postfix_expression':([24,27,33,38,39,49,54,61,62,63,92,107,109,114,120,121,122,125,127,128,129,133,136,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,173,211,214,215,217,218,221,236,237,240,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'unary_operator':([24,27,33,38,39,49,54,61,62,63,92,107,109,114,120,121,122,125,127,128,129,133,136,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,173,211,214,215,217,218,221,236,237,240,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'cast_expression':([24,27,33,38,39,49,54,63,92,107,109,114,120,121,122,125,127,128,129,133,136,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,173,211,214,215,217,218,221,236,237,240,],[64,64,64,64,64,64,64,135,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,201,202,203,64,216,64,64,64,64,64,64,64,64,64,]),'logical_and_expression':([24,27,33,38,39,49,54,92,107,109,114,120,121,122,125,127,128,129,133,141,165,211,214,215,217,218,221,236,237,240,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,182,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'primary_expression':([24,27,33,38,39,49,54,61,62,63,92,107,109,114,120,121,122,125,127,128,129,133,136,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,173,211,214,215,217,218,221,236,237,240,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'inclusive_or_expression':([24,27,33,38,39,49,54,92,107,109,114,120,121,122,125,127,128,129,133,136,141,165,211,214,215,217,218,221,236,237,240,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,187,72,72,72,72,72,72,72,72,72,72,72,]),'constant':([24,27,33,38,39,49,54,61,62,63,92,107,109,114,120,121,122,125,127,128,129,133,136,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,173,211,214,215,217,218,221,236,237,240,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'exclusive_or_expression':([24,27,33,38,39,49,54,92,107,109,114,120,121,122,125,127,128,129,133,136,137,141,165,211,214,215,217,218,221,236,237,240,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,188,76,76,76,76,76,76,76,76,76,76,76,]),'and_expression':([24,27,33,38,39,49,54,92,107,109,114,120,121,122,125,127,128,129,133,136,137,141,165,211,214,215,217,218,221,236,237,240,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'equality_expression':([24,27,33,38,39,49,54,92,107,109,114,120,121,122,125,127,128,129,133,136,137,141,142,165,211,214,215,217,218,221,236,237,240,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,191,81,81,81,81,81,81,81,81,81,81,]),'relational_expression':([24,27,33,38,39,49,54,92,107,109,114,120,121,122,125,127,128,129,133,136,137,141,142,143,165,211,214,215,217,218,221,236,237,240,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,192,82,82,82,82,82,82,82,82,82,82,]),'shift_expression':([24,27,33,38,39,49,54,92,107,109,114,120,121,122,125,127,128,129,133,136,137,141,142,143,144,145,146,147,165,211,214,215,217,218,221,236,237,240,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,193,194,195,196,83,83,83,83,83,83,83,83,83,83,]),'additive_expression':([24,27,33,38,39,49,54,92,107,109,114,120,121,122,125,127,128,129,133,136,137,141,142,143,144,145,146,147,148,149,165,211,214,215,217,218,221,236,237,240,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,197,198,84,84,84,84,84,84,84,84,84,84,]),'multiplicative_expression':([24,27,33,38,39,49,54,92,107,109,114,120,121,122,125,127,128,129,133,136,137,141,142,143,144,145,146,147,148,149,150,151,165,211,214,215,217,218,221,236,237,240,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,199,200,85,85,85,85,85,85,85,85,85,85,]),'constant_expression_opt':([27,165,211,],[87,210,226,]),'constant_expression':([27,165,211,],[89,89,89,]),'parameter_type_list':([28,164,175,212,],[93,209,209,209,]),'identifier_list':([28,],[95,]),'parameter_list':([28,164,175,212,],[96,96,96,96,]),'parameter_declaration':([28,159,164,175,212,],[98,205,98,98,98,]),'include_endings':([30,],[101,]),'initializer':([33,107,214,],[105,169,229,]),'type_name':([49,92,],[117,117,]),'specifier_qualifier_list':([49,92,119,],[118,118,176,]),'assignment_operator':([58,],[125,]),'function_call':([75,],[138,]),'function_call2':([75,],[139,]),'abstract_declarator_opt':([99,118,],[161,174,]),'abstract_declarator':([99,118,164,175,],[163,163,206,206,]),'direct_abstract_declarator':([99,118,164,175,],[166,166,166,166,]),'initializer_list':([107,],[168,]),'argument_expression_list':([129,],[184,]),'parameter_type_list_opt':([164,175,212,],[207,207,227,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit","S'",1,None,None,None),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit_1','calc.py',163),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit_2','calc.py',168),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration_1','calc.py',177),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration_2','calc.py',182),
  ('external_declaration -> INCLUDE LT ID include_endings','external_declaration',4,'p_external_declaration_3','calc.py',186),
  ('include_endings -> DOT GT','include_endings',2,'p_include_endings_1','calc.py',191),
  ('include_endings -> GT','include_endings',1,'p_include_endings_2','calc.py',195),
  ('function_definition -> declaration_specifiers declarator declaration_list compound_statement','function_definition',4,'p_function_definition_1','calc.py',203),
  ('function_definition -> declarator declaration_list compound_statement','function_definition',3,'p_function_definition_2','calc.py',210),
  ('function_definition -> declarator compound_statement','function_definition',2,'p_function_definition_3','calc.py',217),
  ('function_definition -> declaration_specifiers declarator compound_statement','function_definition',3,'p_function_definition_4','calc.py',224),
  ('declaration -> declaration_specifiers init_declarator_list SEMI','declaration',3,'p_declaration_1','calc.py',240),
  ('declaration -> declaration_specifiers SEMI','declaration',2,'p_declaration_2','calc.py',245),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_1','calc.py',259),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_2','calc.py',264),
  ('declaration_specifiers -> type_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers_1','calc.py',271),
  ('declaration_specifiers -> type_specifier','declaration_specifiers',1,'p_declaration_specifiers_2','calc.py',276),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','calc.py',284),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','calc.py',285),
  ('type_specifier -> TYPEID','type_specifier',1,'p_type_specifier','calc.py',286),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list_1','calc.py',295),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list_2','calc.py',302),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator_1','calc.py',309),
  ('init_declarator -> declarator EQUALS initializer','init_declarator',3,'p_init_declarator_2','calc.py',314),
  ('specifier_qualifier_list -> type_specifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list_1','calc.py',321),
  ('specifier_qualifier_list -> type_specifier','specifier_qualifier_list',1,'p_specifier_qualifier_list_2','calc.py',326),
  ('declarator -> direct_declarator','declarator',1,'p_declarator_1','calc.py',334),
  ('direct_declarator -> ID','direct_declarator',1,'p_direct_declarator_1','calc.py',341),
  ('direct_declarator -> LPAREN declarator RPAREN','direct_declarator',3,'p_direct_declarator_2','calc.py',346),
  ('direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET','direct_declarator',4,'p_direct_declarator_3','calc.py',351),
  ('direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN','direct_declarator',4,'p_direct_declarator_4','calc.py',356),
  ('direct_declarator -> direct_declarator LPAREN identifier_list RPAREN','direct_declarator',4,'p_direct_declarator_5','calc.py',361),
  ('direct_declarator -> direct_declarator LPAREN RPAREN','direct_declarator',3,'p_direct_declarator_6','calc.py',366),
  ('parameter_type_list -> parameter_list','parameter_type_list',1,'p_parameter_type_list_1','calc.py',374),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list_1','calc.py',382),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list_2','calc.py',387),
  ('parameter_declaration -> declaration_specifiers declarator','parameter_declaration',2,'p_parameter_declaration_1','calc.py',394),
  ('parameter_declaration -> declaration_specifiers abstract_declarator_opt','parameter_declaration',2,'p_parameter_declaration_2','calc.py',399),
  ('identifier_list -> ID','identifier_list',1,'p_identifier_list_1','calc.py',406),
  ('identifier_list -> identifier_list COMMA ID','identifier_list',3,'p_identifier_list_2','calc.py',411),
  ('initializer -> assignment_expression','initializer',1,'p_initializer_1','calc.py',418),
  ('initializer -> LBRACE initializer_list RBRACE','initializer',3,'p_initializer_2','calc.py',423),
  ('initializer -> LBRACE initializer_list COMMA RBRACE','initializer',4,'p_initializer_2','calc.py',424),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list_1','calc.py',431),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list_2','calc.py',436),
  ('type_name -> specifier_qualifier_list abstract_declarator_opt','type_name',2,'p_type_name','calc.py',443),
  ('abstract_declarator_opt -> empty','abstract_declarator_opt',1,'p_abstract_declarator_opt_1','calc.py',448),
  ('abstract_declarator_opt -> abstract_declarator','abstract_declarator_opt',1,'p_abstract_declarator_opt_2','calc.py',453),
  ('abstract_declarator -> direct_abstract_declarator','abstract_declarator',1,'p_abstract_declarator_1','calc.py',460),
  ('direct_abstract_declarator -> LPAREN abstract_declarator RPAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator_1','calc.py',467),
  ('direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_opt RBRACKET','direct_abstract_declarator',4,'p_direct_abstract_declarator_2','calc.py',472),
  ('direct_abstract_declarator -> LBRACKET constant_expression_opt RBRACKET','direct_abstract_declarator',3,'p_direct_abstract_declarator_3','calc.py',477),
  ('direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN','direct_abstract_declarator',4,'p_direct_abstract_declarator_4','calc.py',482),
  ('direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator_5','calc.py',487),
  ('constant_expression_opt -> empty','constant_expression_opt',1,'p_constant_expression_opt_1','calc.py',494),
  ('constant_expression_opt -> constant_expression','constant_expression_opt',1,'p_constant_expression_opt_2','calc.py',499),
  ('parameter_type_list_opt -> empty','parameter_type_list_opt',1,'p_parameter_type_list_opt_1','calc.py',504),
  ('parameter_type_list_opt -> parameter_type_list','parameter_type_list_opt',1,'p_parameter_type_list_opt_2','calc.py',509),
  ('statement -> expression_statement','statement',1,'p_statement','calc.py',517),
  ('statement -> compound_statement','statement',1,'p_statement','calc.py',518),
  ('statement -> selection_statement','statement',1,'p_statement','calc.py',519),
  ('statement -> iteration_statement','statement',1,'p_statement','calc.py',520),
  ('statement -> jump_statement','statement',1,'p_statement','calc.py',521),
  ('expression_statement -> expression_opt SEMI','expression_statement',2,'p_expression_statement','calc.py',530),
  ('compound_statement -> LBRACE declaration_list statement_list RBRACE','compound_statement',4,'p_compound_statement_1','calc.py',537),
  ('compound_statement -> LBRACE statement_list RBRACE','compound_statement',3,'p_compound_statement_2','calc.py',542),
  ('compound_statement -> LBRACE declaration_list RBRACE','compound_statement',3,'p_compound_statement_3','calc.py',547),
  ('compound_statement -> LBRACE RBRACE','compound_statement',2,'p_compound_statement_4','calc.py',552),
  ('statement_list -> statement','statement_list',1,'p_statement_list_1','calc.py',559),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_2','calc.py',564),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement_1','calc.py',571),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement_2','calc.py',578),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement_1','calc.py',588),
  ('iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement','iteration_statement',9,'p_iteration_statement_2','calc.py',595),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement_1','calc.py',602),
  ('jump_statement -> RETURN expression_opt SEMI','jump_statement',3,'p_jump_statement_2','calc.py',607),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt_1','calc.py',612),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt_2','calc.py',617),
  ('expression -> assignment_expression','expression',1,'p_expression_1','calc.py',624),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression_2','calc.py',629),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression_1','calc.py',636),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression_2','calc.py',641),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','calc.py',649),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression_1','calc.py',657),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','calc.py',664),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression_1','calc.py',671),
  ('logical_or_expression -> logical_or_expression LOR logical_and_expression','logical_or_expression',3,'p_logical_or_expression_2','calc.py',676),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression_1','calc.py',683),
  ('logical_and_expression -> logical_and_expression LAND inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression_2','calc.py',688),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression_1','calc.py',695),
  ('inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression_2','calc.py',700),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression_1','calc.py',708),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression_1','calc.py',716),
  ('and_expression -> and_expression AND equality_expression','and_expression',3,'p_and_expression_2','calc.py',721),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression_1','calc.py',727),
  ('equality_expression -> equality_expression EQ relational_expression','equality_expression',3,'p_equality_expression_2','calc.py',732),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression_1','calc.py',738),
  ('relational_expression -> relational_expression LT shift_expression','relational_expression',3,'p_relational_expression_2','calc.py',743),
  ('relational_expression -> relational_expression GT shift_expression','relational_expression',3,'p_relational_expression_3','calc.py',748),
  ('relational_expression -> relational_expression LE shift_expression','relational_expression',3,'p_relational_expression_4','calc.py',753),
  ('relational_expression -> relational_expression GE shift_expression','relational_expression',3,'p_relational_expression_5','calc.py',758),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression_1','calc.py',765),
  ('shift_expression -> shift_expression LSHIFT additive_expression','shift_expression',3,'p_shift_expression_2','calc.py',770),
  ('shift_expression -> shift_expression RSHIFT additive_expression','shift_expression',3,'p_shift_expression_3','calc.py',775),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression_1','calc.py',783),
  ('additive_expression -> additive_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression_2','calc.py',788),
  ('additive_expression -> additive_expression MINUS multiplicative_expression','additive_expression',3,'p_additive_expression_3','calc.py',793),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression_1','calc.py',800),
  ('multiplicative_expression -> multiplicative_expression TIMES cast_expression','multiplicative_expression',3,'p_multiplicative_expression_2','calc.py',805),
  ('multiplicative_expression -> multiplicative_expression DIVIDE cast_expression','multiplicative_expression',3,'p_multiplicative_expression_3','calc.py',810),
  ('multiplicative_expression -> multiplicative_expression MOD cast_expression','multiplicative_expression',3,'p_multiplicative_expression_4','calc.py',815),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression_1','calc.py',822),
  ('cast_expression -> LPAREN type_name RPAREN cast_expression','cast_expression',4,'p_cast_expression_2','calc.py',827),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression_1','calc.py',834),
  ('unary_expression -> PLUSPLUS unary_expression','unary_expression',2,'p_unary_expression_2','calc.py',839),
  ('unary_expression -> MINUSMINUS unary_expression','unary_expression',2,'p_unary_expression_3','calc.py',844),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_4','calc.py',849),
  ('unary_operator -> AND','unary_operator',1,'p_unary_operator','calc.py',857),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','calc.py',858),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','calc.py',859),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','calc.py',860),
  ('unary_operator -> LNOT','unary_operator',1,'p_unary_operator','calc.py',861),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression_1','calc.py',868),
  ('postfix_expression -> postfix_expression LBRACKET expression RBRACKET','postfix_expression',4,'p_postfix_expression_2','calc.py',873),
  ('postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN','postfix_expression',4,'p_postfix_expression_3','calc.py',878),
  ('postfix_expression -> postfix_expression LPAREN RPAREN','postfix_expression',3,'p_postfix_expression_4','calc.py',883),
  ('postfix_expression -> postfix_expression PLUSPLUS','postfix_expression',2,'p_postfix_expression_5','calc.py',888),
  ('postfix_expression -> postfix_expression MINUSMINUS','postfix_expression',2,'p_postfix_expression_6','calc.py',893),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression','calc.py',900),
  ('primary_expression -> SCONST','primary_expression',1,'p_primary_expression','calc.py',901),
  ('primary_expression -> ID function_call','primary_expression',2,'p_primary_expression','calc.py',902),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','calc.py',903),
  ('primary_expression -> LPAREN RPAREN','primary_expression',2,'p_primary_expression','calc.py',904),
  ('function_call -> function_call2','function_call',1,'p_function_call','calc.py',908),
  ('function_call -> empty','function_call',1,'p_function_call','calc.py',909),
  ('function_call2 -> LPAREN expression RPAREN','function_call2',3,'p_function_call2','calc.py',912),
  ('function_call2 -> LPAREN RPAREN','function_call2',2,'p_function_call2','calc.py',913),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','calc.py',923),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','calc.py',924),
  ('constant -> ICONST','constant',1,'p_constant','calc.py',931),
  ('constant -> FCONST','constant',1,'p_constant','calc.py',932),
  ('constant -> CCONST','constant',1,'p_constant','calc.py',933),
  ('empty -> <empty>','empty',0,'p_empty','calc.py',938),
]
